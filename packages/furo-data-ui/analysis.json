{
  "schema_version": "1.0.0",
  "elements": [
    {
      "description": "`furo-data-table`\nRead only data table based on the response type from the rest api spec.\n\n```\n<furo-data-table Æ’-bind-data=\"--data\" type=\"vnd.com.abc\" @-tablerow-selected=\"--rowSelected\" @-checkstate-changed=\"--checkStateChanged\"></furo-data-table>\n```\n\nConfiguration:\nAttribute: hide-header | hides the table header row\n\nTags: data-ui",
      "summary": "datatable",
      "path": "packages/furo-data-ui/furo-data-table.js",
      "properties": [
        {
          "name": "type",
          "type": "string | null | undefined",
          "description": "Typedefinition of incoming collection items\nREST SPEC Type\ne.g. vnd.com.abc.[type]",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 231,
              "column": 4
            },
            "end": {
              "line": 236,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "hideHeader",
          "type": "boolean | null | undefined",
          "description": "Flag to show table header information\nTRUE => shows header",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 99,
              "column": 12
            },
            "end": {
              "line": 101,
              "column": 13
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          }
        }
      ],
      "methods": [
        {
          "name": "_attachDom",
          "description": "Auto append fbp for Polymer",
          "privacy": "protected",
          "sourceRange": {
            "file": "../../../@furo/fbp/fbp.js",
            "start": {
              "line": 48,
              "column": 8
            },
            "end": {
              "line": 51,
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "dom"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "FBP"
        },
        {
          "name": "firstUpdated",
          "description": "Event listening and type check",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 294,
              "column": 4
            },
            "end": {
              "line": 320,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "changedProps"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_FBPTriggerWire",
          "description": "Triggers a wire",
          "privacy": "public",
          "sourceRange": {
            "file": "../../../@furo/fbp/fbp.js",
            "start": {
              "line": 70,
              "column": 8
            },
            "end": {
              "line": 113,
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "wire",
              "description": "(String) Name of the wire like --buttonClicked"
            },
            {
              "name": "detailData",
              "description": "(*) data to pass"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "FBP"
        },
        {
          "name": "_FBPAddWireHook",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../../../@furo/fbp/fbp.js",
            "start": {
              "line": 123,
              "column": 8
            },
            "end": {
              "line": 140,
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "wire",
              "description": "(String) Name of the wire"
            },
            {
              "name": "cb",
              "description": "(function) Callback function cb(detailData)"
            },
            {
              "name": "before"
            }
          ],
          "inheritedFrom": "FBP"
        },
        {
          "name": "_FBPTraceWires",
          "description": "Log all triggered wires for this component. This function may help you at debugging.\nSelect your element in the dev console and call `$0._FBPTraceWires()`",
          "privacy": "public",
          "sourceRange": {
            "file": "../../../@furo/fbp/fbp.js",
            "start": {
              "line": 149,
              "column": 8
            },
            "end": {
              "line": 171,
              "column": 9
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "FBP"
        },
        {
          "name": "_FBPDebug",
          "description": "Get information for the triggered wire. This function may help you at debugging.\nSelect your element in the dev console and call `$0._FBPDebug('--dataReceived')`",
          "privacy": "public",
          "sourceRange": {
            "file": "../../../@furo/fbp/fbp.js",
            "start": {
              "line": 181,
              "column": 8
            },
            "end": {
              "line": 205,
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "wire"
            },
            {
              "name": "openDebugger",
              "description": "opens the debugger console, so you can inspect your component."
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "FBP"
        },
        {
          "name": "__toCamelCase",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "../../../@furo/fbp/fbp.js",
            "start": {
              "line": 207,
              "column": 8
            },
            "end": {
              "line": 211,
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "str"
            }
          ],
          "inheritedFrom": "FBP"
        },
        {
          "name": "_appendFBP",
          "description": "parses the dom for flowbased programming tags",
          "privacy": "private",
          "sourceRange": {
            "file": "../../../@furo/fbp/fbp.js",
            "start": {
              "line": 218,
              "column": 8
            },
            "end": {
              "line": 498,
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "dom",
              "description": "dom node"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "FBP"
        },
        {
          "name": "_FBPReady",
          "description": "Livecycle method\nThis method is called, when the wires are ready",
          "privacy": "protected",
          "sourceRange": {
            "file": "../../../@furo/fbp/fbp.js",
            "start": {
              "line": 504,
              "column": 8
            },
            "end": {
              "line": 506,
              "column": 9
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "FBP"
        },
        {
          "name": "__enqueueTrigger",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "../../../@furo/fbp/fbp.js",
            "start": {
              "line": 507,
              "column": 8
            },
            "end": {
              "line": 509,
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "wire"
            },
            {
              "name": "detailData"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "FBP"
        },
        {
          "name": "__resolveWireAndPath",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "../../../@furo/fbp/fbp.js",
            "start": {
              "line": 511,
              "column": 8
            },
            "end": {
              "line": 519,
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "w"
            }
          ],
          "inheritedFrom": "FBP"
        },
        {
          "name": "disconnectedCallback",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "../../../@furo/fbp/fbp.js",
            "start": {
              "line": 521,
              "column": 8
            },
            "end": {
              "line": 535,
              "column": 9
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "FBP"
        },
        {
          "name": "_pathGet",
          "description": "Reads a value from a path.  If any sub-property in the path is `undefined`,\nthis method returns `undefined` (will never throw.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../../../@furo/fbp/fbp.js",
            "start": {
              "line": 546,
              "column": 8
            },
            "end": {
              "line": 559,
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "root",
              "type": "Object",
              "description": "Object from which to dereference path from"
            },
            {
              "name": "path",
              "type": "(string | !Array.<(string | number)>)",
              "description": "Path to read"
            }
          ],
          "return": {
            "type": "*",
            "desc": "Value at path, or `undefined` if the path could not be\n fully dereferenced."
          },
          "inheritedFrom": "FBP"
        },
        {
          "name": "_pathSet",
          "description": "Sets a value to a path.  If any sub-property in the path is `undefined`,\nthis method will no-op.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../../../@furo/fbp/fbp.js",
            "start": {
              "line": 570,
              "column": 8
            },
            "end": {
              "line": 592,
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "root",
              "type": "Object",
              "description": "Object from which to dereference path from"
            },
            {
              "name": "path",
              "type": "(string | !Array.<(string | number)>)",
              "description": "Path to set"
            },
            {
              "name": "value",
              "type": "*",
              "description": "Value to set to path"
            }
          ],
          "return": {
            "type": "(string | undefined)",
            "desc": "The normalized version of the input path"
          },
          "inheritedFrom": "FBP"
        },
        {
          "name": "_split",
          "description": "Splits a path into an array of property names. Accepts either arrays\nof path parts or strings.\n\nExample:\n\n```\nsplit(['foo.bar', 0, 'baz'])  // ['foo', 'bar', '0', 'baz']\nsplit('foo.bar.0.baz')        // ['foo', 'bar', '0', 'baz']\n```",
          "privacy": "protected",
          "sourceRange": {
            "file": "../../../@furo/fbp/fbp.js",
            "start": {
              "line": 610,
              "column": 8
            },
            "end": {
              "line": 612,
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "path",
              "type": "(string | !Array.<(string | number)>)",
              "description": "Input path"
            }
          ],
          "return": {
            "type": "!Array.<string>",
            "desc": "Array of path parts"
          },
          "inheritedFrom": "FBP"
        },
        {
          "name": "_checkType",
          "description": "SPEC Type checker\nBuilds the column Array for the inner template",
          "privacy": "private",
          "sourceRange": {
            "start": {
              "line": 244,
              "column": 4
            },
            "end": {
              "line": 288,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "type"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "focus",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 322,
              "column": 4
            },
            "end": {
              "line": 325,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "bindData",
          "description": "Binds collection-object to data-table",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 331,
              "column": 4
            },
            "end": {
              "line": 345,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "collectionNode",
              "type": "CollectionNode"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "render",
          "description": "Template rendering",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 351,
              "column": 4
            },
            "end": {
              "line": 383,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "(TemplateResult | TemplateResult)"
          }
        },
        {
          "name": "_navigate",
          "description": "Handles key navigation",
          "privacy": "private",
          "sourceRange": {
            "start": {
              "line": 390,
              "column": 4
            },
            "end": {
              "line": 412,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_selectRow",
          "description": "Handles table row select",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 418,
              "column": 4
            },
            "end": {
              "line": 438,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_selectRowByIndex",
          "description": "Comfort function to select a specific table row\nby index",
          "privacy": "private",
          "sourceRange": {
            "start": {
              "line": 446,
              "column": 4
            },
            "end": {
              "line": 458,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "idx"
            }
          ],
          "return": {
            "type": "void"
          }
        }
      ],
      "staticMethods": [],
      "demos": [
        {
          "url": "demo/index.html",
          "description": ""
        }
      ],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 29,
          "column": 0
        },
        "end": {
          "line": 460,
          "column": 1
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "name": "FuroDataTable",
      "attributes": [
        {
          "name": "type",
          "description": "Typedefinition of incoming collection items\nREST SPEC Type\ne.g. vnd.com.abc.[type]",
          "sourceRange": {
            "start": {
              "line": 231,
              "column": 4
            },
            "end": {
              "line": 236,
              "column": 5
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        },
        {
          "name": "hide-header",
          "description": "Flag to show table header information\nTRUE => shows header",
          "sourceRange": {
            "start": {
              "line": 99,
              "column": 12
            },
            "end": {
              "line": 101,
              "column": 13
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        }
      ],
      "events": [
        {
          "type": "CustomEvent",
          "name": "checkstate-changed",
          "description": "Fired when a row is checked or unchecked\nPayload: Array of raw Entities",
          "metadata": {}
        },
        {
          "type": "CustomEvent",
          "name": "contextmenu-requested",
          "description": "Fired when context menu is requested\nPayload: entity",
          "metadata": {}
        },
        {
          "type": "CustomEvent",
          "name": "data-loaded",
          "description": "Fired when inject data has successfully finished.\nPayload: this",
          "metadata": {}
        },
        {
          "type": "CustomEvent",
          "name": "key-pressed",
          "description": "Fired when a key was pressed\nPayload: KeyboardEvent",
          "metadata": {}
        },
        {
          "type": "CustomEvent",
          "name": "spec-error",
          "description": "spec-error\nFired when spec could not be loaded\ndetail payload: {string} spec name",
          "metadata": {}
        },
        {
          "type": "CustomEvent",
          "name": "tablerow-selected",
          "description": "Fired when a table row has been selected.\nPayload: Entity",
          "metadata": {}
        }
      ],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "furo-data-table",
      "mixins": [
        "FBP"
      ]
    }
  ]
}
