// Code generated by furo-proto-gen. DO NOT EDIT.

syntax = "proto3";
package {{.package}};

{{range $key, $option := .options}}
    option {{$key}} = {{if  (typeOf $option | eq "bool")}}{{$option}};{{else}}"{{$option}}";{{end}}{{end}}

import "google/api/annotations.proto";
{{range $import := .imports}}
import "{{$import}}";{{end}}

{{range $service := .groupedservices}}
{{$serviceName := camelcase (snakecase $service.name)}}
// {{$service.description}}
service {{$serviceName}} { {{ $rpcDict := dict }} {{ $keyList := list }} {{range  $k, $v := $service.services }}  {{$_ := set $rpcDict $k $v}} {{ $keyList = append $keyList $k }} {{end}}
    {{range $key := sortAlpha $keyList }} {{ $values := pick $rpcDict $key }} {{ $valueTmp := values $values }} {{ $method := index $valueTmp 0 }}
    // {{$method.description}}
    rpc {{if $method.rpc_name}}{{$method.rpc_name}}{{else}}{{$key}}{{$serviceName}}{{end}} ({{$key}}{{$serviceName}}Request) returns ({{$method.data.response}}){
        //{{$method.deeplink.description}}
        option (google.api.http) = {
            {{ lower $method.deeplink.method}}: "{{$method.deeplink.href}}"{{ if $method.data.request}}
            {{ if or (eq $method.deeplink.method "POST") (eq $method.deeplink.method "PATCH") (eq $method.deeplink.method "PUT")}}body: "data"{{end}}{{end}}
        };
    }{{end}}
}

{{range $key := sortAlpha $keyList }} {{ $values := pick $rpcDict $key }} {{ $valueTmp := values $values }} {{ $method := index $valueTmp 0 }}
message {{$key}}{{$serviceName}}Request { {{ $params := regexFindAll  "{[a-zA-Z]*}" $method.deeplink.href 10}}
{{range $index, $value := $params}}
    string {{ trimAll "}" (trimAll "{" $value ) }} = {{add 1 $index}};{{$length :=$index}}{{end}}{{ if $method.data.request}}
    {{$method.data.request}} data = {{add1 (len $params)}}; {{end}} {{ if $method.query}} {{ $qDict := dict }} {{ $keyList := list }} {{range  $k, $v := $method.query }}{{$_ := set $qDict $k $v}} {{ $keyList = append $keyList $k }} {{end}}
{{range $qIndex, $qKey := sortAlpha $keyList }} {{ $values := pick $qDict $qKey }} {{ $valueTmp := values $values }} {{ $query := index $valueTmp 0 }}
    //{{$query.description}}
    string {{$qKey}} = {{ if $method.data.request}}{{ add (len $params) (add 2 $qIndex)}}{{else}}{{add (len $params) (add1 $qIndex)}}{{end}};{{end}}{{end}}
}
    {{end}}
{{end}}
