// Code generated by @furo/specs. DO NOT EDIT.
// source: {{.source}}
import {LitElement, html, css} from 'lit-element';
import {FBP} from "@furo/fbp";
import {Theme} from "@furo/framework/theme"
import {i18n} from "@furo/framework/i18n"
import '@furo/form';
import '@furo/input';
import '@furo/layout';
{{range $import := .imports}}
import "{{$import}}";{{end}}

/**
 * {{.description}}
 * triggers the events for the entity-agent ({{.service_name}}) which is located in the parent panel
 *
 * @customElement
 * @appliesMixin FBP
 */
class {{.class_name}} extends FBP(LitElement) {

    constructor() {
        super();
        this._entity = {};
    }

    static get styles() {
        // language=CSS
         return Theme.getThemeForComponent('{{.theme}}') || css`
                :host {
                    display: block;
                }

                :host([hidden]) {
                    display: none;
                }

                furo-button-bar {
                    margin: var(--spacing);
                    padding-bottom: var(--spacing);
                }
            `
    }

    /**
     * Bind an entity data object. This will be forwarded to the furo-button-bar element inside this element.
     * The expected entity is of type {{.response_type}}
     *
     * @param entity
     */
    bindEntity(entity){
        if (entity) {
            this._entity = entity;
            this._FBPTriggerWire("--entityObjectInjected", this._entity);

            // if data is injected, get the available HATEOAS links and activate/deactivate action buttons
            this._entity.addEventListener('data-injected', () => {
                let rels = [];
                this._entity.links.__childNodes.forEach((item) => {
                    rels.push(item.value.rel);
                });

                let elems = this.shadowRoot.querySelectorAll('furo-button');
                elems.forEach((item) => {
                    if (item.getAttribute('rel') != null && item.getAttribute('rel').length > 0 && rels.indexOf(item.getAttribute('rel')) === -1){
                        item.setAttribute('hidden', '');
                    } else {
                        item.removeAttribute('hidden', '');
                    }
                });
            });
        }
    }

    startActivity(){
        let elems = this.shadowRoot.querySelectorAll('furo-button');
        elems.forEach((item) => {
            item.setAttribute('disabled', '');
        });
    }

    stopActivity(){
        let elems = this.shadowRoot.querySelectorAll('furo-button');
        let rels = [];
        this._entity.links.__childNodes.forEach((item) => {
            rels.push(item.value.rel);
        });
        elems.forEach((item) => {
            if (item.getAttribute('rel').length <= 0 || rels.indexOf(item.getAttribute('rel')) > -1){
                item.removeAttribute('disabled');
            }
        });
    }

    /**
     * @private
     * @returns {TemplateResult|TemplateResult}
     */
    render() {
        // language=HTML
        return html`
          <furo-button-bar Æ’-bind-entity="--entityObjectInjected">
          {{- range $item := .items}}
           {{"<" | noescape}}{{$item.component}}{{if $item.rel}} rel="{{$item.rel}}"{{end}}{{range $flag := $item.flags}} {{$flag}}{{end}} {{range $attr := $item.attrs}} {{$attr.name}}="{{$attr.val}}" {{end}}
                          {{- if $item.label}} label="${i18n.t('{{$item.label}}')}"{{end}}{{if $item.onclick}} @-click="{{$item.onclick}}"{{end}}>{{"<" | noescape}}/{{$item.component}}>{{end}}
          </furo-button-bar>
        `;
    }

}

window.customElements.define('{{.component_name}}', {{.class_name}});
