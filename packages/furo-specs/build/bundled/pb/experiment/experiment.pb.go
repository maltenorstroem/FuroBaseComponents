// Code generated by furo-proto-gen. DO NOT EDIT.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.21.0-devel
// 	protoc        v3.11.4
// source: experiment/experiment.proto

package experiment

import (
	furo "../furo"
	protobuf_types "../google/protobuf.types.known"
	_type "../google/type"
	project "../project"
	enums "enums"
	proto "github.com/golang/protobuf/proto"
	any "github.com/golang/protobuf/ptypes/any"
	field_mask "google.golang.org/genproto/protobuf/field_mask"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// ExperimentEntity with Experiment
type ExperimentEntity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// contains a experiment.Experiment
	Data *Experiment `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	// Hateoas links
	Links []*furo.Link `protobuf:"bytes,2,rep,name=links,proto3" json:"links,omitempty"`
	// Meta for the response
	Meta *furo.Meta `protobuf:"bytes,3,opt,name=meta,proto3" json:"meta,omitempty"`
}

func (x *ExperimentEntity) Reset() {
	*x = ExperimentEntity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_experiment_experiment_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExperimentEntity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExperimentEntity) ProtoMessage() {}

func (x *ExperimentEntity) ProtoReflect() protoreflect.Message {
	mi := &file_experiment_experiment_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExperimentEntity.ProtoReflect.Descriptor instead.
func (*ExperimentEntity) Descriptor() ([]byte, []int) {
	return file_experiment_experiment_proto_rawDescGZIP(), []int{0}
}

func (x *ExperimentEntity) GetData() *Experiment {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *ExperimentEntity) GetLinks() []*furo.Link {
	if x != nil {
		return x.Links
	}
	return nil
}

func (x *ExperimentEntity) GetMeta() *furo.Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

// Test the Constraints
type Constraints struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Well Known Type Date
	Date *_type.Date `protobuf:"bytes,5,opt,name=date,proto3" json:"date,omitempty"`
	// Localized String representation of a experiment
	DisplayName string `protobuf:"bytes,2,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	// Identity of a experiment
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Well Known Type Money
	Money *_type.Money `protobuf:"bytes,6,opt,name=money,proto3" json:"money,omitempty"`
	// Short experiment description
	Number int32 `protobuf:"varint,3,opt,name=number,proto3" json:"number,omitempty"`
	// Localized String representation of a experiment
	Text string `protobuf:"bytes,4,opt,name=text,proto3" json:"text,omitempty"`
}

func (x *Constraints) Reset() {
	*x = Constraints{}
	if protoimpl.UnsafeEnabled {
		mi := &file_experiment_experiment_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Constraints) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Constraints) ProtoMessage() {}

func (x *Constraints) ProtoReflect() protoreflect.Message {
	mi := &file_experiment_experiment_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Constraints.ProtoReflect.Descriptor instead.
func (*Constraints) Descriptor() ([]byte, []int) {
	return file_experiment_experiment_proto_rawDescGZIP(), []int{1}
}

func (x *Constraints) GetDate() *_type.Date {
	if x != nil {
		return x.Date
	}
	return nil
}

func (x *Constraints) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *Constraints) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Constraints) GetMoney() *_type.Money {
	if x != nil {
		return x.Money
	}
	return nil
}

func (x *Constraints) GetNumber() int32 {
	if x != nil {
		return x.Number
	}
	return 0
}

func (x *Constraints) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

// experiment spec for testing
type Experiment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Short experiment description
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// Localized String representation of a experiment
	DisplayName string `protobuf:"bytes,2,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	// field for furo-data-bool-icon for testing
	FuroDataBoolIcon bool `protobuf:"varint,14,opt,name=furo_data_bool_icon,json=furoDataBoolIcon,proto3" json:"furo_data_bool_icon,omitempty"`
	// field for furo_data_checkbox_input for testing
	FuroDataCheckboxInput bool `protobuf:"varint,4,opt,name=furo_data_checkbox_input,json=furoDataCheckboxInput,proto3" json:"furo_data_checkbox_input,omitempty"`
	// field for furo-data-color-input for testing
	FuroDataColorInput string `protobuf:"bytes,10,opt,name=furo_data_color_input,json=furoDataColorInput,proto3" json:"furo_data_color_input,omitempty"`
	// field for furo-data-date-input for testing
	FuroDataDateInput string `protobuf:"bytes,13,opt,name=furo_data_date_input,json=furoDataDateInput,proto3" json:"furo_data_date_input,omitempty"`
	// field for furo-data-date-input for testing
	FuroDataDateInputGoogle *_type.Date `protobuf:"bytes,18,opt,name=furo_data_date_input_google,json=furoDataDateInputGoogle,proto3" json:"furo_data_date_input_google,omitempty"`
	// field for testing file type
	FuroDataFileInput []string `protobuf:"bytes,22,rep,name=furo_data_file_input,json=furoDataFileInput,proto3" json:"furo_data_file_input,omitempty"`
	// field for testing money type
	FuroDataMoneyInput *_type.Money `protobuf:"bytes,21,opt,name=furo_data_money_input,json=furoDataMoneyInput,proto3" json:"furo_data_money_input,omitempty"`
	// field for furo-data-number-input for testing
	FuroDataNumberInput float32 `protobuf:"fixed32,9,opt,name=furo_data_number_input,json=furoDataNumberInput,proto3" json:"furo_data_number_input,omitempty"`
	// field for furo-data-password-input for testing
	FuroDataPasswordInput string `protobuf:"bytes,11,opt,name=furo_data_password_input,json=furoDataPasswordInput,proto3" json:"furo_data_password_input,omitempty"`
	// field for furo-data-range-input for testing
	FuroDataRangeInput string `protobuf:"bytes,8,opt,name=furo_data_range_input,json=furoDataRangeInput,proto3" json:"furo_data_range_input,omitempty"`
	// field for furo-search-input for testing
	FuroDataSearchInput string `protobuf:"bytes,12,opt,name=furo_data_search_input,json=furoDataSearchInput,proto3" json:"furo_data_search_input,omitempty"`
	// field for furo_data_text_input for testing
	FuroDataTextInput string `protobuf:"bytes,5,opt,name=furo_data_text_input,json=furoDataTextInput,proto3" json:"furo_data_text_input,omitempty"`
	// field for furo_data_textarea_input for testing
	FuroDataTextareaInput string `protobuf:"bytes,6,opt,name=furo_data_textarea_input,json=furoDataTextareaInput,proto3" json:"furo_data_textarea_input,omitempty"`
	// field for furo-data-time-input for testing
	FuroDataTimeInput string `protobuf:"bytes,7,opt,name=furo_data_time_input,json=furoDataTimeInput,proto3" json:"furo_data_time_input,omitempty"`
	// Identity of a experiment
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// repeated string
	Repstring []string `protobuf:"bytes,20,rep,name=repstring,proto3" json:"repstring,omitempty"`
	// field for testing property
	SingleTypeProperty *furo.Property `protobuf:"bytes,19,opt,name=single_type_property,json=singleTypeProperty,proto3" json:"single_type_property,omitempty"`
	// field for testing any
	TheAnyType *any.Any `protobuf:"bytes,15,opt,name=the_any_type,json=theAnyType,proto3" json:"the_any_type,omitempty"`
	// field for testing property
	TypeProperty []*furo.Property `protobuf:"bytes,17,rep,name=type_property,json=typeProperty,proto3" json:"type_property,omitempty"`
	// field for testing static options
	TypeWithOptions string `protobuf:"bytes,16,opt,name=type_with_options,json=typeWithOptions,proto3" json:"type_with_options,omitempty"`
	// Contains a field_mask which fields of the targeted resource are going to be updated
	UpdateMask *protobuf_types.FieldMask `protobuf:"bytes,23,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
}

func (x *Experiment) Reset() {
	*x = Experiment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_experiment_experiment_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Experiment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Experiment) ProtoMessage() {}

func (x *Experiment) ProtoReflect() protoreflect.Message {
	mi := &file_experiment_experiment_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Experiment.ProtoReflect.Descriptor instead.
func (*Experiment) Descriptor() ([]byte, []int) {
	return file_experiment_experiment_proto_rawDescGZIP(), []int{2}
}

func (x *Experiment) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Experiment) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *Experiment) GetFuroDataBoolIcon() bool {
	if x != nil {
		return x.FuroDataBoolIcon
	}
	return false
}

func (x *Experiment) GetFuroDataCheckboxInput() bool {
	if x != nil {
		return x.FuroDataCheckboxInput
	}
	return false
}

func (x *Experiment) GetFuroDataColorInput() string {
	if x != nil {
		return x.FuroDataColorInput
	}
	return ""
}

func (x *Experiment) GetFuroDataDateInput() string {
	if x != nil {
		return x.FuroDataDateInput
	}
	return ""
}

func (x *Experiment) GetFuroDataDateInputGoogle() *_type.Date {
	if x != nil {
		return x.FuroDataDateInputGoogle
	}
	return nil
}

func (x *Experiment) GetFuroDataFileInput() []string {
	if x != nil {
		return x.FuroDataFileInput
	}
	return nil
}

func (x *Experiment) GetFuroDataMoneyInput() *_type.Money {
	if x != nil {
		return x.FuroDataMoneyInput
	}
	return nil
}

func (x *Experiment) GetFuroDataNumberInput() float32 {
	if x != nil {
		return x.FuroDataNumberInput
	}
	return 0
}

func (x *Experiment) GetFuroDataPasswordInput() string {
	if x != nil {
		return x.FuroDataPasswordInput
	}
	return ""
}

func (x *Experiment) GetFuroDataRangeInput() string {
	if x != nil {
		return x.FuroDataRangeInput
	}
	return ""
}

func (x *Experiment) GetFuroDataSearchInput() string {
	if x != nil {
		return x.FuroDataSearchInput
	}
	return ""
}

func (x *Experiment) GetFuroDataTextInput() string {
	if x != nil {
		return x.FuroDataTextInput
	}
	return ""
}

func (x *Experiment) GetFuroDataTextareaInput() string {
	if x != nil {
		return x.FuroDataTextareaInput
	}
	return ""
}

func (x *Experiment) GetFuroDataTimeInput() string {
	if x != nil {
		return x.FuroDataTimeInput
	}
	return ""
}

func (x *Experiment) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Experiment) GetRepstring() []string {
	if x != nil {
		return x.Repstring
	}
	return nil
}

func (x *Experiment) GetSingleTypeProperty() *furo.Property {
	if x != nil {
		return x.SingleTypeProperty
	}
	return nil
}

func (x *Experiment) GetTheAnyType() *any.Any {
	if x != nil {
		return x.TheAnyType
	}
	return nil
}

func (x *Experiment) GetTypeProperty() []*furo.Property {
	if x != nil {
		return x.TypeProperty
	}
	return nil
}

func (x *Experiment) GetTypeWithOptions() string {
	if x != nil {
		return x.TypeWithOptions
	}
	return ""
}

func (x *Experiment) GetUpdateMask() *protobuf_types.FieldMask {
	if x != nil {
		return x.UpdateMask
	}
	return nil
}

// Test the default value
type Default struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Short experiment description
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// Localized String representation of a experiment
	DisplayName string `protobuf:"bytes,2,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	// field for furo_data_checkbox_input for testing
	FuroDataCheckboxInput bool `protobuf:"varint,5,opt,name=furo_data_checkbox_input,json=furoDataCheckboxInput,proto3" json:"furo_data_checkbox_input,omitempty"`
	// Identity of a experiment
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// repeated string
	Repstring []string `protobuf:"bytes,4,rep,name=repstring,proto3" json:"repstring,omitempty"`
}

func (x *Default) Reset() {
	*x = Default{}
	if protoimpl.UnsafeEnabled {
		mi := &file_experiment_experiment_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Default) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Default) ProtoMessage() {}

func (x *Default) ProtoReflect() protoreflect.Message {
	mi := &file_experiment_experiment_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Default.ProtoReflect.Descriptor instead.
func (*Default) Descriptor() ([]byte, []int) {
	return file_experiment_experiment_proto_rawDescGZIP(), []int{3}
}

func (x *Default) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Default) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *Default) GetFuroDataCheckboxInput() bool {
	if x != nil {
		return x.FuroDataCheckboxInput
	}
	return false
}

func (x *Default) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Default) GetRepstring() []string {
	if x != nil {
		return x.Repstring
	}
	return nil
}

// Readonly spec for testing
type Readonly struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Meta for the response
	Meta *furo.Meta `protobuf:"bytes,3,opt,name=meta,proto3" json:"meta,omitempty"`
	// Identity of a experiment
	Project *project.Project `protobuf:"bytes,1,opt,name=project,proto3" json:"project,omitempty"`
}

func (x *Readonly) Reset() {
	*x = Readonly{}
	if protoimpl.UnsafeEnabled {
		mi := &file_experiment_experiment_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Readonly) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Readonly) ProtoMessage() {}

func (x *Readonly) ProtoReflect() protoreflect.Message {
	mi := &file_experiment_experiment_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Readonly.ProtoReflect.Descriptor instead.
func (*Readonly) Descriptor() ([]byte, []int) {
	return file_experiment_experiment_proto_rawDescGZIP(), []int{4}
}

func (x *Readonly) GetMeta() *furo.Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *Readonly) GetProject() *project.Project {
	if x != nil {
		return x.Project
	}
	return nil
}

// recursive type for testing
type Recursive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Localized String representation
	DisplayName string `protobuf:"bytes,2,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	// Identity
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The recursion
	Recursion *Recursive `protobuf:"bytes,3,opt,name=recursion,proto3" json:"recursion,omitempty"`
}

func (x *Recursive) Reset() {
	*x = Recursive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_experiment_experiment_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Recursive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Recursive) ProtoMessage() {}

func (x *Recursive) ProtoReflect() protoreflect.Message {
	mi := &file_experiment_experiment_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Recursive.ProtoReflect.Descriptor instead.
func (*Recursive) Descriptor() ([]byte, []int) {
	return file_experiment_experiment_proto_rawDescGZIP(), []int{5}
}

func (x *Recursive) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *Recursive) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Recursive) GetRecursion() *Recursive {
	if x != nil {
		return x.Recursion
	}
	return nil
}

// ExperimentCollection with repeated ExperimentEntity
type ExperimentCollection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Contains a experiment.ExperimentEntity repeated
	Entities []*ExperimentEntity `protobuf:"bytes,4,rep,name=entities,proto3" json:"entities,omitempty"`
	// Hateoas links
	Links []*furo.Link `protobuf:"bytes,3,rep,name=links,proto3" json:"links,omitempty"`
	// Meta for the response
	Meta *furo.Meta `protobuf:"bytes,2,opt,name=meta,proto3" json:"meta,omitempty"`
}

func (x *ExperimentCollection) Reset() {
	*x = ExperimentCollection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_experiment_experiment_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExperimentCollection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExperimentCollection) ProtoMessage() {}

func (x *ExperimentCollection) ProtoReflect() protoreflect.Message {
	mi := &file_experiment_experiment_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExperimentCollection.ProtoReflect.Descriptor instead.
func (*ExperimentCollection) Descriptor() ([]byte, []int) {
	return file_experiment_experiment_proto_rawDescGZIP(), []int{6}
}

func (x *ExperimentCollection) GetEntities() []*ExperimentEntity {
	if x != nil {
		return x.Entities
	}
	return nil
}

func (x *ExperimentCollection) GetLinks() []*furo.Link {
	if x != nil {
		return x.Links
	}
	return nil
}

func (x *ExperimentCollection) GetMeta() *furo.Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

// oneof experiment spec for testing
type Oneof struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// skalar in a group of complex
	Enumexample enums.Corpus `protobuf:"varint,29,opt,name=enumexample,proto3,enum=enums.Corpus" json:"enumexample,omitempty"`
	// field for testing file type
	FuroDataFileInput []string `protobuf:"bytes,22,rep,name=furo_data_file_input,json=furoDataFileInput,proto3" json:"furo_data_file_input,omitempty"`
	// Identity of a experiment
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Types that are assignable to Aaa:
	//	*Oneof_DisplayName
	//	*Oneof_FuroDataCheckboxInput
	Aaa isOneof_Aaa `protobuf_oneof:"aaa"`
	// Types that are assignable to Bbb:
	//	*Oneof_Description
	//	*Oneof_FuroDataTextInput
	Bbb isOneof_Bbb `protobuf_oneof:"bbb"`
	// Types that are assignable to Complex:
	//	*Oneof_OtherMask
	//	*Oneof_UpdateMask
	//	*Oneof_Value
	Complex isOneof_Complex `protobuf_oneof:"complex"`
}

func (x *Oneof) Reset() {
	*x = Oneof{}
	if protoimpl.UnsafeEnabled {
		mi := &file_experiment_experiment_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Oneof) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Oneof) ProtoMessage() {}

func (x *Oneof) ProtoReflect() protoreflect.Message {
	mi := &file_experiment_experiment_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Oneof.ProtoReflect.Descriptor instead.
func (*Oneof) Descriptor() ([]byte, []int) {
	return file_experiment_experiment_proto_rawDescGZIP(), []int{7}
}

func (x *Oneof) GetEnumexample() enums.Corpus {
	if x != nil {
		return x.Enumexample
	}
	return enums.Corpus_UNKNOWN
}

func (x *Oneof) GetFuroDataFileInput() []string {
	if x != nil {
		return x.FuroDataFileInput
	}
	return nil
}

func (x *Oneof) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (m *Oneof) GetAaa() isOneof_Aaa {
	if m != nil {
		return m.Aaa
	}
	return nil
}

func (x *Oneof) GetDisplayName() string {
	if x, ok := x.GetAaa().(*Oneof_DisplayName); ok {
		return x.DisplayName
	}
	return ""
}

func (x *Oneof) GetFuroDataCheckboxInput() bool {
	if x, ok := x.GetAaa().(*Oneof_FuroDataCheckboxInput); ok {
		return x.FuroDataCheckboxInput
	}
	return false
}

func (m *Oneof) GetBbb() isOneof_Bbb {
	if m != nil {
		return m.Bbb
	}
	return nil
}

func (x *Oneof) GetDescription() string {
	if x, ok := x.GetBbb().(*Oneof_Description); ok {
		return x.Description
	}
	return ""
}

func (x *Oneof) GetFuroDataTextInput() string {
	if x, ok := x.GetBbb().(*Oneof_FuroDataTextInput); ok {
		return x.FuroDataTextInput
	}
	return ""
}

func (m *Oneof) GetComplex() isOneof_Complex {
	if m != nil {
		return m.Complex
	}
	return nil
}

func (x *Oneof) GetOtherMask() *field_mask.FieldMask {
	if x, ok := x.GetComplex().(*Oneof_OtherMask); ok {
		return x.OtherMask
	}
	return nil
}

func (x *Oneof) GetUpdateMask() *protobuf_types.FieldMask {
	if x, ok := x.GetComplex().(*Oneof_UpdateMask); ok {
		return x.UpdateMask
	}
	return nil
}

func (x *Oneof) GetValue() bool {
	if x, ok := x.GetComplex().(*Oneof_Value); ok {
		return x.Value
	}
	return false
}

type isOneof_Aaa interface {
	isOneof_Aaa()
}

type Oneof_DisplayName struct {
	// Localized String representation of a experiment
	DisplayName string `protobuf:"bytes,2,opt,name=display_name,json=displayName,proto3,oneof"`
}

type Oneof_FuroDataCheckboxInput struct {
	// field for furo_data_checkbox_input for testing
	FuroDataCheckboxInput bool `protobuf:"varint,4,opt,name=furo_data_checkbox_input,json=furoDataCheckboxInput,proto3,oneof"`
}

func (*Oneof_DisplayName) isOneof_Aaa() {}

func (*Oneof_FuroDataCheckboxInput) isOneof_Aaa() {}

type isOneof_Bbb interface {
	isOneof_Bbb()
}

type Oneof_Description struct {
	// Short experiment description
	Description string `protobuf:"bytes,3,opt,name=description,proto3,oneof"`
}

type Oneof_FuroDataTextInput struct {
	// field for furo_data_text_input for testing
	FuroDataTextInput string `protobuf:"bytes,5,opt,name=furo_data_text_input,json=furoDataTextInput,proto3,oneof"`
}

func (*Oneof_Description) isOneof_Bbb() {}

func (*Oneof_FuroDataTextInput) isOneof_Bbb() {}

type isOneof_Complex interface {
	isOneof_Complex()
}

type Oneof_OtherMask struct {
	// for oneof test purposes only
	OtherMask *field_mask.FieldMask `protobuf:"bytes,24,opt,name=other_mask,json=otherMask,proto3,oneof"`
}

type Oneof_UpdateMask struct {
	// Contains a field_mask which fields of the targeted resource are going to be updated
	UpdateMask *protobuf_types.FieldMask `protobuf:"bytes,23,opt,name=update_mask,json=updateMask,proto3,oneof"`
}

type Oneof_Value struct {
	// skalar in a group of complex
	Value bool `protobuf:"varint,25,opt,name=value,proto3,oneof"`
}

func (*Oneof_OtherMask) isOneof_Complex() {}

func (*Oneof_UpdateMask) isOneof_Complex() {}

func (*Oneof_Value) isOneof_Complex() {}

var File_experiment_experiment_proto protoreflect.FileDescriptor

var file_experiment_experiment_proto_rawDesc = []byte{
	0x0a, 0x1b, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x65, 0x78, 0x70,
	0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0a, 0x65,
	0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x1a, 0x0f, 0x66, 0x75, 0x72, 0x6f, 0x2f,
	0x6d, 0x65, 0x74, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0f, 0x66, 0x75, 0x72, 0x6f,
	0x2f, 0x6c, 0x69, 0x6e, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x61, 0x6e, 0x79,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x16, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x74,
	0x79, 0x70, 0x65, 0x2f, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x2f, 0x6d, 0x6f, 0x6e, 0x65,
	0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x6b,
	0x6e, 0x6f, 0x77, 0x6e, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x13, 0x66, 0x75, 0x72, 0x6f, 0x2f, 0x70, 0x72, 0x6f, 0x70,
	0x65, 0x72, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x15, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2f, 0x63, 0x6f, 0x72, 0x70, 0x75,
	0x73, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x80, 0x01, 0x0a,
	0x10, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x12, 0x2a, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x45, 0x78, 0x70,
	0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x20, 0x0a,
	0x05, 0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x66,
	0x75, 0x72, 0x6f, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x05, 0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x12,
	0x1e, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e,
	0x66, 0x75, 0x72, 0x6f, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x22,
	0xbd, 0x01, 0x0a, 0x0b, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x12,
	0x25, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x65,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61,
	0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x69,
	0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x28, 0x0a, 0x05, 0x6d, 0x6f, 0x6e,
	0x65, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x52, 0x05, 0x6d, 0x6f,
	0x6e, 0x65, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x65, 0x78, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x22,
	0xa9, 0x09, 0x0a, 0x0a, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x20,
	0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x21, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x13, 0x66, 0x75, 0x72, 0x6f, 0x5f, 0x64, 0x61, 0x74, 0x61,
	0x5f, 0x62, 0x6f, 0x6f, 0x6c, 0x5f, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x10, 0x66, 0x75, 0x72, 0x6f, 0x44, 0x61, 0x74, 0x61, 0x42, 0x6f, 0x6f, 0x6c, 0x49, 0x63,
	0x6f, 0x6e, 0x12, 0x37, 0x0a, 0x18, 0x66, 0x75, 0x72, 0x6f, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f,
	0x63, 0x68, 0x65, 0x63, 0x6b, 0x62, 0x6f, 0x78, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x66, 0x75, 0x72, 0x6f, 0x44, 0x61, 0x74, 0x61, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x62, 0x6f, 0x78, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x31, 0x0a, 0x15, 0x66,
	0x75, 0x72, 0x6f, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x69,
	0x6e, 0x70, 0x75, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x66, 0x75, 0x72, 0x6f,
	0x44, 0x61, 0x74, 0x61, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x2f,
	0x0a, 0x14, 0x66, 0x75, 0x72, 0x6f, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x64, 0x61, 0x74, 0x65,
	0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x66, 0x75,
	0x72, 0x6f, 0x44, 0x61, 0x74, 0x61, 0x44, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12,
	0x4f, 0x0a, 0x1b, 0x66, 0x75, 0x72, 0x6f, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x64, 0x61, 0x74,
	0x65, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x52, 0x17, 0x66, 0x75, 0x72, 0x6f, 0x44, 0x61, 0x74,
	0x61, 0x44, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x12, 0x2f, 0x0a, 0x14, 0x66, 0x75, 0x72, 0x6f, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x66, 0x69,
	0x6c, 0x65, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x16, 0x20, 0x03, 0x28, 0x09, 0x52, 0x11,
	0x66, 0x75, 0x72, 0x6f, 0x44, 0x61, 0x74, 0x61, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x70, 0x75,
	0x74, 0x12, 0x45, 0x0a, 0x15, 0x66, 0x75, 0x72, 0x6f, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x6d,
	0x6f, 0x6e, 0x65, 0x79, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x4d,
	0x6f, 0x6e, 0x65, 0x79, 0x52, 0x12, 0x66, 0x75, 0x72, 0x6f, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x6f,
	0x6e, 0x65, 0x79, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x33, 0x0a, 0x16, 0x66, 0x75, 0x72, 0x6f,
	0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x70,
	0x75, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x02, 0x52, 0x13, 0x66, 0x75, 0x72, 0x6f, 0x44, 0x61,
	0x74, 0x61, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x37, 0x0a,
	0x18, 0x66, 0x75, 0x72, 0x6f, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x77,
	0x6f, 0x72, 0x64, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x15, 0x66, 0x75, 0x72, 0x6f, 0x44, 0x61, 0x74, 0x61, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x31, 0x0a, 0x15, 0x66, 0x75, 0x72, 0x6f, 0x5f, 0x64,
	0x61, 0x74, 0x61, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x66, 0x75, 0x72, 0x6f, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x61, 0x6e, 0x67, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x33, 0x0a, 0x16, 0x66, 0x75, 0x72,
	0x6f, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x69, 0x6e,
	0x70, 0x75, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x66, 0x75, 0x72, 0x6f, 0x44,
	0x61, 0x74, 0x61, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x2f,
	0x0a, 0x14, 0x66, 0x75, 0x72, 0x6f, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x74, 0x65, 0x78, 0x74,
	0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x66, 0x75,
	0x72, 0x6f, 0x44, 0x61, 0x74, 0x61, 0x54, 0x65, 0x78, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12,
	0x37, 0x0a, 0x18, 0x66, 0x75, 0x72, 0x6f, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x74, 0x65, 0x78,
	0x74, 0x61, 0x72, 0x65, 0x61, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x15, 0x66, 0x75, 0x72, 0x6f, 0x44, 0x61, 0x74, 0x61, 0x54, 0x65, 0x78, 0x74, 0x61,
	0x72, 0x65, 0x61, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x2f, 0x0a, 0x14, 0x66, 0x75, 0x72, 0x6f,
	0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x66, 0x75, 0x72, 0x6f, 0x44, 0x61, 0x74, 0x61,
	0x54, 0x69, 0x6d, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x70,
	0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x14, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65,
	0x70, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x40, 0x0a, 0x14, 0x73, 0x69, 0x6e, 0x67, 0x6c,
	0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x18,
	0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x66, 0x75, 0x72, 0x6f, 0x2e, 0x50, 0x72, 0x6f,
	0x70, 0x65, 0x72, 0x74, 0x79, 0x52, 0x12, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x12, 0x36, 0x0a, 0x0c, 0x74, 0x68, 0x65,
	0x5f, 0x61, 0x6e, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x0a, 0x74, 0x68, 0x65, 0x41, 0x6e, 0x79, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x33, 0x0a, 0x0d, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72,
	0x74, 0x79, 0x18, 0x11, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x66, 0x75, 0x72, 0x6f, 0x2e,
	0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x52, 0x0c, 0x74, 0x79, 0x70, 0x65, 0x50, 0x72,
	0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x12, 0x2a, 0x0a, 0x11, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x77,
	0x69, 0x74, 0x68, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x74, 0x79, 0x70, 0x65, 0x57, 0x69, 0x74, 0x68, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x47, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x73,
	0x6b, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x52,
	0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x73, 0x6b, 0x22, 0xb5, 0x01, 0x0a, 0x07,
	0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x69, 0x73,
	0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x37, 0x0a, 0x18,
	0x66, 0x75, 0x72, 0x6f, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x62,
	0x6f, 0x78, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15,
	0x66, 0x75, 0x72, 0x6f, 0x44, 0x61, 0x74, 0x61, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x62, 0x6f, 0x78,
	0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x70, 0x73, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x70, 0x73, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x22, 0x56, 0x0a, 0x08, 0x52, 0x65, 0x61, 0x64, 0x6f, 0x6e, 0x6c, 0x79, 0x12,
	0x1e, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e,
	0x66, 0x75, 0x72, 0x6f, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12,
	0x2a, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x22, 0x73, 0x0a, 0x09, 0x52,
	0x65, 0x63, 0x75, 0x72, 0x73, 0x69, 0x76, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70,
	0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x33, 0x0a, 0x09, 0x72,
	0x65, 0x63, 0x75, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x52, 0x65, 0x63, 0x75,
	0x72, 0x73, 0x69, 0x76, 0x65, 0x52, 0x09, 0x72, 0x65, 0x63, 0x75, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x22, 0x92, 0x01, 0x0a, 0x14, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x43,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x08, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x65, 0x78,
	0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d,
	0x65, 0x6e, 0x74, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x08, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x69, 0x65, 0x73, 0x12, 0x20, 0x0a, 0x05, 0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x66, 0x75, 0x72, 0x6f, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x05,
	0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x12, 0x1e, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x66, 0x75, 0x72, 0x6f, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x52,
	0x04, 0x6d, 0x65, 0x74, 0x61, 0x22, 0xe9, 0x03, 0x0a, 0x05, 0x4f, 0x6e, 0x65, 0x6f, 0x66, 0x12,
	0x2f, 0x0a, 0x0b, 0x65, 0x6e, 0x75, 0x6d, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x18, 0x1d,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x43, 0x6f, 0x72,
	0x70, 0x75, 0x73, 0x52, 0x0b, 0x65, 0x6e, 0x75, 0x6d, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65,
	0x12, 0x2f, 0x0a, 0x14, 0x66, 0x75, 0x72, 0x6f, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x66, 0x69,
	0x6c, 0x65, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x16, 0x20, 0x03, 0x28, 0x09, 0x52, 0x11,
	0x66, 0x75, 0x72, 0x6f, 0x44, 0x61, 0x74, 0x61, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x70, 0x75,
	0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x23, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c,
	0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x39, 0x0a, 0x18, 0x66, 0x75, 0x72, 0x6f, 0x5f, 0x64,
	0x61, 0x74, 0x61, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x62, 0x6f, 0x78, 0x5f, 0x69, 0x6e, 0x70,
	0x75, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x15, 0x66, 0x75, 0x72, 0x6f,
	0x44, 0x61, 0x74, 0x61, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x62, 0x6f, 0x78, 0x49, 0x6e, 0x70, 0x75,
	0x74, 0x12, 0x22, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x31, 0x0a, 0x14, 0x66, 0x75, 0x72, 0x6f, 0x5f, 0x64, 0x61,
	0x74, 0x61, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x11, 0x66, 0x75, 0x72, 0x6f, 0x44, 0x61, 0x74, 0x61, 0x54,
	0x65, 0x78, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x3b, 0x0a, 0x0a, 0x6f, 0x74, 0x68, 0x65,
	0x72, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x48, 0x02, 0x52, 0x09, 0x6f, 0x74, 0x68, 0x65,
	0x72, 0x4d, 0x61, 0x73, 0x6b, 0x12, 0x49, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f,
	0x6d, 0x61, 0x73, 0x6b, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61,
	0x73, 0x6b, 0x48, 0x02, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x73, 0x6b,
	0x12, 0x16, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x08, 0x48,
	0x02, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x05, 0x0a, 0x03, 0x61, 0x61, 0x61, 0x42,
	0x05, 0x0a, 0x03, 0x62, 0x62, 0x62, 0x42, 0x09, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65,
	0x78, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_experiment_experiment_proto_rawDescOnce sync.Once
	file_experiment_experiment_proto_rawDescData = file_experiment_experiment_proto_rawDesc
)

func file_experiment_experiment_proto_rawDescGZIP() []byte {
	file_experiment_experiment_proto_rawDescOnce.Do(func() {
		file_experiment_experiment_proto_rawDescData = protoimpl.X.CompressGZIP(file_experiment_experiment_proto_rawDescData)
	})
	return file_experiment_experiment_proto_rawDescData
}

var file_experiment_experiment_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_experiment_experiment_proto_goTypes = []interface{}{
	(*ExperimentEntity)(nil),         // 0: experiment.ExperimentEntity
	(*Constraints)(nil),              // 1: experiment.Constraints
	(*Experiment)(nil),               // 2: experiment.Experiment
	(*Default)(nil),                  // 3: experiment.Default
	(*Readonly)(nil),                 // 4: experiment.Readonly
	(*Recursive)(nil),                // 5: experiment.Recursive
	(*ExperimentCollection)(nil),     // 6: experiment.ExperimentCollection
	(*Oneof)(nil),                    // 7: experiment.Oneof
	(*furo.Link)(nil),                // 8: furo.Link
	(*furo.Meta)(nil),                // 9: furo.Meta
	(*_type.Date)(nil),               // 10: google.type.Date
	(*_type.Money)(nil),              // 11: google.type.Money
	(*furo.Property)(nil),            // 12: furo.Property
	(*any.Any)(nil),                  // 13: google.protobuf.Any
	(*protobuf_types.FieldMask)(nil), // 14: google.protobuf.types.known.FieldMask
	(*project.Project)(nil),          // 15: project.Project
	(enums.Corpus)(0),                // 16: enums.Corpus
	(*field_mask.FieldMask)(nil),     // 17: google.protobuf.FieldMask
}
var file_experiment_experiment_proto_depIdxs = []int32{
	2,  // 0: experiment.ExperimentEntity.data:type_name -> experiment.Experiment
	8,  // 1: experiment.ExperimentEntity.links:type_name -> furo.Link
	9,  // 2: experiment.ExperimentEntity.meta:type_name -> furo.Meta
	10, // 3: experiment.Constraints.date:type_name -> google.type.Date
	11, // 4: experiment.Constraints.money:type_name -> google.type.Money
	10, // 5: experiment.Experiment.furo_data_date_input_google:type_name -> google.type.Date
	11, // 6: experiment.Experiment.furo_data_money_input:type_name -> google.type.Money
	12, // 7: experiment.Experiment.single_type_property:type_name -> furo.Property
	13, // 8: experiment.Experiment.the_any_type:type_name -> google.protobuf.Any
	12, // 9: experiment.Experiment.type_property:type_name -> furo.Property
	14, // 10: experiment.Experiment.update_mask:type_name -> google.protobuf.types.known.FieldMask
	9,  // 11: experiment.Readonly.meta:type_name -> furo.Meta
	15, // 12: experiment.Readonly.project:type_name -> project.Project
	5,  // 13: experiment.Recursive.recursion:type_name -> experiment.Recursive
	0,  // 14: experiment.ExperimentCollection.entities:type_name -> experiment.ExperimentEntity
	8,  // 15: experiment.ExperimentCollection.links:type_name -> furo.Link
	9,  // 16: experiment.ExperimentCollection.meta:type_name -> furo.Meta
	16, // 17: experiment.Oneof.enumexample:type_name -> enums.Corpus
	17, // 18: experiment.Oneof.other_mask:type_name -> google.protobuf.FieldMask
	14, // 19: experiment.Oneof.update_mask:type_name -> google.protobuf.types.known.FieldMask
	20, // [20:20] is the sub-list for method output_type
	20, // [20:20] is the sub-list for method input_type
	20, // [20:20] is the sub-list for extension type_name
	20, // [20:20] is the sub-list for extension extendee
	0,  // [0:20] is the sub-list for field type_name
}

func init() { file_experiment_experiment_proto_init() }
func file_experiment_experiment_proto_init() {
	if File_experiment_experiment_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_experiment_experiment_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExperimentEntity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_experiment_experiment_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Constraints); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_experiment_experiment_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Experiment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_experiment_experiment_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Default); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_experiment_experiment_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Readonly); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_experiment_experiment_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Recursive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_experiment_experiment_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExperimentCollection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_experiment_experiment_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Oneof); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_experiment_experiment_proto_msgTypes[7].OneofWrappers = []interface{}{
		(*Oneof_DisplayName)(nil),
		(*Oneof_FuroDataCheckboxInput)(nil),
		(*Oneof_Description)(nil),
		(*Oneof_FuroDataTextInput)(nil),
		(*Oneof_OtherMask)(nil),
		(*Oneof_UpdateMask)(nil),
		(*Oneof_Value)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_experiment_experiment_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_experiment_experiment_proto_goTypes,
		DependencyIndexes: file_experiment_experiment_proto_depIdxs,
		MessageInfos:      file_experiment_experiment_proto_msgTypes,
	}.Build()
	File_experiment_experiment_proto = out.File
	file_experiment_experiment_proto_rawDesc = nil
	file_experiment_experiment_proto_goTypes = nil
	file_experiment_experiment_proto_depIdxs = nil
}
