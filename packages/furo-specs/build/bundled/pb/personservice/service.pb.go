// Code generated by furo-proto-gen. DO NOT EDIT.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.21.0-devel
// 	protoc        v3.11.4
// source: personservice/service.proto

package personservice

import (
	person "../person"
	context "context"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type CreatePersonServiceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *person.Person `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *CreatePersonServiceRequest) Reset() {
	*x = CreatePersonServiceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_personservice_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreatePersonServiceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePersonServiceRequest) ProtoMessage() {}

func (x *CreatePersonServiceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_personservice_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePersonServiceRequest.ProtoReflect.Descriptor instead.
func (*CreatePersonServiceRequest) Descriptor() ([]byte, []int) {
	return file_personservice_service_proto_rawDescGZIP(), []int{0}
}

func (x *CreatePersonServiceRequest) GetData() *person.Person {
	if x != nil {
		return x.Data
	}
	return nil
}

type DeletePersonServiceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Prs  string       `protobuf:"bytes,1,opt,name=prs,proto3" json:"prs,omitempty"`
	Data *empty.Empty `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *DeletePersonServiceRequest) Reset() {
	*x = DeletePersonServiceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_personservice_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeletePersonServiceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeletePersonServiceRequest) ProtoMessage() {}

func (x *DeletePersonServiceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_personservice_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeletePersonServiceRequest.ProtoReflect.Descriptor instead.
func (*DeletePersonServiceRequest) Descriptor() ([]byte, []int) {
	return file_personservice_service_proto_rawDescGZIP(), []int{1}
}

func (x *DeletePersonServiceRequest) GetPrs() string {
	if x != nil {
		return x.Prs
	}
	return ""
}

func (x *DeletePersonServiceRequest) GetData() *empty.Empty {
	if x != nil {
		return x.Data
	}
	return nil
}

type GetPersonServiceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Prs string `protobuf:"bytes,1,opt,name=prs,proto3" json:"prs,omitempty"`
}

func (x *GetPersonServiceRequest) Reset() {
	*x = GetPersonServiceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_personservice_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPersonServiceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPersonServiceRequest) ProtoMessage() {}

func (x *GetPersonServiceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_personservice_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPersonServiceRequest.ProtoReflect.Descriptor instead.
func (*GetPersonServiceRequest) Descriptor() ([]byte, []int) {
	return file_personservice_service_proto_rawDescGZIP(), []int{2}
}

func (x *GetPersonServiceRequest) GetPrs() string {
	if x != nil {
		return x.Prs
	}
	return ""
}

type ListPersonServiceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//Query term to search a person
	Q string `protobuf:"bytes,1,opt,name=q,proto3" json:"q,omitempty"`
}

func (x *ListPersonServiceRequest) Reset() {
	*x = ListPersonServiceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_personservice_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListPersonServiceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPersonServiceRequest) ProtoMessage() {}

func (x *ListPersonServiceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_personservice_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPersonServiceRequest.ProtoReflect.Descriptor instead.
func (*ListPersonServiceRequest) Descriptor() ([]byte, []int) {
	return file_personservice_service_proto_rawDescGZIP(), []int{3}
}

func (x *ListPersonServiceRequest) GetQ() string {
	if x != nil {
		return x.Q
	}
	return ""
}

type UpdatePersonServiceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Prs  string         `protobuf:"bytes,1,opt,name=prs,proto3" json:"prs,omitempty"`
	Data *person.Person `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *UpdatePersonServiceRequest) Reset() {
	*x = UpdatePersonServiceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_personservice_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdatePersonServiceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatePersonServiceRequest) ProtoMessage() {}

func (x *UpdatePersonServiceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_personservice_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatePersonServiceRequest.ProtoReflect.Descriptor instead.
func (*UpdatePersonServiceRequest) Descriptor() ([]byte, []int) {
	return file_personservice_service_proto_rawDescGZIP(), []int{4}
}

func (x *UpdatePersonServiceRequest) GetPrs() string {
	if x != nil {
		return x.Prs
	}
	return ""
}

func (x *UpdatePersonServiceRequest) GetData() *person.Person {
	if x != nil {
		return x.Data
	}
	return nil
}

var File_personservice_service_proto protoreflect.FileDescriptor

var file_personservice_service_proto_rawDesc = []byte{
	0x0a, 0x1b, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0d, 0x70,
	0x65, 0x72, 0x73, 0x6f, 0x6e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x1a, 0x1c, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x13, 0x70, 0x65, 0x72, 0x73,
	0x6f, 0x6e, 0x2f, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x40, 0x0a, 0x1a,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x65, 0x72, 0x73, 0x6f,
	0x6e, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x5a,
	0x0a, 0x1a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03,
	0x70, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x70, 0x72, 0x73, 0x12, 0x2a,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x2b, 0x0a, 0x17, 0x47, 0x65,
	0x74, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x70, 0x72, 0x73, 0x22, 0x28, 0x0a, 0x18, 0x4c, 0x69, 0x73, 0x74, 0x50,
	0x65, 0x72, 0x73, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x0c, 0x0a, 0x01, 0x71, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x01,
	0x71, 0x22, 0x52, 0x0a, 0x1a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x65, 0x72, 0x73, 0x6f,
	0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x10, 0x0a, 0x03, 0x70, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x70, 0x72,
	0x73, 0x12, 0x22, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x32, 0xf8, 0x04, 0x0a, 0x0d, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x76, 0x0a, 0x0c, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x12, 0x29, 0x2e, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x65,
	0x72, 0x73, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x14, 0x2e, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x2e, 0x50, 0x65, 0x72, 0x73,
	0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x22, 0x25, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1f,
	0x12, 0x1d, 0x2f, 0x6d, 0x6f, 0x63, 0x6b, 0x64, 0x61, 0x74, 0x61, 0x2f, 0x70, 0x65, 0x72, 0x73,
	0x6f, 0x6e, 0x73, 0x2f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x2e, 0x6a, 0x73, 0x6f, 0x6e, 0x12,
	0x7e, 0x0a, 0x0c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x12,
	0x29, 0x2e, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x22, 0x2b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x25, 0x12, 0x23, 0x2f, 0x6d, 0x6f, 0x63,
	0x6b, 0x64, 0x61, 0x74, 0x61, 0x2f, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x70,
	0x72, 0x73, 0x7d, 0x2f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x2e, 0x6a, 0x73, 0x6f, 0x6e, 0x12,
	0x73, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x12, 0x26, 0x2e, 0x70,
	0x65, 0x72, 0x73, 0x6f, 0x6e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74,
	0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x2e, 0x50, 0x65,
	0x72, 0x73, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x22, 0x28, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x22, 0x12, 0x20, 0x2f, 0x6d, 0x6f, 0x63, 0x6b, 0x64, 0x61, 0x74, 0x61, 0x2f, 0x70, 0x65,
	0x72, 0x73, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x73, 0x7d, 0x2f, 0x67, 0x65, 0x74, 0x2e,
	0x6a, 0x73, 0x6f, 0x6e, 0x12, 0x75, 0x0a, 0x0b, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x65, 0x72, 0x73,
	0x6f, 0x6e, 0x73, 0x12, 0x27, 0x2e, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x70,
	0x65, 0x72, 0x73, 0x6f, 0x6e, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x43, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x23, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1d, 0x12, 0x1b,
	0x2f, 0x6d, 0x6f, 0x63, 0x6b, 0x64, 0x61, 0x74, 0x61, 0x2f, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e,
	0x73, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x6a, 0x73, 0x6f, 0x6e, 0x12, 0x82, 0x01, 0x0a, 0x0c,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x12, 0x29, 0x2e, 0x70,
	0x65, 0x72, 0x73, 0x6f, 0x6e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e,
	0x2e, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x22, 0x31, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x2b, 0x32, 0x23, 0x2f, 0x6d, 0x6f, 0x63, 0x6b, 0x64, 0x61, 0x74, 0x61,
	0x2f, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x73, 0x7d, 0x2f, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x42, 0x10, 0x5a, 0x0e, 0x2f, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_personservice_service_proto_rawDescOnce sync.Once
	file_personservice_service_proto_rawDescData = file_personservice_service_proto_rawDesc
)

func file_personservice_service_proto_rawDescGZIP() []byte {
	file_personservice_service_proto_rawDescOnce.Do(func() {
		file_personservice_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_personservice_service_proto_rawDescData)
	})
	return file_personservice_service_proto_rawDescData
}

var file_personservice_service_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_personservice_service_proto_goTypes = []interface{}{
	(*CreatePersonServiceRequest)(nil), // 0: personservice.CreatePersonServiceRequest
	(*DeletePersonServiceRequest)(nil), // 1: personservice.DeletePersonServiceRequest
	(*GetPersonServiceRequest)(nil),    // 2: personservice.GetPersonServiceRequest
	(*ListPersonServiceRequest)(nil),   // 3: personservice.ListPersonServiceRequest
	(*UpdatePersonServiceRequest)(nil), // 4: personservice.UpdatePersonServiceRequest
	(*person.Person)(nil),              // 5: person.Person
	(*empty.Empty)(nil),                // 6: google.protobuf.Empty
	(*person.PersonEntity)(nil),        // 7: person.PersonEntity
	(*person.PersonCollection)(nil),    // 8: person.PersonCollection
}
var file_personservice_service_proto_depIdxs = []int32{
	5, // 0: personservice.CreatePersonServiceRequest.data:type_name -> person.Person
	6, // 1: personservice.DeletePersonServiceRequest.data:type_name -> google.protobuf.Empty
	5, // 2: personservice.UpdatePersonServiceRequest.data:type_name -> person.Person
	0, // 3: personservice.PersonService.CreatePerson:input_type -> personservice.CreatePersonServiceRequest
	1, // 4: personservice.PersonService.DeletePerson:input_type -> personservice.DeletePersonServiceRequest
	2, // 5: personservice.PersonService.GetPerson:input_type -> personservice.GetPersonServiceRequest
	3, // 6: personservice.PersonService.ListPersons:input_type -> personservice.ListPersonServiceRequest
	4, // 7: personservice.PersonService.UpdatePerson:input_type -> personservice.UpdatePersonServiceRequest
	7, // 8: personservice.PersonService.CreatePerson:output_type -> person.PersonEntity
	6, // 9: personservice.PersonService.DeletePerson:output_type -> google.protobuf.Empty
	7, // 10: personservice.PersonService.GetPerson:output_type -> person.PersonEntity
	8, // 11: personservice.PersonService.ListPersons:output_type -> person.PersonCollection
	7, // 12: personservice.PersonService.UpdatePerson:output_type -> person.PersonEntity
	8, // [8:13] is the sub-list for method output_type
	3, // [3:8] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_personservice_service_proto_init() }
func file_personservice_service_proto_init() {
	if File_personservice_service_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_personservice_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreatePersonServiceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_personservice_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeletePersonServiceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_personservice_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPersonServiceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_personservice_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListPersonServiceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_personservice_service_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdatePersonServiceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_personservice_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_personservice_service_proto_goTypes,
		DependencyIndexes: file_personservice_service_proto_depIdxs,
		MessageInfos:      file_personservice_service_proto_msgTypes,
	}.Build()
	File_personservice_service_proto = out.File
	file_personservice_service_proto_rawDesc = nil
	file_personservice_service_proto_goTypes = nil
	file_personservice_service_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// PersonServiceClient is the client API for PersonService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PersonServiceClient interface {
	// Creates a new Person
	CreatePerson(ctx context.Context, in *CreatePersonServiceRequest, opts ...grpc.CallOption) (*person.PersonEntity, error)
	// Delete a Person
	DeletePerson(ctx context.Context, in *DeletePersonServiceRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// The Get method takes zero or more parameters, and returns a PersonEntity which contains a Person
	GetPerson(ctx context.Context, in *GetPersonServiceRequest, opts ...grpc.CallOption) (*person.PersonEntity, error)
	// The List method takes zero or more parameters as input, and returns a PersonCollection of PersonEntity that match the input parameters.
	ListPersons(ctx context.Context, in *ListPersonServiceRequest, opts ...grpc.CallOption) (*person.PersonCollection, error)
	// Updates a Person, partial updates are supported
	UpdatePerson(ctx context.Context, in *UpdatePersonServiceRequest, opts ...grpc.CallOption) (*person.PersonEntity, error)
}

type personServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPersonServiceClient(cc grpc.ClientConnInterface) PersonServiceClient {
	return &personServiceClient{cc}
}

func (c *personServiceClient) CreatePerson(ctx context.Context, in *CreatePersonServiceRequest, opts ...grpc.CallOption) (*person.PersonEntity, error) {
	out := new(person.PersonEntity)
	err := c.cc.Invoke(ctx, "/personservice.PersonService/CreatePerson", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *personServiceClient) DeletePerson(ctx context.Context, in *DeletePersonServiceRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/personservice.PersonService/DeletePerson", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *personServiceClient) GetPerson(ctx context.Context, in *GetPersonServiceRequest, opts ...grpc.CallOption) (*person.PersonEntity, error) {
	out := new(person.PersonEntity)
	err := c.cc.Invoke(ctx, "/personservice.PersonService/GetPerson", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *personServiceClient) ListPersons(ctx context.Context, in *ListPersonServiceRequest, opts ...grpc.CallOption) (*person.PersonCollection, error) {
	out := new(person.PersonCollection)
	err := c.cc.Invoke(ctx, "/personservice.PersonService/ListPersons", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *personServiceClient) UpdatePerson(ctx context.Context, in *UpdatePersonServiceRequest, opts ...grpc.CallOption) (*person.PersonEntity, error) {
	out := new(person.PersonEntity)
	err := c.cc.Invoke(ctx, "/personservice.PersonService/UpdatePerson", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PersonServiceServer is the server API for PersonService service.
type PersonServiceServer interface {
	// Creates a new Person
	CreatePerson(context.Context, *CreatePersonServiceRequest) (*person.PersonEntity, error)
	// Delete a Person
	DeletePerson(context.Context, *DeletePersonServiceRequest) (*empty.Empty, error)
	// The Get method takes zero or more parameters, and returns a PersonEntity which contains a Person
	GetPerson(context.Context, *GetPersonServiceRequest) (*person.PersonEntity, error)
	// The List method takes zero or more parameters as input, and returns a PersonCollection of PersonEntity that match the input parameters.
	ListPersons(context.Context, *ListPersonServiceRequest) (*person.PersonCollection, error)
	// Updates a Person, partial updates are supported
	UpdatePerson(context.Context, *UpdatePersonServiceRequest) (*person.PersonEntity, error)
}

// UnimplementedPersonServiceServer can be embedded to have forward compatible implementations.
type UnimplementedPersonServiceServer struct {
}

func (*UnimplementedPersonServiceServer) CreatePerson(context.Context, *CreatePersonServiceRequest) (*person.PersonEntity, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePerson not implemented")
}
func (*UnimplementedPersonServiceServer) DeletePerson(context.Context, *DeletePersonServiceRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePerson not implemented")
}
func (*UnimplementedPersonServiceServer) GetPerson(context.Context, *GetPersonServiceRequest) (*person.PersonEntity, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPerson not implemented")
}
func (*UnimplementedPersonServiceServer) ListPersons(context.Context, *ListPersonServiceRequest) (*person.PersonCollection, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPersons not implemented")
}
func (*UnimplementedPersonServiceServer) UpdatePerson(context.Context, *UpdatePersonServiceRequest) (*person.PersonEntity, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePerson not implemented")
}

func RegisterPersonServiceServer(s *grpc.Server, srv PersonServiceServer) {
	s.RegisterService(&_PersonService_serviceDesc, srv)
}

func _PersonService_CreatePerson_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePersonServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersonServiceServer).CreatePerson(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/personservice.PersonService/CreatePerson",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersonServiceServer).CreatePerson(ctx, req.(*CreatePersonServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PersonService_DeletePerson_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePersonServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersonServiceServer).DeletePerson(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/personservice.PersonService/DeletePerson",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersonServiceServer).DeletePerson(ctx, req.(*DeletePersonServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PersonService_GetPerson_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPersonServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersonServiceServer).GetPerson(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/personservice.PersonService/GetPerson",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersonServiceServer).GetPerson(ctx, req.(*GetPersonServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PersonService_ListPersons_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPersonServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersonServiceServer).ListPersons(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/personservice.PersonService/ListPersons",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersonServiceServer).ListPersons(ctx, req.(*ListPersonServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PersonService_UpdatePerson_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePersonServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersonServiceServer).UpdatePerson(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/personservice.PersonService/UpdatePerson",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersonServiceServer).UpdatePerson(ctx, req.(*UpdatePersonServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _PersonService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "personservice.PersonService",
	HandlerType: (*PersonServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreatePerson",
			Handler:    _PersonService_CreatePerson_Handler,
		},
		{
			MethodName: "DeletePerson",
			Handler:    _PersonService_DeletePerson_Handler,
		},
		{
			MethodName: "GetPerson",
			Handler:    _PersonService_GetPerson_Handler,
		},
		{
			MethodName: "ListPersons",
			Handler:    _PersonService_ListPersons_Handler,
		},
		{
			MethodName: "UpdatePerson",
			Handler:    _PersonService_UpdatePerson_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "personservice/service.proto",
}
