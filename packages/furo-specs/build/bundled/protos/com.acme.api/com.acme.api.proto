// Code generated by furo-proto-gen. DO NOT EDIT.
// generation date: 2019-08-25 15:06:30

syntax = "proto3";
package bundled;


option csharp_namespace = "Google.Protobuf.WellKnownTypes";
option go_package = "com.acme.api";
option java_package = "com.acme";
option java_outer_classname = "AnyProto";
option java_multiple_files = true;
option objc_class_prefix = "GPB";

import "google/api/annotations.proto";

import "google/protobuf/empty.proto";
import "google/protobuf/any.proto";
import "google/type/money.proto";
import "google/type/date.proto";
import "furo/link.proto";
import "furo/meta.proto";
import "furo/reference.proto";

service dfddf {

    // service specs for the tree api
                      
   
    // Creates a new Tree
    rpc CreateTree (CreateTreeServiceRequest) returns (TreeEntity){
        //
        option (google.api.http) = {
            post: "/mockdata/trees"
            body: "data"
        };
    }   
    // Delete a Tree
    rpc DeleteTree (DeleteTreeServiceRequest) returns (google.protobuf.Empty){
        //
        option (google.api.http) = {
            delete: "/mockdata/trees/{tre}"
            
        };
    }   
    // The Get method takes zero or more parameters, and returns a TreeEntity which contains a Tree
    rpc GetTree (GetTreeServiceRequest) returns (TreeEntity){
        //
        option (google.api.http) = {
            get: "/mockdata/trees/{tre}/get.json"
        };
    }   
    // The List method takes zero or more parameters as input, and returns a TreeCollection of TreeEntity that match the input parameters.
    rpc ListTrees (ListTreeServiceRequest) returns (TreeCollection){
        //Describe_the_query_params_if_you_have
        option (google.api.http) = {
            get: "/mockdata/trees"
        };
    }   
    // Updates a Tree, partial updates are supported
    rpc UpdateTree (UpdateTreeServiceRequest) returns (TreeEntity){
        //
        option (google.api.http) = {
            patch: "/mockdata/trees/{tre}"
            body: "data"
        };
    }

    // service specs for the person api
                      
   
    // Creates a new Person
    rpc CreatePerson (CreatePersonServiceRequest) returns (PersonEntity){
        //
        option (google.api.http) = {
            get: "/mockdata/persons/create.json"
            
        };
    }   
    // Delete a Person
    rpc DeletePerson (DeletePersonServiceRequest) returns (google.protobuf.Empty){
        //
        option (google.api.http) = {
            get: "/mockdata/persons/{prs}/delete.json"
            
        };
    }   
    // The Get method takes zero or more parameters, and returns a PersonEntity which contains a Person
    rpc GetPerson (GetPersonServiceRequest) returns (PersonEntity){
        //
        option (google.api.http) = {
            get: "/mockdata/persons/{prs}/get.json"
        };
    }   
    // The List method takes zero or more parameters as input, and returns a PersonCollection of PersonEntity that match the input parameters.
    rpc ListPersons (ListPersonServiceRequest) returns (PersonCollection){
        //Describe_the_query_params_if_you_have
        option (google.api.http) = {
            get: "/mockdata/persons/list.json"
        };
    }   
    // Updates a Person, partial updates are supported
    rpc UpdatePerson (UpdatePersonServiceRequest) returns (PersonEntity){
        //
        option (google.api.http) = {
            get: "/mockdata/persons/{prs}/update.json"
            
        };
    }

    // service specs for the project api
                      
   
    // Creates a new Project
    rpc CreateProject (CreateProjectServiceRequest) returns (ProjectEntity){
        //
        option (google.api.http) = {
            get: "/mockdata/projects/create.json"
            
        };
    }   
    // Delete a Project
    rpc DeleteProject (DeleteProjectServiceRequest) returns (google.protobuf.Empty){
        //
        option (google.api.http) = {
            get: "/mockdata/projects/{prj}/delete.json"
            
        };
    }   
    // The Get method takes zero or more parameters, and returns a ProjectEntity which contains a Project
    rpc GetProject (GetProjectServiceRequest) returns (ProjectEntity){
        //
        option (google.api.http) = {
            get: "/mockdata/projects/{prj}/get.json"
        };
    }   
    // The List method takes zero or more parameters as input, and returns a ProjectCollection of ProjectEntity that match the input parameters.
    rpc ListProjects (ListProjectServiceRequest) returns (ProjectCollection){
        //Describe_the_query_params_if_you_have
        option (google.api.http) = {
            get: "/mockdata/projects/list.json"
        };
    }   
    // Updates a Project, partial updates are supported
    rpc UpdateProject (UpdateProjectServiceRequest) returns (ProjectEntity){
        //
        option (google.api.http) = {
            get: "/mockdata/projects/{prj}/update.json"
            
        };
    }

    // The members of a project
          
   
    // Get a collection with PersonEntities
    rpc List (ListProjectMembersServiceRequest) returns (PersonCollection){
        //
        option (google.api.http) = {
            get: "/api/members"
        };
    }   
    // Custom method to unsubscribe a member, complete PersonEntity is expected
    rpc Unsubscribe (UnsubscribeProjectMembersServiceRequest) returns (PersonCollection){
        //{prs} stands for person
        option (google.api.http) = {
            post: "/api/projects/{prj}/members/{prs}:unsubscribe"
            body: "data"
        };
    }

    // service specs for the task api
                      
   
    // Creates a new Task
    rpc CreateTask (CreateTaskServiceRequest) returns (TaskEntity){
        //
        option (google.api.http) = {
            get: "/mockdata/tasks/create.json"
            
        };
    }   
    // Delete a Task
    rpc DeleteTask (DeleteTaskServiceRequest) returns (google.protobuf.Empty){
        //
        option (google.api.http) = {
            get: "/mockdata/tasks/{tsk}/delete.json"
            
        };
    }   
    // The Get method takes zero or more parameters, and returns a TaskEntity which contains a Task
    rpc GetTask (GetTaskServiceRequest) returns (TaskEntity){
        //
        option (google.api.http) = {
            get: "/mockdata/tasks/{tsk}/get.json"
        };
    }   
    // The List method takes zero or more parameters as input, and returns a TaskCollection of TaskEntity that match the input parameters.
    rpc ListTasks (ListTaskServiceRequest) returns (TaskCollection){
        //Describe_the_query_params_if_you_have
        option (google.api.http) = {
            get: "/mockdata/tasks/list.json"
        };
    }   
    // Updates a Task, partial updates are supported
    rpc UpdateTask (UpdateTaskServiceRequest) returns (TaskEntity){
        //
        option (google.api.http) = {
            get: "/mockdata/tasks/{tsk}/update.json"
            
        };
    }

    // service specs for the experiment api
                      
   
    // Creates a new Experiment
    rpc CreateExperiment (CreateExperimentServiceRequest) returns (ExperimentEntity){
        //
        option (google.api.http) = {
            post: "/mockdata/experiments"
            body: "data"
        };
    }   
    // Delete a Experiment
    rpc DeleteExperiment (DeleteExperimentServiceRequest) returns (google.protobuf.Empty){
        //
        option (google.api.http) = {
            delete: "/mockdata/experiments/{exp}"
            
        };
    }   
    // The Get method takes zero or more parameters, and returns a ExperimentEntity which contains a Experiment
    rpc GetExperiment (GetExperimentServiceRequest) returns (ExperimentEntity){
        //
        option (google.api.http) = {
            get: "/mockdata/experiments/{exp}/get.json"
        };
    }   
    // The List method takes zero or more parameters as input, and returns a ExperimentCollection of ExperimentEntity that match the input parameters.
    rpc ListExperiments (ListExperimentServiceRequest) returns (ExperimentCollection){
        //Describe_the_query_params_if_you_have
        option (google.api.http) = {
            get: "/mockdata/experiments"
        };
    }   
    // Updates a Experiment, partial updates are supported
    rpc UpdateExperiment (UpdateExperimentServiceRequest) returns (ExperimentEntity){
        //
        option (google.api.http) = {
            patch: "/mockdata/experiments/{exp}"
            body: "data"
        };
    }

}



                      
   
message CreateTreeServiceRequest { 
    
    Tree data =  1;  
}

   
message DeleteTreeServiceRequest { 
    
    string tre = 1;
    google.protobuf.Empty data =  2;  
}

   
message GetTreeServiceRequest { 
    
    string tre = 1; 
}

   
message ListTreeServiceRequest { 
    
    //Partielle Repr채sentation fields=id,name // 10
    string fields = 1;
    //Sortierung nach feldern
    //**?filter=-completed** um completed absteigend zu bekommen
    //**?filter=completed** um completed aufsteigend zu bekommen
    string sort = 2;
    //Filter
    string filter = 3;
    //Gew체nschte Seite. Tipp: Folge dem HATEOAS next, prev,...
    int32 page = 4;
    //Anzahl Elemente pro Seite, maximal sind 99 erlaubt
    int32 limit = 5;
    //Meta f체r die Anzahl der Elemente der Resource, bei true ist in der Antwort Meta der count aufgef체hrt
    bool count = 6;
    //not implemented
    string sum = 7;
    //not implemented (ehemals context)
    string view = 8;       
       
    //Query term to search a tree
    string q = 11;
}

   
message UpdateTreeServiceRequest { 
    
    string tre = 1;
    Tree data =  2;  
}



                      
   
message CreatePersonServiceRequest { 
    
    Person data =  1;  
}

   
message DeletePersonServiceRequest { 
    
    string prs = 1;
    google.protobuf.Empty data =  2;  
}

   
message GetPersonServiceRequest { 
    
    string prs = 1; 
}

   
message ListPersonServiceRequest { 
    
    //Partielle Repr채sentation fields=id,name // 10
    string fields = 1;
    //Sortierung nach feldern
    //**?filter=-completed** um completed absteigend zu bekommen
    //**?filter=completed** um completed aufsteigend zu bekommen
    string sort = 2;
    //Filter
    string filter = 3;
    //Gew체nschte Seite. Tipp: Folge dem HATEOAS next, prev,...
    int32 page = 4;
    //Anzahl Elemente pro Seite, maximal sind 99 erlaubt
    int32 limit = 5;
    //Meta f체r die Anzahl der Elemente der Resource, bei true ist in der Antwort Meta der count aufgef체hrt
    bool count = 6;
    //not implemented
    string sum = 7;
    //not implemented (ehemals context)
    string view = 8;       
       
    //Query term to search a person
    string q = 11;
}

   
message UpdatePersonServiceRequest { 
    
    string prs = 1;
    Person data =  2;  
}



                      
   
message CreateProjectServiceRequest { 
    
    Project data =  1;  
}

   
message DeleteProjectServiceRequest { 
    
    string prj = 1;
    google.protobuf.Empty data =  2;  
}

   
message GetProjectServiceRequest { 
    
    string prj = 1; 
}

   
message ListProjectServiceRequest { 
    
    //Partielle Repr채sentation fields=id,name // 10
    string fields = 1;
    //Sortierung nach feldern
    //**?filter=-completed** um completed absteigend zu bekommen
    //**?filter=completed** um completed aufsteigend zu bekommen
    string sort = 2;
    //Filter
    string filter = 3;
    //Gew체nschte Seite. Tipp: Folge dem HATEOAS next, prev,...
    int32 page = 4;
    //Anzahl Elemente pro Seite, maximal sind 99 erlaubt
    int32 limit = 5;
    //Meta f체r die Anzahl der Elemente der Resource, bei true ist in der Antwort Meta der count aufgef체hrt
    bool count = 6;
    //not implemented
    string sum = 7;
    //not implemented (ehemals context)
    string view = 8;       
       
    //Query term to search a project
    string q = 11;
}

   
message UpdateProjectServiceRequest { 
    
    string prj = 1;
    Project data =  2;  
}



          
   
message ListProjectMembersServiceRequest { 
    
    //Partielle Repr채sentation fields=id,name // 10
    string fields = 1;
    //Sortierung nach feldern
    //**?filter=-completed** um completed absteigend zu bekommen
    //**?filter=completed** um completed aufsteigend zu bekommen
    string sort = 2;
    //Filter
    string filter = 3;
    //Gew체nschte Seite. Tipp: Folge dem HATEOAS next, prev,...
    int32 page = 4;
    //Anzahl Elemente pro Seite, maximal sind 99 erlaubt
    int32 limit = 5;
    //Meta f체r die Anzahl der Elemente der Resource, bei true ist in der Antwort Meta der count aufgef체hrt
    bool count = 6;
    //not implemented
    string sum = 7;
    //not implemented (ehemals context)
    string view = 8;       
       
    //Query term to search a member
    string q = 11;
}

   
message UnsubscribeProjectMembersServiceRequest { 
    
    string prj = 1;
    string prs = 2;
    PersonEntity data =  3;  
}



                      
   
message CreateTaskServiceRequest { 
    
    Task data =  1;  
}

   
message DeleteTaskServiceRequest { 
    
    string tsk = 1;
    google.protobuf.Empty data =  2;  
}

   
message GetTaskServiceRequest { 
    
    string tsk = 1; 
}

   
message ListTaskServiceRequest { 
    
    //Partielle Repr채sentation fields=id,name // 10
    string fields = 1;
    //Sortierung nach feldern
    //**?filter=-completed** um completed absteigend zu bekommen
    //**?filter=completed** um completed aufsteigend zu bekommen
    string sort = 2;
    //Filter
    string filter = 3;
    //Gew체nschte Seite. Tipp: Folge dem HATEOAS next, prev,...
    int32 page = 4;
    //Anzahl Elemente pro Seite, maximal sind 99 erlaubt
    int32 limit = 5;
    //Meta f체r die Anzahl der Elemente der Resource, bei true ist in der Antwort Meta der count aufgef체hrt
    bool count = 6;
    //not implemented
    string sum = 7;
    //not implemented (ehemals context)
    string view = 8;       
       
    //Query term to search a task
    string q = 11;
}

   
message UpdateTaskServiceRequest { 
    
    string tsk = 1;
    Task data =  2;  
}



                      
   
message CreateExperimentServiceRequest { 
    
    Experiment data =  1;  
}

   
message DeleteExperimentServiceRequest { 
    
    string exp = 1;
    google.protobuf.Empty data =  2;  
}

   
message GetExperimentServiceRequest { 
    
    string exp = 1; 
}

   
message ListExperimentServiceRequest { 
    
    //Partielle Repr채sentation fields=id,name // 10
    string fields = 1;
    //Sortierung nach feldern
    //**?filter=-completed** um completed absteigend zu bekommen
    //**?filter=completed** um completed aufsteigend zu bekommen
    string sort = 2;
    //Filter
    string filter = 3;
    //Gew체nschte Seite. Tipp: Folge dem HATEOAS next, prev,...
    int32 page = 4;
    //Anzahl Elemente pro Seite, maximal sind 99 erlaubt
    int32 limit = 5;
    //Meta f체r die Anzahl der Elemente der Resource, bei true ist in der Antwort Meta der count aufgef체hrt
    bool count = 6;
    //not implemented
    string sum = 7;
    //not implemented (ehemals context)
    string view = 8;       
       
    //Query term to search a experiment
    string q = 11;
}

   
message UpdateExperimentServiceRequest { 
    
    string exp = 1;
    Experiment data =  2;  
}




// Navigation tree type with recursive navigation nodes
message Tree {                        
    // description of the tree
    string description = 3;
    
    // String representation of the tree
    string display_name = 2;
    
    // Id of the tree
    string id = 1;
    
    // Rootnode of the tree
    Navigationnode root = 10;

}
// TreeEntity with Tree
message TreeEntity {                    
    // contains a tree.Tree
    Tree data = 1;
    
    // Hateoas links
    repeated furo.Link links = 2;
    
    // Meta for the response
    furo.Meta meta = 3;

}
// Item of the navigationtree
message Navigationnode {                                                    
    // Children of this node
    repeated Navigationnode children = 11;
    
    // description of the node
    string description = 4;
    
    // String representation of the node
    string display_name = 2;
    
    // if node has error
    bool has_error = 8;
    
    // icon of the node
    string icon = 5;
    
    // Id of the node
    string id = 1;
    
    // key words of the node
    string key_words = 7;
    
    // Deeplink information of this node
    furo.Link link = 10;
    
    // node is open or not
    bool open = 9;
    
    // Which panel (i.e. view, edit, display) opens the node type (which is defined in property link)
    string panel = 6;
    
    // Secondary text of the node
    string secondary_text = 3;

}
// TreeCollection with repeated TreeEntity
message TreeCollection {                    
    // Contains a tree.TreeEntity repeated
    repeated TreeEntity entities = 4;
    
    // Hateoas links
    repeated furo.Link links = 3;
    
    // Meta for the response
    furo.Meta meta = 2;

}
// Person message type
message Person {                                
    // Localized String representation of a person
    string display_name = 2;
    
    // First name of a person
    string first_name = 4;
    
    // Identity of a person
    string id = 1;
    
    // Name of a person
    string name = 3;
    
    // Internal phone number
    string phone_nr = 5;
    
    // List of main skills of a person
    repeated string skills = 6;

}
// PersonCollection with repeated PersonEntity
message PersonCollection {                    
    // Contains a person.PersonEntity repeated
    repeated PersonEntity entities = 4;
    
    // Hateoas links
    repeated furo.Link links = 3;
    
    // Meta for the response
    furo.Meta meta = 2;

}
// PersonEntity with Person
message PersonEntity {                    
    // contains a person.Person
    Person data = 1;
    
    // Hateoas links
    repeated furo.Link links = 2;
    
    // Meta for the response
    furo.Meta meta = 3;

}
// ProjectCollection with repeated ProjectEntity
message ProjectCollection {                    
    // Contains a project.ProjectEntity repeated
    repeated ProjectEntity entities = 4;
    
    // Hateoas links
    repeated furo.Link links = 3;
    
    // Meta for the response
    furo.Meta meta = 2;

}
// ProjectEntity with Project
message ProjectEntity {                    
    // contains a project.Project
    Project data = 1;
    
    // Hateoas links
    repeated furo.Link links = 2;
    
    // Meta for the response
    furo.Meta meta = 3;

}
// Project description
message Project {                                    
    // Project cost limit
    google.type.Money cost_limit = 7;
    
    // Short project description
    string description = 5;
    
    // Localized String representation of a project
    string display_name = 2;
    
    // Prospective end date of the project
    google.type.Date end = 4;
    
    // Identity of a project
    string id = 1;
    
    // List of project members
    repeated Person members = 6;
    
    // Start date of the project
    google.type.Date start = 3;

}
// TaskEntity with Task
message TaskEntity {                    
    // contains a task.Task
    Task data = 1;
    
    // Hateoas links
    repeated furo.Link links = 2;
    
    // Meta for the response
    furo.Meta meta = 3;

}
// TaskCollection with repeated TaskEntity
message TaskCollection {                    
    // Contains a task.TaskEntity repeated
    repeated TaskEntity entities = 4;
    
    // Hateoas links
    repeated furo.Link links = 3;
    
    // Meta for the response
    furo.Meta meta = 2;

}
// Task data description
message Task {                                
    // Short task description
    string description = 3;
    
    // Localized String representation of a task
    string display_name = 2;
    
    // Estimated time in days
    int32 estimated_time = 4;
    
    // Identity of a task
    string id = 1;
    
    // Owner of a task
    furo.Reference owner = 5;
    
    // List of subtasks
    repeated Task subtasks = 6;

}
// ExperimentEntity with Experiment
message ExperimentEntity {                    
    // contains a experiment.Experiment
    Experiment data = 1;
    
    // Hateoas links
    repeated furo.Link links = 2;
    
    // Meta for the response
    furo.Meta meta = 3;

}
// experiment spec for testing
message Experiment {                            
    // Short experiment description
    string description = 3;
    
    // Localized String representation of a experiment
    string display_name = 2;
    
    // field for furo_data_checkbox_input for testing
    int32 furo_data_checkbox_input = 4;
    
    // field for furo_data_text_input for testing
    string furo_data_text_input = 5;
    
    // Identity of a experiment
    string id = 1;

}
// ExperimentCollection with repeated ExperimentEntity
message ExperimentCollection {                    
    // Contains a experiment.ExperimentEntity repeated
    repeated ExperimentEntity entities = 4;
    
    // Hateoas links
    repeated furo.Link links = 3;
    
    // Meta for the response
    furo.Meta meta = 2;

}
