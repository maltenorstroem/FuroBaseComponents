// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ExperimentService.proto

package experiment

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import empty "github.com/golang/protobuf/ptypes/empty"
import _ "google.golang.org/genproto/googleapis/api/annotations"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type CreateExperimentServiceRequest struct {
	Data                 *Experiment `protobuf:"bytes,1,opt,name=data" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *CreateExperimentServiceRequest) Reset()         { *m = CreateExperimentServiceRequest{} }
func (m *CreateExperimentServiceRequest) String() string { return proto.CompactTextString(m) }
func (*CreateExperimentServiceRequest) ProtoMessage()    {}
func (*CreateExperimentServiceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ExperimentService_588c7399fc4bdd89, []int{0}
}
func (m *CreateExperimentServiceRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateExperimentServiceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateExperimentServiceRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *CreateExperimentServiceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateExperimentServiceRequest.Merge(dst, src)
}
func (m *CreateExperimentServiceRequest) XXX_Size() int {
	return m.Size()
}
func (m *CreateExperimentServiceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateExperimentServiceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateExperimentServiceRequest proto.InternalMessageInfo

func (m *CreateExperimentServiceRequest) GetData() *Experiment {
	if m != nil {
		return m.Data
	}
	return nil
}

type DeleteExperimentServiceRequest struct {
	Exp                  string       `protobuf:"bytes,1,opt,name=exp,proto3" json:"exp,omitempty"`
	Data                 *empty.Empty `protobuf:"bytes,2,opt,name=data" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *DeleteExperimentServiceRequest) Reset()         { *m = DeleteExperimentServiceRequest{} }
func (m *DeleteExperimentServiceRequest) String() string { return proto.CompactTextString(m) }
func (*DeleteExperimentServiceRequest) ProtoMessage()    {}
func (*DeleteExperimentServiceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ExperimentService_588c7399fc4bdd89, []int{1}
}
func (m *DeleteExperimentServiceRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteExperimentServiceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteExperimentServiceRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *DeleteExperimentServiceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteExperimentServiceRequest.Merge(dst, src)
}
func (m *DeleteExperimentServiceRequest) XXX_Size() int {
	return m.Size()
}
func (m *DeleteExperimentServiceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteExperimentServiceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteExperimentServiceRequest proto.InternalMessageInfo

func (m *DeleteExperimentServiceRequest) GetExp() string {
	if m != nil {
		return m.Exp
	}
	return ""
}

func (m *DeleteExperimentServiceRequest) GetData() *empty.Empty {
	if m != nil {
		return m.Data
	}
	return nil
}

type GetExperimentServiceRequest struct {
	Exp                  string   `protobuf:"bytes,1,opt,name=exp,proto3" json:"exp,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetExperimentServiceRequest) Reset()         { *m = GetExperimentServiceRequest{} }
func (m *GetExperimentServiceRequest) String() string { return proto.CompactTextString(m) }
func (*GetExperimentServiceRequest) ProtoMessage()    {}
func (*GetExperimentServiceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ExperimentService_588c7399fc4bdd89, []int{2}
}
func (m *GetExperimentServiceRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetExperimentServiceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetExperimentServiceRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *GetExperimentServiceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetExperimentServiceRequest.Merge(dst, src)
}
func (m *GetExperimentServiceRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetExperimentServiceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetExperimentServiceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetExperimentServiceRequest proto.InternalMessageInfo

func (m *GetExperimentServiceRequest) GetExp() string {
	if m != nil {
		return m.Exp
	}
	return ""
}

type ListExperimentServiceRequest struct {
	// Partielle Repr채sentation fields=id,name // 10
	Fields string `protobuf:"bytes,1,opt,name=fields,proto3" json:"fields,omitempty"`
	// Sortierung nach feldern
	// **?filter=-completed** um completed absteigend zu bekommen
	// **?filter=completed** um completed aufsteigend zu bekommen
	Sort string `protobuf:"bytes,2,opt,name=sort,proto3" json:"sort,omitempty"`
	// Filter
	Filter string `protobuf:"bytes,3,opt,name=filter,proto3" json:"filter,omitempty"`
	// Gew체nschte Seite. Tipp: Folge dem HATEOAS next, prev,...
	Page int32 `protobuf:"varint,4,opt,name=page,proto3" json:"page,omitempty"`
	// Anzahl Elemente pro Seite, maximal sind 99 erlaubt
	Limit int32 `protobuf:"varint,5,opt,name=limit,proto3" json:"limit,omitempty"`
	// Meta f체r die Anzahl der Elemente der Resource, bei true ist in der Antwort Meta der count aufgef체hrt
	Count bool `protobuf:"varint,6,opt,name=count,proto3" json:"count,omitempty"`
	// not implemented
	Sum string `protobuf:"bytes,7,opt,name=sum,proto3" json:"sum,omitempty"`
	// not implemented (ehemals context)
	View string `protobuf:"bytes,8,opt,name=view,proto3" json:"view,omitempty"`
	// Query term to search a experiment
	Q                    string   `protobuf:"bytes,11,opt,name=q,proto3" json:"q,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListExperimentServiceRequest) Reset()         { *m = ListExperimentServiceRequest{} }
func (m *ListExperimentServiceRequest) String() string { return proto.CompactTextString(m) }
func (*ListExperimentServiceRequest) ProtoMessage()    {}
func (*ListExperimentServiceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ExperimentService_588c7399fc4bdd89, []int{3}
}
func (m *ListExperimentServiceRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListExperimentServiceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListExperimentServiceRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ListExperimentServiceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListExperimentServiceRequest.Merge(dst, src)
}
func (m *ListExperimentServiceRequest) XXX_Size() int {
	return m.Size()
}
func (m *ListExperimentServiceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListExperimentServiceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListExperimentServiceRequest proto.InternalMessageInfo

func (m *ListExperimentServiceRequest) GetFields() string {
	if m != nil {
		return m.Fields
	}
	return ""
}

func (m *ListExperimentServiceRequest) GetSort() string {
	if m != nil {
		return m.Sort
	}
	return ""
}

func (m *ListExperimentServiceRequest) GetFilter() string {
	if m != nil {
		return m.Filter
	}
	return ""
}

func (m *ListExperimentServiceRequest) GetPage() int32 {
	if m != nil {
		return m.Page
	}
	return 0
}

func (m *ListExperimentServiceRequest) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *ListExperimentServiceRequest) GetCount() bool {
	if m != nil {
		return m.Count
	}
	return false
}

func (m *ListExperimentServiceRequest) GetSum() string {
	if m != nil {
		return m.Sum
	}
	return ""
}

func (m *ListExperimentServiceRequest) GetView() string {
	if m != nil {
		return m.View
	}
	return ""
}

func (m *ListExperimentServiceRequest) GetQ() string {
	if m != nil {
		return m.Q
	}
	return ""
}

type UpdateExperimentServiceRequest struct {
	Exp                  string      `protobuf:"bytes,1,opt,name=exp,proto3" json:"exp,omitempty"`
	Data                 *Experiment `protobuf:"bytes,2,opt,name=data" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *UpdateExperimentServiceRequest) Reset()         { *m = UpdateExperimentServiceRequest{} }
func (m *UpdateExperimentServiceRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateExperimentServiceRequest) ProtoMessage()    {}
func (*UpdateExperimentServiceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ExperimentService_588c7399fc4bdd89, []int{4}
}
func (m *UpdateExperimentServiceRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateExperimentServiceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateExperimentServiceRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *UpdateExperimentServiceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateExperimentServiceRequest.Merge(dst, src)
}
func (m *UpdateExperimentServiceRequest) XXX_Size() int {
	return m.Size()
}
func (m *UpdateExperimentServiceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateExperimentServiceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateExperimentServiceRequest proto.InternalMessageInfo

func (m *UpdateExperimentServiceRequest) GetExp() string {
	if m != nil {
		return m.Exp
	}
	return ""
}

func (m *UpdateExperimentServiceRequest) GetData() *Experiment {
	if m != nil {
		return m.Data
	}
	return nil
}

func init() {
	proto.RegisterType((*CreateExperimentServiceRequest)(nil), "experiment.CreateExperimentServiceRequest")
	proto.RegisterType((*DeleteExperimentServiceRequest)(nil), "experiment.DeleteExperimentServiceRequest")
	proto.RegisterType((*GetExperimentServiceRequest)(nil), "experiment.GetExperimentServiceRequest")
	proto.RegisterType((*ListExperimentServiceRequest)(nil), "experiment.ListExperimentServiceRequest")
	proto.RegisterType((*UpdateExperimentServiceRequest)(nil), "experiment.UpdateExperimentServiceRequest")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ExperimentServiceClient is the client API for ExperimentService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ExperimentServiceClient interface {
	// Creates a new Experiment
	CreateExperiment(ctx context.Context, in *CreateExperimentServiceRequest, opts ...grpc.CallOption) (*ExperimentEntity, error)
	// Delete a Experiment
	DeleteExperiment(ctx context.Context, in *DeleteExperimentServiceRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// The Get method takes zero or more parameters, and returns a ExperimentEntity which contains a Experiment
	GetExperiment(ctx context.Context, in *GetExperimentServiceRequest, opts ...grpc.CallOption) (*ExperimentEntity, error)
	// The List method takes zero or more parameters as input, and returns a ExperimentCollection of ExperimentEntity that match the input parameters.
	ListExperiments(ctx context.Context, in *ListExperimentServiceRequest, opts ...grpc.CallOption) (*ExperimentCollection, error)
	// Updates a Experiment, partial updates are supported
	UpdateExperiment(ctx context.Context, in *UpdateExperimentServiceRequest, opts ...grpc.CallOption) (*ExperimentEntity, error)
}

type experimentServiceClient struct {
	cc *grpc.ClientConn
}

func NewExperimentServiceClient(cc *grpc.ClientConn) ExperimentServiceClient {
	return &experimentServiceClient{cc}
}

func (c *experimentServiceClient) CreateExperiment(ctx context.Context, in *CreateExperimentServiceRequest, opts ...grpc.CallOption) (*ExperimentEntity, error) {
	out := new(ExperimentEntity)
	err := c.cc.Invoke(ctx, "/experiment.ExperimentService/CreateExperiment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *experimentServiceClient) DeleteExperiment(ctx context.Context, in *DeleteExperimentServiceRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/experiment.ExperimentService/DeleteExperiment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *experimentServiceClient) GetExperiment(ctx context.Context, in *GetExperimentServiceRequest, opts ...grpc.CallOption) (*ExperimentEntity, error) {
	out := new(ExperimentEntity)
	err := c.cc.Invoke(ctx, "/experiment.ExperimentService/GetExperiment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *experimentServiceClient) ListExperiments(ctx context.Context, in *ListExperimentServiceRequest, opts ...grpc.CallOption) (*ExperimentCollection, error) {
	out := new(ExperimentCollection)
	err := c.cc.Invoke(ctx, "/experiment.ExperimentService/ListExperiments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *experimentServiceClient) UpdateExperiment(ctx context.Context, in *UpdateExperimentServiceRequest, opts ...grpc.CallOption) (*ExperimentEntity, error) {
	out := new(ExperimentEntity)
	err := c.cc.Invoke(ctx, "/experiment.ExperimentService/UpdateExperiment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ExperimentServiceServer is the server API for ExperimentService service.
type ExperimentServiceServer interface {
	// Creates a new Experiment
	CreateExperiment(context.Context, *CreateExperimentServiceRequest) (*ExperimentEntity, error)
	// Delete a Experiment
	DeleteExperiment(context.Context, *DeleteExperimentServiceRequest) (*empty.Empty, error)
	// The Get method takes zero or more parameters, and returns a ExperimentEntity which contains a Experiment
	GetExperiment(context.Context, *GetExperimentServiceRequest) (*ExperimentEntity, error)
	// The List method takes zero or more parameters as input, and returns a ExperimentCollection of ExperimentEntity that match the input parameters.
	ListExperiments(context.Context, *ListExperimentServiceRequest) (*ExperimentCollection, error)
	// Updates a Experiment, partial updates are supported
	UpdateExperiment(context.Context, *UpdateExperimentServiceRequest) (*ExperimentEntity, error)
}

func RegisterExperimentServiceServer(s *grpc.Server, srv ExperimentServiceServer) {
	s.RegisterService(&_ExperimentService_serviceDesc, srv)
}

func _ExperimentService_CreateExperiment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateExperimentServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExperimentServiceServer).CreateExperiment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/experiment.ExperimentService/CreateExperiment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExperimentServiceServer).CreateExperiment(ctx, req.(*CreateExperimentServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExperimentService_DeleteExperiment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteExperimentServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExperimentServiceServer).DeleteExperiment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/experiment.ExperimentService/DeleteExperiment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExperimentServiceServer).DeleteExperiment(ctx, req.(*DeleteExperimentServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExperimentService_GetExperiment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetExperimentServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExperimentServiceServer).GetExperiment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/experiment.ExperimentService/GetExperiment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExperimentServiceServer).GetExperiment(ctx, req.(*GetExperimentServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExperimentService_ListExperiments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListExperimentServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExperimentServiceServer).ListExperiments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/experiment.ExperimentService/ListExperiments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExperimentServiceServer).ListExperiments(ctx, req.(*ListExperimentServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExperimentService_UpdateExperiment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateExperimentServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExperimentServiceServer).UpdateExperiment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/experiment.ExperimentService/UpdateExperiment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExperimentServiceServer).UpdateExperiment(ctx, req.(*UpdateExperimentServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ExperimentService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "experiment.ExperimentService",
	HandlerType: (*ExperimentServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateExperiment",
			Handler:    _ExperimentService_CreateExperiment_Handler,
		},
		{
			MethodName: "DeleteExperiment",
			Handler:    _ExperimentService_DeleteExperiment_Handler,
		},
		{
			MethodName: "GetExperiment",
			Handler:    _ExperimentService_GetExperiment_Handler,
		},
		{
			MethodName: "ListExperiments",
			Handler:    _ExperimentService_ListExperiments_Handler,
		},
		{
			MethodName: "UpdateExperiment",
			Handler:    _ExperimentService_UpdateExperiment_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ExperimentService.proto",
}

func (m *CreateExperimentServiceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateExperimentServiceRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Data != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintExperimentService(dAtA, i, uint64(m.Data.Size()))
		n1, err := m.Data.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *DeleteExperimentServiceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteExperimentServiceRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Exp) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintExperimentService(dAtA, i, uint64(len(m.Exp)))
		i += copy(dAtA[i:], m.Exp)
	}
	if m.Data != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintExperimentService(dAtA, i, uint64(m.Data.Size()))
		n2, err := m.Data.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GetExperimentServiceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetExperimentServiceRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Exp) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintExperimentService(dAtA, i, uint64(len(m.Exp)))
		i += copy(dAtA[i:], m.Exp)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ListExperimentServiceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListExperimentServiceRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Fields) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintExperimentService(dAtA, i, uint64(len(m.Fields)))
		i += copy(dAtA[i:], m.Fields)
	}
	if len(m.Sort) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintExperimentService(dAtA, i, uint64(len(m.Sort)))
		i += copy(dAtA[i:], m.Sort)
	}
	if len(m.Filter) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintExperimentService(dAtA, i, uint64(len(m.Filter)))
		i += copy(dAtA[i:], m.Filter)
	}
	if m.Page != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintExperimentService(dAtA, i, uint64(m.Page))
	}
	if m.Limit != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintExperimentService(dAtA, i, uint64(m.Limit))
	}
	if m.Count {
		dAtA[i] = 0x30
		i++
		if m.Count {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.Sum) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintExperimentService(dAtA, i, uint64(len(m.Sum)))
		i += copy(dAtA[i:], m.Sum)
	}
	if len(m.View) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintExperimentService(dAtA, i, uint64(len(m.View)))
		i += copy(dAtA[i:], m.View)
	}
	if len(m.Q) > 0 {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintExperimentService(dAtA, i, uint64(len(m.Q)))
		i += copy(dAtA[i:], m.Q)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *UpdateExperimentServiceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateExperimentServiceRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Exp) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintExperimentService(dAtA, i, uint64(len(m.Exp)))
		i += copy(dAtA[i:], m.Exp)
	}
	if m.Data != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintExperimentService(dAtA, i, uint64(m.Data.Size()))
		n3, err := m.Data.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintExperimentService(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *CreateExperimentServiceRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovExperimentService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DeleteExperimentServiceRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Exp)
	if l > 0 {
		n += 1 + l + sovExperimentService(uint64(l))
	}
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovExperimentService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetExperimentServiceRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Exp)
	if l > 0 {
		n += 1 + l + sovExperimentService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ListExperimentServiceRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Fields)
	if l > 0 {
		n += 1 + l + sovExperimentService(uint64(l))
	}
	l = len(m.Sort)
	if l > 0 {
		n += 1 + l + sovExperimentService(uint64(l))
	}
	l = len(m.Filter)
	if l > 0 {
		n += 1 + l + sovExperimentService(uint64(l))
	}
	if m.Page != 0 {
		n += 1 + sovExperimentService(uint64(m.Page))
	}
	if m.Limit != 0 {
		n += 1 + sovExperimentService(uint64(m.Limit))
	}
	if m.Count {
		n += 2
	}
	l = len(m.Sum)
	if l > 0 {
		n += 1 + l + sovExperimentService(uint64(l))
	}
	l = len(m.View)
	if l > 0 {
		n += 1 + l + sovExperimentService(uint64(l))
	}
	l = len(m.Q)
	if l > 0 {
		n += 1 + l + sovExperimentService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpdateExperimentServiceRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Exp)
	if l > 0 {
		n += 1 + l + sovExperimentService(uint64(l))
	}
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovExperimentService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovExperimentService(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozExperimentService(x uint64) (n int) {
	return sovExperimentService(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *CreateExperimentServiceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExperimentService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateExperimentServiceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateExperimentServiceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExperimentService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExperimentService
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &Experiment{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipExperimentService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthExperimentService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteExperimentServiceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExperimentService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteExperimentServiceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteExperimentServiceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Exp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExperimentService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExperimentService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Exp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExperimentService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExperimentService
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &empty.Empty{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipExperimentService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthExperimentService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetExperimentServiceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExperimentService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetExperimentServiceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetExperimentServiceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Exp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExperimentService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExperimentService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Exp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipExperimentService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthExperimentService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListExperimentServiceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExperimentService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListExperimentServiceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListExperimentServiceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fields", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExperimentService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExperimentService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Fields = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sort", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExperimentService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExperimentService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sort = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Filter", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExperimentService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExperimentService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Filter = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			m.Page = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExperimentService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Page |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExperimentService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExperimentService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Count = bool(v != 0)
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sum", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExperimentService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExperimentService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sum = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field View", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExperimentService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExperimentService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.View = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Q", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExperimentService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExperimentService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Q = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipExperimentService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthExperimentService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateExperimentServiceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExperimentService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateExperimentServiceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateExperimentServiceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Exp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExperimentService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExperimentService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Exp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExperimentService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExperimentService
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &Experiment{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipExperimentService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthExperimentService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipExperimentService(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowExperimentService
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowExperimentService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowExperimentService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthExperimentService
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowExperimentService
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipExperimentService(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthExperimentService = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowExperimentService   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("ExperimentService.proto", fileDescriptor_ExperimentService_588c7399fc4bdd89)
}

var fileDescriptor_ExperimentService_588c7399fc4bdd89 = []byte{
	// 528 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x54, 0xcd, 0x6e, 0xd3, 0x4c,
	0x14, 0xd5, 0xb4, 0x49, 0xbe, 0x76, 0xda, 0x4f, 0x98, 0x11, 0x34, 0x96, 0x93, 0x5a, 0x91, 0x8b,
	0x20, 0x44, 0xc8, 0x96, 0xc2, 0x8e, 0x25, 0x25, 0x62, 0xd3, 0x95, 0x11, 0x5b, 0x90, 0xeb, 0xdc,
	0x46, 0x03, 0xb6, 0xc7, 0xf1, 0x8c, 0x4b, 0x50, 0x61, 0x01, 0x42, 0xe2, 0x01, 0x78, 0x04, 0x5e,
	0x86, 0x25, 0x12, 0x12, 0x6b, 0x14, 0xf1, 0x20, 0x68, 0xc6, 0x76, 0xe2, 0xa4, 0xe9, 0x14, 0x89,
	0xdd, 0xfd, 0x3d, 0xe7, 0x78, 0xee, 0x91, 0x71, 0x7b, 0x34, 0x4b, 0x21, 0xa3, 0x31, 0x24, 0xe2,
	0x19, 0x64, 0xe7, 0x34, 0x04, 0x37, 0xcd, 0x98, 0x60, 0x04, 0xc3, 0xa2, 0x61, 0x75, 0x27, 0x8c,
	0x4d, 0x22, 0xf0, 0x82, 0x94, 0x7a, 0x41, 0x92, 0x30, 0x11, 0x08, 0xca, 0x12, 0x5e, 0x4c, 0x5a,
	0xc6, 0x72, 0xb2, 0xac, 0xb4, 0x97, 0x95, 0x97, 0x90, 0x08, 0x2a, 0xde, 0x96, 0x8d, 0x4e, 0xad,
	0x11, 0xb2, 0x28, 0x82, 0x50, 0x02, 0x55, 0xcd, 0x92, 0x45, 0x65, 0xa7, 0xf9, 0x99, 0x07, 0x71,
	0x5a, 0x6d, 0x3a, 0x27, 0xd8, 0x3e, 0xce, 0x20, 0x10, 0x70, 0x49, 0xaf, 0x0f, 0xd3, 0x1c, 0xb8,
	0x20, 0x03, 0xdc, 0x18, 0x07, 0x22, 0x30, 0x51, 0x0f, 0xf5, 0xf7, 0x86, 0x07, 0x6e, 0x4d, 0xd5,
	0x72, 0xc7, 0x57, 0x33, 0xce, 0x0b, 0x6c, 0x3f, 0x81, 0x08, 0x34, 0x68, 0x06, 0xde, 0x86, 0x59,
	0xaa, 0xc0, 0x76, 0x7d, 0x19, 0x2e, 0xf0, 0xb7, 0x4a, 0xfc, 0x42, 0xad, 0x5b, 0xa9, 0x75, 0x47,
	0x52, 0x6d, 0x89, 0xef, 0xe1, 0xce, 0x53, 0x10, 0x7f, 0x0f, 0xee, 0xfc, 0x44, 0xb8, 0x7b, 0x42,
	0xf9, 0xd5, 0x2b, 0x07, 0xb8, 0x75, 0x46, 0x21, 0x1a, 0xf3, 0x72, 0xab, 0xcc, 0x08, 0xc1, 0x0d,
	0xce, 0x32, 0xa1, 0x54, 0xed, 0xfa, 0x2a, 0x2e, 0x66, 0x23, 0x01, 0x99, 0xb9, 0x5d, 0xcd, 0xca,
	0x4c, 0xce, 0xa6, 0xc1, 0x04, 0xcc, 0x46, 0x0f, 0xf5, 0x9b, 0xbe, 0x8a, 0xc9, 0x2d, 0xdc, 0x8c,
	0x68, 0x4c, 0x85, 0xd9, 0x54, 0xc5, 0x22, 0x91, 0xd5, 0x90, 0xe5, 0x89, 0x30, 0x5b, 0x3d, 0xd4,
	0xdf, 0xf1, 0x8b, 0x44, 0xca, 0xe6, 0x79, 0x6c, 0xfe, 0x57, 0xc8, 0xe6, 0x79, 0x2c, 0x11, 0xcf,
	0x29, 0xbc, 0x31, 0x77, 0x0a, 0x76, 0x19, 0x93, 0x7d, 0x8c, 0xa6, 0xe6, 0x9e, 0x2a, 0xa0, 0xa9,
	0x7c, 0xe9, 0xe7, 0xe9, 0x38, 0xf8, 0xa7, 0x97, 0xd6, 0x5c, 0x72, 0xf8, 0xb5, 0x89, 0x6f, 0x5e,
	0x82, 0x26, 0x1f, 0x10, 0x36, 0xd6, 0xed, 0x42, 0x06, 0x75, 0x20, 0xbd, 0x99, 0xac, 0xee, 0x66,
	0xd2, 0x91, 0x32, 0xb3, 0x73, 0xf4, 0xf1, 0xc7, 0xef, 0x2f, 0x5b, 0x87, 0xce, 0x6d, 0x2f, 0x66,
	0xe1, 0x6b, 0xa9, 0xc3, 0x5b, 0x8e, 0xf3, 0x47, 0x4a, 0x19, 0xb9, 0xc0, 0xc6, 0xba, 0xc7, 0x56,
	0x25, 0xe8, 0x1d, 0x68, 0x5d, 0xe1, 0xb0, 0x8a, 0x7c, 0xd0, 0xd9, 0x48, 0xee, 0x5d, 0xc0, 0x2c,
	0x7d, 0x4f, 0x3e, 0x21, 0xfc, 0xff, 0x8a, 0x03, 0xc9, 0xbd, 0x3a, 0xb5, 0xc6, 0x9c, 0xd7, 0x7c,
	0xfa, 0x03, 0xc5, 0x7e, 0x97, 0xdc, 0xd1, 0xb0, 0x7b, 0x13, 0x10, 0xee, 0x2b, 0xce, 0x12, 0xf2,
	0x0e, 0xdf, 0x58, 0x75, 0x35, 0x27, 0xfd, 0x3a, 0xbc, 0xce, 0xf2, 0x56, 0x6f, 0xb3, 0x90, 0xe3,
	0xc5, 0x7f, 0xc3, 0x39, 0x54, 0x62, 0xda, 0x64, 0xf3, 0x1d, 0xc8, 0x67, 0x84, 0x8d, 0x75, 0xf3,
	0xad, 0x9e, 0x40, 0x6f, 0xcd, 0x6b, 0x9e, 0xe2, 0xbe, 0x62, 0x3f, 0x1a, 0xea, 0x0e, 0x51, 0x78,
	0xe1, 0xf1, 0xfe, 0xb7, 0xb9, 0x8d, 0xbe, 0xcf, 0x6d, 0xf4, 0x6b, 0x6e, 0xa3, 0xd3, 0x96, 0xba,
	0xe8, 0xc3, 0x3f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x32, 0x7f, 0xf6, 0x4a, 0x7c, 0x05, 0x00, 0x00,
}
