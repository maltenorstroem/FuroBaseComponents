// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: person_service.proto

package person

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import protobuf "../protobuf"
import _ "google.golang.org/genproto/googleapis/api/annotations"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type CreatePersonServiceRequest struct {
	Data                 *Person  `protobuf:"bytes,1,opt,name=data" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreatePersonServiceRequest) Reset()         { *m = CreatePersonServiceRequest{} }
func (m *CreatePersonServiceRequest) String() string { return proto.CompactTextString(m) }
func (*CreatePersonServiceRequest) ProtoMessage()    {}
func (*CreatePersonServiceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_person_service_4fd0cdb2d8c18553, []int{0}
}
func (m *CreatePersonServiceRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreatePersonServiceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreatePersonServiceRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *CreatePersonServiceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreatePersonServiceRequest.Merge(dst, src)
}
func (m *CreatePersonServiceRequest) XXX_Size() int {
	return m.Size()
}
func (m *CreatePersonServiceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreatePersonServiceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreatePersonServiceRequest proto.InternalMessageInfo

func (m *CreatePersonServiceRequest) GetData() *Person {
	if m != nil {
		return m.Data
	}
	return nil
}

type DeletePersonServiceRequest struct {
	Prs                  string          `protobuf:"bytes,1,opt,name=prs,proto3" json:"prs,omitempty"`
	Data                 *protobuf.Empty `protobuf:"bytes,2,opt,name=data" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *DeletePersonServiceRequest) Reset()         { *m = DeletePersonServiceRequest{} }
func (m *DeletePersonServiceRequest) String() string { return proto.CompactTextString(m) }
func (*DeletePersonServiceRequest) ProtoMessage()    {}
func (*DeletePersonServiceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_person_service_4fd0cdb2d8c18553, []int{1}
}
func (m *DeletePersonServiceRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeletePersonServiceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeletePersonServiceRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *DeletePersonServiceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeletePersonServiceRequest.Merge(dst, src)
}
func (m *DeletePersonServiceRequest) XXX_Size() int {
	return m.Size()
}
func (m *DeletePersonServiceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeletePersonServiceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeletePersonServiceRequest proto.InternalMessageInfo

func (m *DeletePersonServiceRequest) GetPrs() string {
	if m != nil {
		return m.Prs
	}
	return ""
}

func (m *DeletePersonServiceRequest) GetData() *protobuf.Empty {
	if m != nil {
		return m.Data
	}
	return nil
}

type GetPersonServiceRequest struct {
	Prs                  string   `protobuf:"bytes,1,opt,name=prs,proto3" json:"prs,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetPersonServiceRequest) Reset()         { *m = GetPersonServiceRequest{} }
func (m *GetPersonServiceRequest) String() string { return proto.CompactTextString(m) }
func (*GetPersonServiceRequest) ProtoMessage()    {}
func (*GetPersonServiceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_person_service_4fd0cdb2d8c18553, []int{2}
}
func (m *GetPersonServiceRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetPersonServiceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetPersonServiceRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *GetPersonServiceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetPersonServiceRequest.Merge(dst, src)
}
func (m *GetPersonServiceRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetPersonServiceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetPersonServiceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetPersonServiceRequest proto.InternalMessageInfo

func (m *GetPersonServiceRequest) GetPrs() string {
	if m != nil {
		return m.Prs
	}
	return ""
}

type ListPersonServiceRequest struct {
	// Partielle Repr채sentation fields=id,name // 10
	Fields string `protobuf:"bytes,1,opt,name=fields,proto3" json:"fields,omitempty"`
	// Sortierung nach feldern
	// **?filter=-completed** um completed absteigend zu bekommen
	// **?filter=completed** um completed aufsteigend zu bekommen
	Sort string `protobuf:"bytes,2,opt,name=sort,proto3" json:"sort,omitempty"`
	// Filter
	Filter string `protobuf:"bytes,3,opt,name=filter,proto3" json:"filter,omitempty"`
	// Gew체nschte Seite. Tipp: Folge dem HATEOAS next, prev,...
	Page int32 `protobuf:"varint,4,opt,name=page,proto3" json:"page,omitempty"`
	// Anzahl Elemente pro Seite, maximal sind 99 erlaubt
	Limit int32 `protobuf:"varint,5,opt,name=limit,proto3" json:"limit,omitempty"`
	// Meta f체r die Anzahl der Elemente der Resource, bei true ist in der Antwort Meta der count aufgef체hrt
	Count bool `protobuf:"varint,6,opt,name=count,proto3" json:"count,omitempty"`
	// not implemented
	Sum string `protobuf:"bytes,7,opt,name=sum,proto3" json:"sum,omitempty"`
	// not implemented (ehemals context)
	View string `protobuf:"bytes,8,opt,name=view,proto3" json:"view,omitempty"`
	// Query term to search a person
	Q                    string   `protobuf:"bytes,11,opt,name=q,proto3" json:"q,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListPersonServiceRequest) Reset()         { *m = ListPersonServiceRequest{} }
func (m *ListPersonServiceRequest) String() string { return proto.CompactTextString(m) }
func (*ListPersonServiceRequest) ProtoMessage()    {}
func (*ListPersonServiceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_person_service_4fd0cdb2d8c18553, []int{3}
}
func (m *ListPersonServiceRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListPersonServiceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListPersonServiceRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ListPersonServiceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListPersonServiceRequest.Merge(dst, src)
}
func (m *ListPersonServiceRequest) XXX_Size() int {
	return m.Size()
}
func (m *ListPersonServiceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListPersonServiceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListPersonServiceRequest proto.InternalMessageInfo

func (m *ListPersonServiceRequest) GetFields() string {
	if m != nil {
		return m.Fields
	}
	return ""
}

func (m *ListPersonServiceRequest) GetSort() string {
	if m != nil {
		return m.Sort
	}
	return ""
}

func (m *ListPersonServiceRequest) GetFilter() string {
	if m != nil {
		return m.Filter
	}
	return ""
}

func (m *ListPersonServiceRequest) GetPage() int32 {
	if m != nil {
		return m.Page
	}
	return 0
}

func (m *ListPersonServiceRequest) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *ListPersonServiceRequest) GetCount() bool {
	if m != nil {
		return m.Count
	}
	return false
}

func (m *ListPersonServiceRequest) GetSum() string {
	if m != nil {
		return m.Sum
	}
	return ""
}

func (m *ListPersonServiceRequest) GetView() string {
	if m != nil {
		return m.View
	}
	return ""
}

func (m *ListPersonServiceRequest) GetQ() string {
	if m != nil {
		return m.Q
	}
	return ""
}

type UpdatePersonServiceRequest struct {
	Prs                  string   `protobuf:"bytes,1,opt,name=prs,proto3" json:"prs,omitempty"`
	Data                 *Person  `protobuf:"bytes,2,opt,name=data" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdatePersonServiceRequest) Reset()         { *m = UpdatePersonServiceRequest{} }
func (m *UpdatePersonServiceRequest) String() string { return proto.CompactTextString(m) }
func (*UpdatePersonServiceRequest) ProtoMessage()    {}
func (*UpdatePersonServiceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_person_service_4fd0cdb2d8c18553, []int{4}
}
func (m *UpdatePersonServiceRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdatePersonServiceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdatePersonServiceRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *UpdatePersonServiceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdatePersonServiceRequest.Merge(dst, src)
}
func (m *UpdatePersonServiceRequest) XXX_Size() int {
	return m.Size()
}
func (m *UpdatePersonServiceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdatePersonServiceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdatePersonServiceRequest proto.InternalMessageInfo

func (m *UpdatePersonServiceRequest) GetPrs() string {
	if m != nil {
		return m.Prs
	}
	return ""
}

func (m *UpdatePersonServiceRequest) GetData() *Person {
	if m != nil {
		return m.Data
	}
	return nil
}

func init() {
	proto.RegisterType((*CreatePersonServiceRequest)(nil), "person.CreatePersonServiceRequest")
	proto.RegisterType((*DeletePersonServiceRequest)(nil), "person.DeletePersonServiceRequest")
	proto.RegisterType((*GetPersonServiceRequest)(nil), "person.GetPersonServiceRequest")
	proto.RegisterType((*ListPersonServiceRequest)(nil), "person.ListPersonServiceRequest")
	proto.RegisterType((*UpdatePersonServiceRequest)(nil), "person.UpdatePersonServiceRequest")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// PersonServiceClient is the client API for PersonService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PersonServiceClient interface {
	// Creates a new Person
	CreatePersonService(ctx context.Context, in *CreatePersonServiceRequest, opts ...grpc.CallOption) (*PersonEntity, error)
	// Delete a Person
	DeletePersonService(ctx context.Context, in *DeletePersonServiceRequest, opts ...grpc.CallOption) (*protobuf.Empty, error)
	// The Get method takes zero or more parameters, and returns a PersonEntity which contains a Person
	GetPersonService(ctx context.Context, in *GetPersonServiceRequest, opts ...grpc.CallOption) (*PersonEntity, error)
	// The List method takes zero or more parameters as input, and returns a PersonCollection of PersonEntity that match the input parameters.
	ListPersonService(ctx context.Context, in *ListPersonServiceRequest, opts ...grpc.CallOption) (*PersonCollection, error)
	// Updates a Person, partial updates are supported
	UpdatePersonService(ctx context.Context, in *UpdatePersonServiceRequest, opts ...grpc.CallOption) (*PersonEntity, error)
}

type personServiceClient struct {
	cc *grpc.ClientConn
}

func NewPersonServiceClient(cc *grpc.ClientConn) PersonServiceClient {
	return &personServiceClient{cc}
}

func (c *personServiceClient) CreatePersonService(ctx context.Context, in *CreatePersonServiceRequest, opts ...grpc.CallOption) (*PersonEntity, error) {
	out := new(PersonEntity)
	err := c.cc.Invoke(ctx, "/person.PersonService/CreatePersonService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *personServiceClient) DeletePersonService(ctx context.Context, in *DeletePersonServiceRequest, opts ...grpc.CallOption) (*protobuf.Empty, error) {
	out := new(protobuf.Empty)
	err := c.cc.Invoke(ctx, "/person.PersonService/DeletePersonService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *personServiceClient) GetPersonService(ctx context.Context, in *GetPersonServiceRequest, opts ...grpc.CallOption) (*PersonEntity, error) {
	out := new(PersonEntity)
	err := c.cc.Invoke(ctx, "/person.PersonService/GetPersonService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *personServiceClient) ListPersonService(ctx context.Context, in *ListPersonServiceRequest, opts ...grpc.CallOption) (*PersonCollection, error) {
	out := new(PersonCollection)
	err := c.cc.Invoke(ctx, "/person.PersonService/ListPersonService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *personServiceClient) UpdatePersonService(ctx context.Context, in *UpdatePersonServiceRequest, opts ...grpc.CallOption) (*PersonEntity, error) {
	out := new(PersonEntity)
	err := c.cc.Invoke(ctx, "/person.PersonService/UpdatePersonService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PersonServiceServer is the server API for PersonService service.
type PersonServiceServer interface {
	// Creates a new Person
	CreatePersonService(context.Context, *CreatePersonServiceRequest) (*PersonEntity, error)
	// Delete a Person
	DeletePersonService(context.Context, *DeletePersonServiceRequest) (*protobuf.Empty, error)
	// The Get method takes zero or more parameters, and returns a PersonEntity which contains a Person
	GetPersonService(context.Context, *GetPersonServiceRequest) (*PersonEntity, error)
	// The List method takes zero or more parameters as input, and returns a PersonCollection of PersonEntity that match the input parameters.
	ListPersonService(context.Context, *ListPersonServiceRequest) (*PersonCollection, error)
	// Updates a Person, partial updates are supported
	UpdatePersonService(context.Context, *UpdatePersonServiceRequest) (*PersonEntity, error)
}

func RegisterPersonServiceServer(s *grpc.Server, srv PersonServiceServer) {
	s.RegisterService(&_PersonService_serviceDesc, srv)
}

func _PersonService_CreatePersonService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePersonServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersonServiceServer).CreatePersonService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/person.PersonService/CreatePersonService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersonServiceServer).CreatePersonService(ctx, req.(*CreatePersonServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PersonService_DeletePersonService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePersonServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersonServiceServer).DeletePersonService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/person.PersonService/DeletePersonService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersonServiceServer).DeletePersonService(ctx, req.(*DeletePersonServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PersonService_GetPersonService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPersonServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersonServiceServer).GetPersonService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/person.PersonService/GetPersonService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersonServiceServer).GetPersonService(ctx, req.(*GetPersonServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PersonService_ListPersonService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPersonServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersonServiceServer).ListPersonService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/person.PersonService/ListPersonService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersonServiceServer).ListPersonService(ctx, req.(*ListPersonServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PersonService_UpdatePersonService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePersonServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersonServiceServer).UpdatePersonService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/person.PersonService/UpdatePersonService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersonServiceServer).UpdatePersonService(ctx, req.(*UpdatePersonServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _PersonService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "person.PersonService",
	HandlerType: (*PersonServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreatePersonService",
			Handler:    _PersonService_CreatePersonService_Handler,
		},
		{
			MethodName: "DeletePersonService",
			Handler:    _PersonService_DeletePersonService_Handler,
		},
		{
			MethodName: "GetPersonService",
			Handler:    _PersonService_GetPersonService_Handler,
		},
		{
			MethodName: "ListPersonService",
			Handler:    _PersonService_ListPersonService_Handler,
		},
		{
			MethodName: "UpdatePersonService",
			Handler:    _PersonService_UpdatePersonService_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "person_service.proto",
}

func (m *CreatePersonServiceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreatePersonServiceRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Data != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPersonService(dAtA, i, uint64(m.Data.Size()))
		n1, err := m.Data.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *DeletePersonServiceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeletePersonServiceRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Prs) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPersonService(dAtA, i, uint64(len(m.Prs)))
		i += copy(dAtA[i:], m.Prs)
	}
	if m.Data != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPersonService(dAtA, i, uint64(m.Data.Size()))
		n2, err := m.Data.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GetPersonServiceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetPersonServiceRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Prs) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPersonService(dAtA, i, uint64(len(m.Prs)))
		i += copy(dAtA[i:], m.Prs)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ListPersonServiceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListPersonServiceRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Fields) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPersonService(dAtA, i, uint64(len(m.Fields)))
		i += copy(dAtA[i:], m.Fields)
	}
	if len(m.Sort) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPersonService(dAtA, i, uint64(len(m.Sort)))
		i += copy(dAtA[i:], m.Sort)
	}
	if len(m.Filter) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintPersonService(dAtA, i, uint64(len(m.Filter)))
		i += copy(dAtA[i:], m.Filter)
	}
	if m.Page != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintPersonService(dAtA, i, uint64(m.Page))
	}
	if m.Limit != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintPersonService(dAtA, i, uint64(m.Limit))
	}
	if m.Count {
		dAtA[i] = 0x30
		i++
		if m.Count {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.Sum) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintPersonService(dAtA, i, uint64(len(m.Sum)))
		i += copy(dAtA[i:], m.Sum)
	}
	if len(m.View) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintPersonService(dAtA, i, uint64(len(m.View)))
		i += copy(dAtA[i:], m.View)
	}
	if len(m.Q) > 0 {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintPersonService(dAtA, i, uint64(len(m.Q)))
		i += copy(dAtA[i:], m.Q)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *UpdatePersonServiceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdatePersonServiceRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Prs) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPersonService(dAtA, i, uint64(len(m.Prs)))
		i += copy(dAtA[i:], m.Prs)
	}
	if m.Data != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPersonService(dAtA, i, uint64(m.Data.Size()))
		n3, err := m.Data.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintPersonService(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *CreatePersonServiceRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovPersonService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DeletePersonServiceRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Prs)
	if l > 0 {
		n += 1 + l + sovPersonService(uint64(l))
	}
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovPersonService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetPersonServiceRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Prs)
	if l > 0 {
		n += 1 + l + sovPersonService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ListPersonServiceRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Fields)
	if l > 0 {
		n += 1 + l + sovPersonService(uint64(l))
	}
	l = len(m.Sort)
	if l > 0 {
		n += 1 + l + sovPersonService(uint64(l))
	}
	l = len(m.Filter)
	if l > 0 {
		n += 1 + l + sovPersonService(uint64(l))
	}
	if m.Page != 0 {
		n += 1 + sovPersonService(uint64(m.Page))
	}
	if m.Limit != 0 {
		n += 1 + sovPersonService(uint64(m.Limit))
	}
	if m.Count {
		n += 2
	}
	l = len(m.Sum)
	if l > 0 {
		n += 1 + l + sovPersonService(uint64(l))
	}
	l = len(m.View)
	if l > 0 {
		n += 1 + l + sovPersonService(uint64(l))
	}
	l = len(m.Q)
	if l > 0 {
		n += 1 + l + sovPersonService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpdatePersonServiceRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Prs)
	if l > 0 {
		n += 1 + l + sovPersonService(uint64(l))
	}
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovPersonService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovPersonService(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozPersonService(x uint64) (n int) {
	return sovPersonService(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *CreatePersonServiceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPersonService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreatePersonServiceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreatePersonServiceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPersonService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPersonService
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &Person{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPersonService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPersonService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeletePersonServiceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPersonService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeletePersonServiceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeletePersonServiceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Prs", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPersonService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPersonService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Prs = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPersonService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPersonService
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &protobuf.Empty{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPersonService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPersonService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetPersonServiceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPersonService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetPersonServiceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetPersonServiceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Prs", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPersonService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPersonService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Prs = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPersonService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPersonService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListPersonServiceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPersonService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListPersonServiceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListPersonServiceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fields", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPersonService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPersonService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Fields = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sort", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPersonService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPersonService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sort = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Filter", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPersonService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPersonService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Filter = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			m.Page = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPersonService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Page |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPersonService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPersonService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Count = bool(v != 0)
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sum", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPersonService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPersonService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sum = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field View", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPersonService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPersonService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.View = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Q", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPersonService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPersonService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Q = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPersonService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPersonService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdatePersonServiceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPersonService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdatePersonServiceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdatePersonServiceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Prs", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPersonService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPersonService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Prs = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPersonService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPersonService
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &Person{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPersonService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPersonService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPersonService(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPersonService
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPersonService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPersonService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthPersonService
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowPersonService
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipPersonService(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthPersonService = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPersonService   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("person_service.proto", fileDescriptor_person_service_4fd0cdb2d8c18553)
}

var fileDescriptor_person_service_4fd0cdb2d8c18553 = []byte{
	// 497 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x53, 0xcd, 0x6e, 0xd3, 0x40,
	0x10, 0xd6, 0xb6, 0x49, 0x68, 0xb7, 0xa1, 0x94, 0x89, 0x45, 0x57, 0x2b, 0x14, 0xa2, 0xe5, 0x12,
	0x81, 0x94, 0x48, 0xe1, 0xc6, 0x09, 0x51, 0x2a, 0x2e, 0x1c, 0x90, 0x2b, 0xce, 0xc8, 0x4d, 0x26,
	0xd1, 0x0a, 0xc7, 0xeb, 0x78, 0xd7, 0x45, 0x08, 0x71, 0xe1, 0x15, 0x78, 0x06, 0xde, 0x85, 0x23,
	0x82, 0x17, 0x40, 0x11, 0x0f, 0x82, 0xf6, 0xc7, 0x14, 0x17, 0xbb, 0xea, 0xc9, 0x33, 0xb3, 0xdf,
	0x7c, 0xdf, 0xec, 0xec, 0x67, 0x1a, 0xe5, 0x58, 0x68, 0x95, 0xbd, 0xd5, 0x58, 0x5c, 0xc8, 0x39,
	0x4e, 0xf2, 0x42, 0x19, 0x05, 0x3d, 0x5f, 0xe5, 0xf7, 0x57, 0x4a, 0xad, 0x52, 0x9c, 0x26, 0xb9,
	0x9c, 0x26, 0x59, 0xa6, 0x4c, 0x62, 0xa4, 0xca, 0xb4, 0x47, 0xf1, 0xbe, 0x47, 0x85, 0x6c, 0x10,
	0x98, 0x30, 0x33, 0xd2, 0x7c, 0x08, 0xc5, 0xe3, 0x50, 0x9c, 0xab, 0x34, 0xc5, 0xb9, 0x6d, 0x0e,
	0x07, 0x91, 0xfb, 0x9c, 0x97, 0xcb, 0x29, 0xae, 0xf3, 0x0a, 0x2e, 0x9e, 0x51, 0x7e, 0x52, 0x60,
	0x62, 0xf0, 0xb5, 0x6b, 0x3b, 0xf3, 0x43, 0xc5, 0xb8, 0x29, 0x51, 0x1b, 0x10, 0xb4, 0xb3, 0x48,
	0x4c, 0xc2, 0xc8, 0x88, 0x8c, 0x0f, 0x66, 0x87, 0x93, 0x20, 0xef, 0xb1, 0xb1, 0x3b, 0x13, 0x67,
	0x94, 0xbf, 0xc0, 0x14, 0x5b, 0x18, 0x8e, 0xe8, 0x6e, 0x5e, 0x68, 0x47, 0xb0, 0x1f, 0xdb, 0x10,
	0x1e, 0x06, 0xce, 0x1d, 0xc7, 0x79, 0x67, 0x52, 0x8d, 0x35, 0x39, 0xb5, 0x63, 0x05, 0xd2, 0xc7,
	0xf4, 0xf8, 0x25, 0x9a, 0x9b, 0x31, 0x8a, 0x1f, 0x84, 0xb2, 0x57, 0x52, 0x37, 0xc3, 0xef, 0xd1,
	0xde, 0x52, 0x62, 0xba, 0xa8, 0x3a, 0x42, 0x06, 0x40, 0x3b, 0x5a, 0x15, 0xc6, 0x8d, 0xb1, 0x1f,
	0xbb, 0xd8, 0x63, 0x53, 0x83, 0x05, 0xdb, 0xad, 0xb0, 0x36, 0xb3, 0xd8, 0x3c, 0x59, 0x21, 0xeb,
	0x8c, 0xc8, 0xb8, 0x1b, 0xbb, 0x18, 0x22, 0xda, 0x4d, 0xe5, 0x5a, 0x1a, 0xd6, 0x75, 0x45, 0x9f,
	0xd8, 0xea, 0x5c, 0x95, 0x99, 0x61, 0xbd, 0x11, 0x19, 0xef, 0xc5, 0x3e, 0xb1, 0x23, 0xeb, 0x72,
	0xcd, 0x6e, 0xf9, 0x91, 0x75, 0xb9, 0xb6, 0x8c, 0x17, 0x12, 0xdf, 0xb3, 0x3d, 0xaf, 0x6e, 0x63,
	0xe8, 0x53, 0xb2, 0x61, 0x07, 0xae, 0x40, 0x36, 0x22, 0xa6, 0xfc, 0x4d, 0xbe, 0x48, 0x6e, 0xbc,
	0x56, 0x51, 0x5b, 0x6b, 0xe3, 0x53, 0xcd, 0xbe, 0x76, 0xe8, 0xed, 0x1a, 0x1d, 0xbc, 0xa3, 0x83,
	0x86, 0xe7, 0x07, 0x51, 0xb5, 0xb7, 0x7b, 0x83, 0x47, 0x75, 0x89, 0x53, 0x67, 0x42, 0xc1, 0x3f,
	0xff, 0xfc, 0xfd, 0x65, 0x27, 0x12, 0x7d, 0xe7, 0x60, 0x8f, 0xd0, 0x4f, 0x9d, 0x3c, 0x2c, 0xe9,
	0xa0, 0xc1, 0x29, 0x97, 0x62, 0xed, 0x36, 0xe2, 0x57, 0x6d, 0x52, 0xe9, 0x3c, 0x82, 0x7f, 0x75,
	0xa6, 0x1f, 0xf3, 0x42, 0x7f, 0x02, 0xa4, 0x47, 0x57, 0xcd, 0x03, 0x0f, 0x2a, 0x91, 0x16, 0x5b,
	0x5d, 0x7f, 0x1d, 0x68, 0x96, 0xb9, 0xfb, 0x9f, 0xeb, 0x60, 0x54, 0xd1, 0xb4, 0x19, 0x92, 0xb3,
	0xba, 0xd0, 0xc9, 0xdf, 0xff, 0x54, 0x44, 0x4e, 0xec, 0x10, 0x6a, 0xbb, 0x83, 0x0d, 0x1d, 0x34,
	0x18, 0xe1, 0x72, 0x6b, 0xed, 0x2e, 0x69, 0xb9, 0xd3, 0xc8, 0xc9, 0xf0, 0x59, 0xc3, 0x9d, 0xfc,
	0x43, 0x3d, 0xef, 0x7f, 0xdb, 0x0e, 0xc9, 0xf7, 0xed, 0x90, 0xfc, 0xda, 0x0e, 0xc9, 0x79, 0xcf,
	0xad, 0xfe, 0xc9, 0x9f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xcf, 0x0f, 0x50, 0x71, 0xb9, 0x04, 0x00,
	0x00,
}
