// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: tree_service.proto

package tree

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import protobuf "../protobuf"
import _ "google.golang.org/genproto/googleapis/api/annotations"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type CreateTreeServiceRequest struct {
	Data                 *Tree    `protobuf:"bytes,1,opt,name=data" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateTreeServiceRequest) Reset()         { *m = CreateTreeServiceRequest{} }
func (m *CreateTreeServiceRequest) String() string { return proto.CompactTextString(m) }
func (*CreateTreeServiceRequest) ProtoMessage()    {}
func (*CreateTreeServiceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_tree_service_62cb9dfae276d50f, []int{0}
}
func (m *CreateTreeServiceRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateTreeServiceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateTreeServiceRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *CreateTreeServiceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateTreeServiceRequest.Merge(dst, src)
}
func (m *CreateTreeServiceRequest) XXX_Size() int {
	return m.Size()
}
func (m *CreateTreeServiceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateTreeServiceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateTreeServiceRequest proto.InternalMessageInfo

func (m *CreateTreeServiceRequest) GetData() *Tree {
	if m != nil {
		return m.Data
	}
	return nil
}

type DeleteTreeServiceRequest struct {
	Tre                  string          `protobuf:"bytes,1,opt,name=tre,proto3" json:"tre,omitempty"`
	Data                 *protobuf.Empty `protobuf:"bytes,2,opt,name=data" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *DeleteTreeServiceRequest) Reset()         { *m = DeleteTreeServiceRequest{} }
func (m *DeleteTreeServiceRequest) String() string { return proto.CompactTextString(m) }
func (*DeleteTreeServiceRequest) ProtoMessage()    {}
func (*DeleteTreeServiceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_tree_service_62cb9dfae276d50f, []int{1}
}
func (m *DeleteTreeServiceRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteTreeServiceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteTreeServiceRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *DeleteTreeServiceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteTreeServiceRequest.Merge(dst, src)
}
func (m *DeleteTreeServiceRequest) XXX_Size() int {
	return m.Size()
}
func (m *DeleteTreeServiceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteTreeServiceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteTreeServiceRequest proto.InternalMessageInfo

func (m *DeleteTreeServiceRequest) GetTre() string {
	if m != nil {
		return m.Tre
	}
	return ""
}

func (m *DeleteTreeServiceRequest) GetData() *protobuf.Empty {
	if m != nil {
		return m.Data
	}
	return nil
}

type GetTreeServiceRequest struct {
	Tre                  string   `protobuf:"bytes,1,opt,name=tre,proto3" json:"tre,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetTreeServiceRequest) Reset()         { *m = GetTreeServiceRequest{} }
func (m *GetTreeServiceRequest) String() string { return proto.CompactTextString(m) }
func (*GetTreeServiceRequest) ProtoMessage()    {}
func (*GetTreeServiceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_tree_service_62cb9dfae276d50f, []int{2}
}
func (m *GetTreeServiceRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetTreeServiceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetTreeServiceRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *GetTreeServiceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetTreeServiceRequest.Merge(dst, src)
}
func (m *GetTreeServiceRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetTreeServiceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetTreeServiceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetTreeServiceRequest proto.InternalMessageInfo

func (m *GetTreeServiceRequest) GetTre() string {
	if m != nil {
		return m.Tre
	}
	return ""
}

type ListTreeServiceRequest struct {
	// Partielle Repr채sentation fields=id,name // 10
	Fields string `protobuf:"bytes,1,opt,name=fields,proto3" json:"fields,omitempty"`
	// Sortierung nach feldern
	// **?filter=-completed** um completed absteigend zu bekommen
	// **?filter=completed** um completed aufsteigend zu bekommen
	Sort string `protobuf:"bytes,2,opt,name=sort,proto3" json:"sort,omitempty"`
	// Filter
	Filter string `protobuf:"bytes,3,opt,name=filter,proto3" json:"filter,omitempty"`
	// Gew체nschte Seite. Tipp: Folge dem HATEOAS next, prev,...
	Page int32 `protobuf:"varint,4,opt,name=page,proto3" json:"page,omitempty"`
	// Anzahl Elemente pro Seite, maximal sind 99 erlaubt
	Limit int32 `protobuf:"varint,5,opt,name=limit,proto3" json:"limit,omitempty"`
	// Meta f체r die Anzahl der Elemente der Resource, bei true ist in der Antwort Meta der count aufgef체hrt
	Count bool `protobuf:"varint,6,opt,name=count,proto3" json:"count,omitempty"`
	// not implemented
	Sum string `protobuf:"bytes,7,opt,name=sum,proto3" json:"sum,omitempty"`
	// not implemented (ehemals context)
	View string `protobuf:"bytes,8,opt,name=view,proto3" json:"view,omitempty"`
	// Query term to search a tree
	Q                    string   `protobuf:"bytes,11,opt,name=q,proto3" json:"q,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListTreeServiceRequest) Reset()         { *m = ListTreeServiceRequest{} }
func (m *ListTreeServiceRequest) String() string { return proto.CompactTextString(m) }
func (*ListTreeServiceRequest) ProtoMessage()    {}
func (*ListTreeServiceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_tree_service_62cb9dfae276d50f, []int{3}
}
func (m *ListTreeServiceRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListTreeServiceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListTreeServiceRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ListTreeServiceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListTreeServiceRequest.Merge(dst, src)
}
func (m *ListTreeServiceRequest) XXX_Size() int {
	return m.Size()
}
func (m *ListTreeServiceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListTreeServiceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListTreeServiceRequest proto.InternalMessageInfo

func (m *ListTreeServiceRequest) GetFields() string {
	if m != nil {
		return m.Fields
	}
	return ""
}

func (m *ListTreeServiceRequest) GetSort() string {
	if m != nil {
		return m.Sort
	}
	return ""
}

func (m *ListTreeServiceRequest) GetFilter() string {
	if m != nil {
		return m.Filter
	}
	return ""
}

func (m *ListTreeServiceRequest) GetPage() int32 {
	if m != nil {
		return m.Page
	}
	return 0
}

func (m *ListTreeServiceRequest) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *ListTreeServiceRequest) GetCount() bool {
	if m != nil {
		return m.Count
	}
	return false
}

func (m *ListTreeServiceRequest) GetSum() string {
	if m != nil {
		return m.Sum
	}
	return ""
}

func (m *ListTreeServiceRequest) GetView() string {
	if m != nil {
		return m.View
	}
	return ""
}

func (m *ListTreeServiceRequest) GetQ() string {
	if m != nil {
		return m.Q
	}
	return ""
}

type UpdateTreeServiceRequest struct {
	Tre                  string   `protobuf:"bytes,1,opt,name=tre,proto3" json:"tre,omitempty"`
	Data                 *Tree    `protobuf:"bytes,2,opt,name=data" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdateTreeServiceRequest) Reset()         { *m = UpdateTreeServiceRequest{} }
func (m *UpdateTreeServiceRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateTreeServiceRequest) ProtoMessage()    {}
func (*UpdateTreeServiceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_tree_service_62cb9dfae276d50f, []int{4}
}
func (m *UpdateTreeServiceRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateTreeServiceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateTreeServiceRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *UpdateTreeServiceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateTreeServiceRequest.Merge(dst, src)
}
func (m *UpdateTreeServiceRequest) XXX_Size() int {
	return m.Size()
}
func (m *UpdateTreeServiceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateTreeServiceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateTreeServiceRequest proto.InternalMessageInfo

func (m *UpdateTreeServiceRequest) GetTre() string {
	if m != nil {
		return m.Tre
	}
	return ""
}

func (m *UpdateTreeServiceRequest) GetData() *Tree {
	if m != nil {
		return m.Data
	}
	return nil
}

func init() {
	proto.RegisterType((*CreateTreeServiceRequest)(nil), "tree.CreateTreeServiceRequest")
	proto.RegisterType((*DeleteTreeServiceRequest)(nil), "tree.DeleteTreeServiceRequest")
	proto.RegisterType((*GetTreeServiceRequest)(nil), "tree.GetTreeServiceRequest")
	proto.RegisterType((*ListTreeServiceRequest)(nil), "tree.ListTreeServiceRequest")
	proto.RegisterType((*UpdateTreeServiceRequest)(nil), "tree.UpdateTreeServiceRequest")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// TreeServiceClient is the client API for TreeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TreeServiceClient interface {
	// Creates a new Tree
	CreateTreeService(ctx context.Context, in *CreateTreeServiceRequest, opts ...grpc.CallOption) (*TreeEntity, error)
	// Delete a Tree
	DeleteTreeService(ctx context.Context, in *DeleteTreeServiceRequest, opts ...grpc.CallOption) (*protobuf.Empty, error)
	// The Get method takes zero or more parameters, and returns a TreeEntity which contains a Tree
	GetTreeService(ctx context.Context, in *GetTreeServiceRequest, opts ...grpc.CallOption) (*TreeEntity, error)
	// The List method takes zero or more parameters as input, and returns a TreeCollection of TreeEntity that match the input parameters.
	ListTreeService(ctx context.Context, in *ListTreeServiceRequest, opts ...grpc.CallOption) (*TreeCollection, error)
	// Updates a Tree, partial updates are supported
	UpdateTreeService(ctx context.Context, in *UpdateTreeServiceRequest, opts ...grpc.CallOption) (*TreeEntity, error)
}

type treeServiceClient struct {
	cc *grpc.ClientConn
}

func NewTreeServiceClient(cc *grpc.ClientConn) TreeServiceClient {
	return &treeServiceClient{cc}
}

func (c *treeServiceClient) CreateTreeService(ctx context.Context, in *CreateTreeServiceRequest, opts ...grpc.CallOption) (*TreeEntity, error) {
	out := new(TreeEntity)
	err := c.cc.Invoke(ctx, "/tree.TreeService/CreateTreeService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *treeServiceClient) DeleteTreeService(ctx context.Context, in *DeleteTreeServiceRequest, opts ...grpc.CallOption) (*protobuf.Empty, error) {
	out := new(protobuf.Empty)
	err := c.cc.Invoke(ctx, "/tree.TreeService/DeleteTreeService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *treeServiceClient) GetTreeService(ctx context.Context, in *GetTreeServiceRequest, opts ...grpc.CallOption) (*TreeEntity, error) {
	out := new(TreeEntity)
	err := c.cc.Invoke(ctx, "/tree.TreeService/GetTreeService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *treeServiceClient) ListTreeService(ctx context.Context, in *ListTreeServiceRequest, opts ...grpc.CallOption) (*TreeCollection, error) {
	out := new(TreeCollection)
	err := c.cc.Invoke(ctx, "/tree.TreeService/ListTreeService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *treeServiceClient) UpdateTreeService(ctx context.Context, in *UpdateTreeServiceRequest, opts ...grpc.CallOption) (*TreeEntity, error) {
	out := new(TreeEntity)
	err := c.cc.Invoke(ctx, "/tree.TreeService/UpdateTreeService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TreeServiceServer is the server API for TreeService service.
type TreeServiceServer interface {
	// Creates a new Tree
	CreateTreeService(context.Context, *CreateTreeServiceRequest) (*TreeEntity, error)
	// Delete a Tree
	DeleteTreeService(context.Context, *DeleteTreeServiceRequest) (*protobuf.Empty, error)
	// The Get method takes zero or more parameters, and returns a TreeEntity which contains a Tree
	GetTreeService(context.Context, *GetTreeServiceRequest) (*TreeEntity, error)
	// The List method takes zero or more parameters as input, and returns a TreeCollection of TreeEntity that match the input parameters.
	ListTreeService(context.Context, *ListTreeServiceRequest) (*TreeCollection, error)
	// Updates a Tree, partial updates are supported
	UpdateTreeService(context.Context, *UpdateTreeServiceRequest) (*TreeEntity, error)
}

func RegisterTreeServiceServer(s *grpc.Server, srv TreeServiceServer) {
	s.RegisterService(&_TreeService_serviceDesc, srv)
}

func _TreeService_CreateTreeService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTreeServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TreeServiceServer).CreateTreeService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tree.TreeService/CreateTreeService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TreeServiceServer).CreateTreeService(ctx, req.(*CreateTreeServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TreeService_DeleteTreeService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTreeServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TreeServiceServer).DeleteTreeService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tree.TreeService/DeleteTreeService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TreeServiceServer).DeleteTreeService(ctx, req.(*DeleteTreeServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TreeService_GetTreeService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTreeServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TreeServiceServer).GetTreeService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tree.TreeService/GetTreeService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TreeServiceServer).GetTreeService(ctx, req.(*GetTreeServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TreeService_ListTreeService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTreeServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TreeServiceServer).ListTreeService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tree.TreeService/ListTreeService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TreeServiceServer).ListTreeService(ctx, req.(*ListTreeServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TreeService_UpdateTreeService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTreeServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TreeServiceServer).UpdateTreeService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tree.TreeService/UpdateTreeService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TreeServiceServer).UpdateTreeService(ctx, req.(*UpdateTreeServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _TreeService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "tree.TreeService",
	HandlerType: (*TreeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTreeService",
			Handler:    _TreeService_CreateTreeService_Handler,
		},
		{
			MethodName: "DeleteTreeService",
			Handler:    _TreeService_DeleteTreeService_Handler,
		},
		{
			MethodName: "GetTreeService",
			Handler:    _TreeService_GetTreeService_Handler,
		},
		{
			MethodName: "ListTreeService",
			Handler:    _TreeService_ListTreeService_Handler,
		},
		{
			MethodName: "UpdateTreeService",
			Handler:    _TreeService_UpdateTreeService_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "tree_service.proto",
}

func (m *CreateTreeServiceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateTreeServiceRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Data != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTreeService(dAtA, i, uint64(m.Data.Size()))
		n1, err := m.Data.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *DeleteTreeServiceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteTreeServiceRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Tre) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTreeService(dAtA, i, uint64(len(m.Tre)))
		i += copy(dAtA[i:], m.Tre)
	}
	if m.Data != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTreeService(dAtA, i, uint64(m.Data.Size()))
		n2, err := m.Data.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GetTreeServiceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetTreeServiceRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Tre) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTreeService(dAtA, i, uint64(len(m.Tre)))
		i += copy(dAtA[i:], m.Tre)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ListTreeServiceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListTreeServiceRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Fields) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTreeService(dAtA, i, uint64(len(m.Fields)))
		i += copy(dAtA[i:], m.Fields)
	}
	if len(m.Sort) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTreeService(dAtA, i, uint64(len(m.Sort)))
		i += copy(dAtA[i:], m.Sort)
	}
	if len(m.Filter) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTreeService(dAtA, i, uint64(len(m.Filter)))
		i += copy(dAtA[i:], m.Filter)
	}
	if m.Page != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintTreeService(dAtA, i, uint64(m.Page))
	}
	if m.Limit != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintTreeService(dAtA, i, uint64(m.Limit))
	}
	if m.Count {
		dAtA[i] = 0x30
		i++
		if m.Count {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.Sum) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintTreeService(dAtA, i, uint64(len(m.Sum)))
		i += copy(dAtA[i:], m.Sum)
	}
	if len(m.View) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintTreeService(dAtA, i, uint64(len(m.View)))
		i += copy(dAtA[i:], m.View)
	}
	if len(m.Q) > 0 {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintTreeService(dAtA, i, uint64(len(m.Q)))
		i += copy(dAtA[i:], m.Q)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *UpdateTreeServiceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateTreeServiceRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Tre) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTreeService(dAtA, i, uint64(len(m.Tre)))
		i += copy(dAtA[i:], m.Tre)
	}
	if m.Data != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTreeService(dAtA, i, uint64(m.Data.Size()))
		n3, err := m.Data.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintTreeService(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *CreateTreeServiceRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovTreeService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DeleteTreeServiceRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Tre)
	if l > 0 {
		n += 1 + l + sovTreeService(uint64(l))
	}
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovTreeService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetTreeServiceRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Tre)
	if l > 0 {
		n += 1 + l + sovTreeService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ListTreeServiceRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Fields)
	if l > 0 {
		n += 1 + l + sovTreeService(uint64(l))
	}
	l = len(m.Sort)
	if l > 0 {
		n += 1 + l + sovTreeService(uint64(l))
	}
	l = len(m.Filter)
	if l > 0 {
		n += 1 + l + sovTreeService(uint64(l))
	}
	if m.Page != 0 {
		n += 1 + sovTreeService(uint64(m.Page))
	}
	if m.Limit != 0 {
		n += 1 + sovTreeService(uint64(m.Limit))
	}
	if m.Count {
		n += 2
	}
	l = len(m.Sum)
	if l > 0 {
		n += 1 + l + sovTreeService(uint64(l))
	}
	l = len(m.View)
	if l > 0 {
		n += 1 + l + sovTreeService(uint64(l))
	}
	l = len(m.Q)
	if l > 0 {
		n += 1 + l + sovTreeService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpdateTreeServiceRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Tre)
	if l > 0 {
		n += 1 + l + sovTreeService(uint64(l))
	}
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovTreeService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovTreeService(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozTreeService(x uint64) (n int) {
	return sovTreeService(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *CreateTreeServiceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTreeService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateTreeServiceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateTreeServiceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTreeService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTreeService
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &Tree{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTreeService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTreeService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteTreeServiceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTreeService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteTreeServiceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteTreeServiceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tre", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTreeService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTreeService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tre = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTreeService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTreeService
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &protobuf.Empty{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTreeService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTreeService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetTreeServiceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTreeService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetTreeServiceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetTreeServiceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tre", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTreeService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTreeService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tre = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTreeService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTreeService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListTreeServiceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTreeService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListTreeServiceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListTreeServiceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fields", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTreeService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTreeService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Fields = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sort", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTreeService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTreeService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sort = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Filter", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTreeService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTreeService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Filter = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			m.Page = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTreeService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Page |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTreeService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTreeService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Count = bool(v != 0)
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sum", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTreeService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTreeService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sum = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field View", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTreeService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTreeService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.View = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Q", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTreeService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTreeService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Q = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTreeService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTreeService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateTreeServiceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTreeService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateTreeServiceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateTreeServiceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tre", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTreeService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTreeService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tre = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTreeService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTreeService
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &Tree{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTreeService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTreeService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTreeService(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTreeService
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTreeService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTreeService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthTreeService
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowTreeService
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipTreeService(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthTreeService = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTreeService   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("tree_service.proto", fileDescriptor_tree_service_62cb9dfae276d50f) }

var fileDescriptor_tree_service_62cb9dfae276d50f = []byte{
	// 491 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x53, 0x4d, 0x6f, 0xd3, 0x40,
	0x10, 0xd5, 0x36, 0x1f, 0xb4, 0x93, 0x88, 0x26, 0xa3, 0xb4, 0x5a, 0x99, 0xca, 0x8a, 0xcc, 0x25,
	0x70, 0x48, 0xa4, 0x70, 0xeb, 0x91, 0x52, 0x71, 0xe9, 0x05, 0x03, 0x07, 0x2e, 0x54, 0x6e, 0x32,
	0x8d, 0x2c, 0x39, 0xb6, 0xe3, 0x5d, 0x17, 0x21, 0xc4, 0x85, 0xbf, 0xc0, 0x9f, 0xe2, 0x58, 0x89,
	0x3f, 0x80, 0x22, 0x6e, 0xfc, 0x09, 0xb4, 0xb3, 0x76, 0xd3, 0xd6, 0x8e, 0x94, 0x53, 0x66, 0x5f,
	0xde, 0xbc, 0x79, 0x9a, 0x79, 0x06, 0xd4, 0x19, 0xd1, 0xa5, 0xa2, 0xec, 0x26, 0x9c, 0xd1, 0x38,
	0xcd, 0x12, 0x9d, 0x60, 0xd3, 0x60, 0xce, 0xc9, 0x22, 0x49, 0x16, 0x11, 0x4d, 0x82, 0x34, 0x9c,
	0x04, 0x71, 0x9c, 0xe8, 0x40, 0x87, 0x49, 0xac, 0x2c, 0xc7, 0x01, 0xc3, 0x29, 0xea, 0x3e, 0x6b,
	0x50, 0xac, 0x43, 0xfd, 0xb5, 0x80, 0x8e, 0x18, 0x9a, 0x25, 0x51, 0x44, 0x33, 0xd3, 0x56, 0xc0,
	0x03, 0xfe, 0xb9, 0xca, 0xaf, 0x27, 0xb4, 0x4c, 0x4b, 0xb2, 0x77, 0x0a, 0xf2, 0x2c, 0xa3, 0x40,
	0xd3, 0x87, 0x8c, 0xe8, 0xbd, 0xb5, 0xe2, 0xd3, 0x2a, 0x27, 0xa5, 0xd1, 0x85, 0xe6, 0x3c, 0xd0,
	0x81, 0x14, 0x43, 0x31, 0xea, 0x4c, 0x61, 0xcc, 0x63, 0x0d, 0xcf, 0x67, 0xdc, 0x7b, 0x07, 0xf2,
	0x0d, 0x45, 0x54, 0xdb, 0xdb, 0x83, 0x86, 0xce, 0x88, 0x5b, 0x0f, 0x7c, 0x53, 0xe2, 0xf3, 0x42,
	0x6d, 0x8f, 0xd5, 0x0e, 0xc7, 0xa5, 0x9d, 0xf1, 0xb9, 0xb1, 0x53, 0x48, 0xbe, 0x80, 0xa3, 0xb7,
	0xa4, 0x77, 0xd1, 0xf3, 0x6e, 0x05, 0x1c, 0x5f, 0x84, 0xaa, 0x8e, 0x7c, 0x0c, 0xed, 0xeb, 0x90,
	0xa2, 0xb9, 0x2a, 0xf8, 0xc5, 0x0b, 0x11, 0x9a, 0x2a, 0xc9, 0x34, 0x5b, 0x38, 0xf0, 0xb9, 0xb6,
	0xdc, 0x48, 0x53, 0x26, 0x1b, 0x25, 0xd7, 0xbc, 0x0c, 0x37, 0x0d, 0x16, 0x24, 0x9b, 0x43, 0x31,
	0x6a, 0xf9, 0x5c, 0xe3, 0x00, 0x5a, 0x51, 0xb8, 0x0c, 0xb5, 0x6c, 0x31, 0x68, 0x1f, 0x06, 0x9d,
	0x25, 0x79, 0xac, 0x65, 0x7b, 0x28, 0x46, 0xfb, 0xbe, 0x7d, 0x18, 0xc3, 0x2a, 0x5f, 0xca, 0x27,
	0xd6, 0xb0, 0xca, 0x97, 0x46, 0xf1, 0x26, 0xa4, 0x2f, 0x72, 0xdf, 0x4e, 0x37, 0x35, 0x76, 0x41,
	0xac, 0x64, 0x87, 0x01, 0xb1, 0xf2, 0x2e, 0x40, 0x7e, 0x4c, 0xe7, 0xc1, 0x8e, 0x0b, 0x75, 0x1f,
	0x2c, 0xb4, 0x72, 0x9e, 0xe9, 0xbf, 0x06, 0x74, 0xee, 0x09, 0xe1, 0x25, 0xf4, 0x2b, 0xa7, 0x46,
	0xd7, 0xb6, 0x6d, 0xcb, 0x80, 0xd3, 0xdb, 0xc8, 0x9e, 0x73, 0xc8, 0x3c, 0xf9, 0xe3, 0xf7, 0xdf,
	0x9f, 0x7b, 0xe8, 0x01, 0xa7, 0xd3, 0xfc, 0xab, 0x4e, 0x79, 0x20, 0x7e, 0x86, 0x7e, 0x25, 0x0f,
	0xe5, 0x80, 0x6d, 0x41, 0x71, 0x1e, 0x07, 0xa1, 0xd4, 0x7f, 0xd9, 0xdb, 0xe8, 0x4f, 0xbe, 0xe9,
	0x8c, 0xbe, 0xe3, 0x27, 0x78, 0xfa, 0x30, 0x1c, 0xf8, 0xcc, 0x8a, 0xd7, 0x46, 0x66, 0xbb, 0x75,
	0xac, 0x93, 0x3e, 0x7c, 0x94, 0x25, 0x3c, 0xb1, 0xed, 0xf5, 0x11, 0x73, 0x06, 0x1b, 0xf1, 0xb3,
	0xbb, 0x2f, 0xcd, 0x43, 0x1e, 0xd0, 0xc5, 0x7b, 0xbb, 0x41, 0x82, 0x7e, 0xe5, 0xa8, 0xe5, 0x56,
	0xb6, 0x5d, 0xbb, 0xc6, 0xbb, 0xcb, 0xd2, 0x72, 0x5a, 0xf1, 0x6e, 0x97, 0xff, 0xba, 0xfb, 0x6b,
	0xed, 0x8a, 0xdb, 0xb5, 0x2b, 0xfe, 0xac, 0x5d, 0x71, 0xd5, 0xe6, 0xa5, 0xbe, 0xfa, 0x1f, 0x00,
	0x00, 0xff, 0xff, 0x41, 0xcd, 0x9a, 0x7c, 0x63, 0x04, 0x00, 0x00,
}
