// Code generated by furo-proto-gen. DO NOT EDIT.

syntax = "proto3";
package taskmanager;


option csharp_namespace = "Google.Protobuf.WellKnownTypes";
option go_package = "taskmanager";
option java_package = "taskmanager";
option java_outer_classname = "AnyProto";
option java_multiple_files = true;
option objc_class_prefix = "GPB";

import "google/api/annotations.proto";

import "tree/tree.proto";
import "google/protobuf/empty.proto";
import "person/person.proto";
import "project/project.proto";
import "task/task.proto";
import "experiment/experiment.proto";

service BundledService {


// service specs for the tree api
                      
   
    // Creates a new Tree
    rpc CreateTree (CreateTreeServiceRequest) returns (tree.TreeEntity){
        //
        option (google.api.http) = {
            post: "/mockdata/trees"
            body: "data"
        };
    }   
    // Delete a Tree
    rpc DeleteTree (DeleteTreeServiceRequest) returns (google.protobuf.Empty){
        //
        option (google.api.http) = {
            delete: "/mockdata/trees/{tre}"
            
        };
    }   
    // The Get method takes zero or more parameters, and returns a TreeEntity which contains a Tree
    rpc GetTree (GetTreeServiceRequest) returns (tree.TreeEntity){
        //
        option (google.api.http) = {
            get: "/mockdata/trees/{tre}/get.json"
        };
    }   
    // The List method takes zero or more parameters as input, and returns a TreeCollection of TreeEntity that match the input parameters.
    rpc ListTrees (ListTreeServiceRequest) returns (tree.TreeCollection){
        //Describe_the_query_params_if_you_have
        option (google.api.http) = {
            get: "/mockdata/trees"
        };
    }   
    // Updates a Tree, partial updates are supported
    rpc UpdateTree (UpdateTreeServiceRequest) returns (tree.TreeEntity){
        //
        option (google.api.http) = {
            patch: "/mockdata/trees/{tre}"
            body: "data"
        };
    }


// service specs for the person api
                      
   
    // Creates a new Person
    rpc CreatePerson (CreatePersonServiceRequest) returns (person.PersonEntity){
        //
        option (google.api.http) = {
            get: "/mockdata/persons/create.json"
            
        };
    }   
    // Delete a Person
    rpc DeletePerson (DeletePersonServiceRequest) returns (google.protobuf.Empty){
        //
        option (google.api.http) = {
            get: "/mockdata/persons/{prs}/delete.json"
            
        };
    }   
    // The Get method takes zero or more parameters, and returns a PersonEntity which contains a Person
    rpc GetPerson (GetPersonServiceRequest) returns (person.PersonEntity){
        //
        option (google.api.http) = {
            get: "/mockdata/persons/{prs}/get.json"
        };
    }   
    // The List method takes zero or more parameters as input, and returns a PersonCollection of PersonEntity that match the input parameters.
    rpc ListPersons (ListPersonServiceRequest) returns (person.PersonCollection){
        //Describe_the_query_params_if_you_have
        option (google.api.http) = {
            get: "/mockdata/persons/list.json"
        };
    }   
    // Updates a Person, partial updates are supported
    rpc UpdatePerson (UpdatePersonServiceRequest) returns (person.PersonEntity){
        //
        option (google.api.http) = {
            get: "/mockdata/persons/{prs}/update.json"
            
        };
    }


// service specs for the project api
                      
   
    // Creates a new Project
    rpc CreateProject (CreateProjectServiceRequest) returns (project.ProjectEntity){
        //
        option (google.api.http) = {
            get: "/mockdata/projects/create.json"
            
        };
    }   
    // Delete a Project
    rpc DeleteProject (DeleteProjectServiceRequest) returns (google.protobuf.Empty){
        //
        option (google.api.http) = {
            get: "/mockdata/projects/{prj}/delete.json"
            
        };
    }   
    // The Get method takes zero or more parameters, and returns a ProjectEntity which contains a Project
    rpc GetProject (GetProjectServiceRequest) returns (project.ProjectEntity){
        //
        option (google.api.http) = {
            get: "/mockdata/projects/{prj}/get.json"
        };
    }   
    // The List method takes zero or more parameters as input, and returns a ProjectCollection of ProjectEntity that match the input parameters.
    rpc ListProjects (ListProjectServiceRequest) returns (project.ProjectCollection){
        //Describe_the_query_params_if_you_have
        option (google.api.http) = {
            get: "/mockdata/projects/list.json"
        };
    }   
    // Updates a Project, partial updates are supported
    rpc UpdateProject (UpdateProjectServiceRequest) returns (project.ProjectEntity){
        //
        option (google.api.http) = {
            get: "/mockdata/projects/{prj}/update.json"
            
        };
    }


// The members of a project
          
   
    // Get a collection with PersonEntities
    rpc ListMembers (ListProjectMembersServiceRequest) returns (person.PersonCollection){
        //
        option (google.api.http) = {
            get: "/api/members"
        };
    }   
    // Custom method to unsubscribe a member, complete PersonEntity is expected
    rpc UnsubscribeProjectMembersService (UnsubscribeProjectMembersServiceRequest) returns (person.PersonCollection){
        //{prs} stands for person
        option (google.api.http) = {
            post: "/api/projects/{prj}/members/{prs}:unsubscribe"
            body: "data"
        };
    }


// service specs for the task api
                      
   
    // Creates a new Task
    rpc CreateTask (CreateTaskServiceRequest) returns (task.TaskEntity){
        //
        option (google.api.http) = {
            get: "/mockdata/tasks/create.json"
            
        };
    }   
    // Delete a Task
    rpc DeleteTask (DeleteTaskServiceRequest) returns (google.protobuf.Empty){
        //
        option (google.api.http) = {
            get: "/mockdata/tasks/{tsk}/delete.json"
            
        };
    }   
    // The Get method takes zero or more parameters, and returns a TaskEntity which contains a Task
    rpc GetTask (GetTaskServiceRequest) returns (task.TaskEntity){
        //
        option (google.api.http) = {
            get: "/mockdata/tasks/{tsk}/get.json"
        };
    }   
    // The List method takes zero or more parameters as input, and returns a TaskCollection of TaskEntity that match the input parameters.
    rpc ListTasks (ListTaskServiceRequest) returns (task.TaskCollection){
        //Describe_the_query_params_if_you_have
        option (google.api.http) = {
            get: "/mockdata/tasks/list.json"
        };
    }   
    // Updates a Task, partial updates are supported
    rpc UpdateTask (UpdateTaskServiceRequest) returns (task.TaskEntity){
        //
        option (google.api.http) = {
            get: "/mockdata/tasks/{tsk}/update.json"
            
        };
    }


// service specs for the experiment api
                      
   
    // Creates a new Experiment
    rpc CreateExperiment (CreateExperimentServiceRequest) returns (experiment.ExperimentEntity){
        //
        option (google.api.http) = {
            post: "/mockdata/experiments"
            body: "data"
        };
    }   
    // Delete a Experiment
    rpc DeleteExperiment (DeleteExperimentServiceRequest) returns (google.protobuf.Empty){
        //
        option (google.api.http) = {
            delete: "/mockdata/experiments/{exp}"
            
        };
    }   
    // The Get method takes zero or more parameters, and returns a ExperimentEntity which contains a Experiment
    rpc GetExperiment (GetExperimentServiceRequest) returns (experiment.ExperimentEntity){
        //
        option (google.api.http) = {
            get: "/mockdata/experiments/{exp}/get.json"
        };
    }   
    // The List method takes zero or more parameters as input, and returns a ExperimentCollection of ExperimentEntity that match the input parameters.
    rpc ListExperiments (ListExperimentServiceRequest) returns (experiment.ExperimentCollection){
        //Describe_the_query_params_if_you_have
        option (google.api.http) = {
            get: "/mockdata/experiments"
        };
    }   
    // Updates a Experiment, partial updates are supported
    rpc UpdateExperiment (UpdateExperimentServiceRequest) returns (experiment.ExperimentEntity){
        //
        option (google.api.http) = {
            patch: "/mockdata/experiments/{exp}"
            body: "data"
        };
    }

}



// service specs for the tree api
                      

   
message CreateTreeServiceRequest { 
    
    tree.Tree data =  1;  
}

   
message DeleteTreeServiceRequest { 
    
    string tre = 1;
    google.protobuf.Empty data =  2;  
}

   
message GetTreeServiceRequest { 
    
    string tre = 1; 
}

   
message ListTreeServiceRequest { 
    
    //Partial representation, fields=id,name
    string fields = 1;
    /**
     * Sort fields, comma separated list for the ordering
     * use **?filter=-display_name** with a dash to sort descending
     * use **?filter=display_name** to sort ascending
     */
    string order_by = 2;
    //Filter
    string filter = 3;
    //Page number for paginated content. Tipp: follow the HATEOAS next, prev,...
    int32 page = 4;
    //Number of elements to return per page
    int32 limit = 5;
    //https://cloud.google.com/apis/design/design_patterns#resource_view
    string view = 8;       
       
    //Query term to search a tree
    string q = 11;
}

   
message UpdateTreeServiceRequest { 
    
    string tre = 1;
    tree.Tree data =  2;  
}




// service specs for the person api
                      

   
message CreatePersonServiceRequest { 
    
    person.Person data =  1;  
}

   
message DeletePersonServiceRequest { 
    
    string prs = 1;
    google.protobuf.Empty data =  2;  
}

   
message GetPersonServiceRequest { 
    
    string prs = 1; 
}

   
message ListPersonServiceRequest { 
    
    //Partial representation, fields=id,name
    string fields = 1;
    /**
     * Sort fields, comma separated list for the ordering
     * use **?filter=-display_name** with a dash to sort descending
     * use **?filter=display_name** to sort ascending
     */
    string order_by = 2;
    //Filter
    string filter = 3;
    //Page number for paginated content. Tipp: follow the HATEOAS next, prev,...
    int32 page = 4;
    //Number of elements to return per page
    int32 limit = 5;
    //https://cloud.google.com/apis/design/design_patterns#resource_view
    string view = 8;       
       
    //Query term to search a person
    string q = 11;
}

   
message UpdatePersonServiceRequest { 
    
    string prs = 1;
    person.Person data =  2;  
}




// service specs for the project api
                      

   
message CreateProjectServiceRequest { 
    
    project.Project data =  1;  
}

   
message DeleteProjectServiceRequest { 
    
    string prj = 1;
    google.protobuf.Empty data =  2;  
}

   
message GetProjectServiceRequest { 
    
    string prj = 1; 
}

   
message ListProjectServiceRequest { 
    
    //Partial representation, fields=id,name
    string fields = 1;
    /**
     * Sort fields, comma separated list for the ordering
     * use **?filter=-display_name** with a dash to sort descending
     * use **?filter=display_name** to sort ascending
     */
    string order_by = 2;
    //Filter
    string filter = 3;
    //Page number for paginated content. Tipp: follow the HATEOAS next, prev,...
    int32 page = 4;
    //Number of elements to return per page
    int32 limit = 5;
    //https://cloud.google.com/apis/design/design_patterns#resource_view
    string view = 8;       
       
    //Query term to search a project
    string q = 11;
}

   
message UpdateProjectServiceRequest { 
    
    string prj = 1;
    project.Project data =  2;  
}




// The members of a project
          

   
message ListProjectMembersServiceRequest { 
    
    //Partial representation, fields=id,name
    string fields = 1;
    /**
     * Sort fields, comma separated list for the ordering
     * use **?filter=-display_name** with a dash to sort descending
     * use **?filter=display_name** to sort ascending
     */
    string order_by = 2;
    //Filter
    string filter = 3;
    //Page number for paginated content. Tipp: follow the HATEOAS next, prev,...
    int32 page = 4;
    //Number of elements to return per page
    int32 limit = 5;
    //https://cloud.google.com/apis/design/design_patterns#resource_view
    string view = 8;       
       
    //Query term to search a member
    string q = 11;
}

   
message UnsubscribeProjectMembersServiceRequest { 
    
    string prj = 1;
    string prs = 2;
    person.PersonEntity data =  3;  
}




// service specs for the task api
                      

   
message CreateTaskServiceRequest { 
    
    task.Task data =  1;  
}

   
message DeleteTaskServiceRequest { 
    
    string tsk = 1;
    google.protobuf.Empty data =  2;  
}

   
message GetTaskServiceRequest { 
    
    string tsk = 1; 
}

   
message ListTaskServiceRequest { 
    
    //Partial representation, fields=id,name
    string fields = 1;
    /**
     * Sort fields, comma separated list for the ordering
     * use **?filter=-display_name** with a dash to sort descending
     * use **?filter=display_name** to sort ascending
     */
    string order_by = 2;
    //Filter
    string filter = 3;
    //Page number for paginated content. Tipp: follow the HATEOAS next, prev,...
    int32 page = 4;
    //Number of elements to return per page
    int32 limit = 5;
    //https://cloud.google.com/apis/design/design_patterns#resource_view
    string view = 8;       
       
    //Query term to search a task
    string q = 11;
}

   
message UpdateTaskServiceRequest { 
    
    string tsk = 1;
    task.Task data =  2;  
}




// service specs for the experiment api
                      

   
message CreateExperimentServiceRequest { 
    
    experiment.Experiment data =  1;  
}

   
message DeleteExperimentServiceRequest { 
    
    string exp = 1;
    google.protobuf.Empty data =  2;  
}

   
message GetExperimentServiceRequest { 
    
    string exp = 1; 
}

   
message ListExperimentServiceRequest { 
    
    //Partial representation, fields=id,name
    string fields = 1;
    /**
     * Sort fields, comma separated list for the ordering
     * use **?filter=-display_name** with a dash to sort descending
     * use **?filter=display_name** to sort ascending
     */
    string order_by = 2;
    //Filter
    string filter = 3;
    //Page number for paginated content. Tipp: follow the HATEOAS next, prev,...
    int32 page = 4;
    //Number of elements to return per page
    int32 limit = 5;
    //https://cloud.google.com/apis/design/design_patterns#resource_view
    string view = 8;       
       
    //Query term to search a experiment
    string q = 11;
}

   
message UpdateExperimentServiceRequest { 
    
    string exp = 1;
    experiment.Experiment data =  2;  
}



