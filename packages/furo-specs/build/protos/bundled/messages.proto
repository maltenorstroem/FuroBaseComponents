// Code generated by furo-proto-gen. DO NOT EDIT.
// generation date: 2019-08-17 10:06:33

syntax = "proto3";
package bundled;

import "google/api/annotations.proto";
import "protobuf/any.proto";
import "google/money.proto";
import "google/date.proto";
import "furo/meta.proto";
import "furo/link.proto";




// Singletonresource of the navigationtree
message Tree {                                                
    // description of the node
    string description = 4;
    
    // String representation of the node
    string display_name = 1;
    
    // if node has error
    bool has_error = 8;
    
    // icon of the node
    string icon = 6;
    
    // Id of the node
    string id = 2;
    
    // key words of the node
    string key_words = 7;
    
    // node open or not
    bool open = 9;
    
    // Indicator which panel type is loaded
    string panel = 5;
    
    // Rootnode of the tree
    Treeitem root = 10;
    
    // subtitle of the node
    string subtitle = 3;

}
// TreeEntity with Tree
message TreeEntity {                    
    // contains a tree.Tree
    Tree data = 1;
    
    // Hateoas links
    repeated furo.Link links = 2;
    
    // Meta for the response
    furo.Meta meta = 3;

}
// TaskEntity with Task
message TaskEntity {                    
    // contains a task.Task
    Task data = 1;
    
    // Hateoas links
    repeated furo.Link links = 2;
    
    // Meta for the response
    furo.Meta meta = 3;

}
// Person message type
message Person {                            
    // Localized String representation of a person
    string display_name = 1;
    
    // First name of a person
    string first_name = 3;
    
    // Name of a person
    string name = 2;
    
    // Internal phone number
    string phone_nr = 4;
    
    // List of main skills of a person
    repeated string skills = 5;

}
// PersonCollection with repeated PersonEntity
message PersonCollection {                    
    // Contains a person.PersonEntity repeated
    repeated PersonEntity entities = 4;
    
    // Hateoas links
    repeated furo.Link links = 3;
    
    // Meta for the response
    furo.Meta meta = 2;

}
// TreeCollection with repeated TreeEntity
message TreeCollection {                    
    // Contains a tree.TreeEntity repeated
    repeated TreeEntity entities = 4;
    
    // Hateoas links
    repeated furo.Link links = 3;
    
    // Meta for the response
    furo.Meta meta = 2;

}
// TaskCollection with repeated TaskEntity
message TaskCollection {                    
    // Contains a task.TaskEntity repeated
    repeated TaskEntity entities = 4;
    
    // Hateoas links
    repeated furo.Link links = 3;
    
    // Meta for the response
    furo.Meta meta = 2;

}
// Item of the navigationtree
message Treeitem {                                                
    // Children of this node
    repeated Treeitem children = 10;
    
    // description of the node
    string description = 4;
    
    // String representation of the node
    string display_name = 1;
    
    // if node has error
    bool has_error = 7;
    
    // icon of the node
    string icon = 5;
    
    // Id of the node
    string id = 2;
    
    // key words of the node
    string key_words = 6;
    
    // Deeplink information of this node
    furo.Link link = 9;
    
    // node open or not
    bool open = 8;
    
    // subtitle of the node
    string subtitle = 3;

}
// Task data description
message Task {                            
    // Short task description
    string description = 2;
    
    // Localized String representation of a task
    ProjectCollection display_name = 1;
    
    // Estimated time in days
    int32 estimated_time = 3;
    
    // Owner of a task
    Person owner = 4;
    
    // List of subtasks
    Task subtasks = 5;

}
// ProjectCollection with repeated ProjectEntity
message ProjectCollection {                    
    // Contains a project.ProjectEntity repeated
    repeated ProjectEntity entities = 4;
    
    // Hateoas links
    repeated furo.Link links = 3;
    
    // Meta for the response
    furo.Meta meta = 2;

}
// ProjectEntity with Project
message ProjectEntity {                    
    // contains a project.Project
    Project data = 1;
    
    // Hateoas links
    repeated furo.Link links = 2;
    
    // Meta for the response
    furo.Meta meta = 3;

}
// PersonEntity with Person
message PersonEntity {                    
    // contains a person.Person
    Person data = 1;
    
    // Hateoas links
    repeated furo.Link links = 2;
    
    // Meta for the response
    furo.Meta meta = 3;

}
// Project description
message Project {                                
    // Project cost limit
    google.Money cost_limit = 6;
    
    // Short project description
    string description = 4;
    
    // Localized String representation of a project
    string display_name = 1;
    
    // Prospective end date of the project
    google.Date end = 3;
    
    // List of project members
    repeated Person members = 5;
    
    // Start date of the project
    google.Date start = 2;

}
