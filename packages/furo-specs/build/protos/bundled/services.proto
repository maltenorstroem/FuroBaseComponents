// Code generated by furo-proto-gen. DO NOT EDIT.
// generation date: 2019-08-17 10:06:33

syntax = "proto3";
package bundled;
import "google/api/annotations.proto";
import "messages.proto";
import "protobuf/empty.proto";




// service specs for the project api
service ProjectService {                       
   
    // Creates a new Project
    rpc CreateProjectService (CreateProjectServiceRequest) returns (ProjectEntity){
        //
        option (google.api.http) = {
            post: "/api/projects"
            body: "data"
        };
    }   
    // Delete a Project
    rpc DeleteProjectService (DeleteProjectServiceRequest) returns (Empty){
        //
        option (google.api.http) = {
            delete: "/api/projects/{var}"
            
        };
    }   
    // The Get method takes zero or more parameters, and returns a ProjectEntity which contains a Project
    rpc GetProjectService (GetProjectServiceRequest) returns (ProjectEntity){
        //
        option (google.api.http) = {
            get: "/api/projects/{var}"
        };
    }   
    // The List method takes zero or more parameters as input, and returns a ProjectCollection of ProjectEntity that match the input parameters.
    rpc ListProjectService (ListProjectServiceRequest) returns (ProjectCollection){
        //Describe_the_query_params_if_you_have
        option (google.api.http) = {
            get: "/api/projects"
        };
    }   
    // Updates a Project, partial updates are supported
    rpc UpdateProjectService (UpdateProjectServiceRequest) returns (ProjectEntity){
        //
        option (google.api.http) = {
            patch: "/api/projects/{var}"
            body: "data"
        };
    }
}
   
message CreateProjectServiceRequest { 
    
    Project data =  1;  
}

   
message DeleteProjectServiceRequest { 
    
    string var = 1;
    Empty data =  2;  
}

   
message GetProjectServiceRequest { 
    
    string var = 1; 
}

   
message ListProjectServiceRequest { 
    
    //Partielle Repräsentation fields=id,name // 10
    string fields = 1;
    //Sortierung nach feldern
    //**?filter=-completed** um completed absteigend zu bekommen
    //**?filter=completed** um completed aufsteigend zu bekommen
    string sort = 2;
    //Filter
    string filter = 3;
    //Gewünschte Seite. Tipp: Folge dem HATEOAS next, prev,...
    int32 page = 4;
    //Anzahl Elemente pro Seite, maximal sind 99 erlaubt
    int32 limit = 5;
    //Meta für die Anzahl der Elemente der Resource, bei true ist in der Antwort Meta der count aufgeführt
    bool count = 6;
    //not implemented
    string sum = 7;
    //not implemented (ehemals context)
    string view = 8;       
       
    //Query term to search a project
    string q = 11;
}

   
message UpdateProjectServiceRequest { 
    
    string var = 1;
    Project data =  2;  
}




// service specs for the person api
service PersonService {                       
   
    // Creates a new Person
    rpc CreatePersonService (CreatePersonServiceRequest) returns (PersonEntity){
        //
        option (google.api.http) = {
            post: "/api/persons"
            body: "data"
        };
    }   
    // Delete a Person
    rpc DeletePersonService (DeletePersonServiceRequest) returns (Empty){
        //
        option (google.api.http) = {
            delete: "/api/persons/{prs}"
            
        };
    }   
    // The Get method takes zero or more parameters, and returns a PersonEntity which contains a Person
    rpc GetPersonService (GetPersonServiceRequest) returns (PersonEntity){
        //
        option (google.api.http) = {
            get: "/api/persons/{prs}"
        };
    }   
    // The List method takes zero or more parameters as input, and returns a PersonCollection of PersonEntity that match the input parameters.
    rpc ListPersonService (ListPersonServiceRequest) returns (PersonCollection){
        //Describe_the_query_params_if_you_have
        option (google.api.http) = {
            get: "/api/persons"
        };
    }   
    // Updates a Person, partial updates are supported
    rpc UpdatePersonService (UpdatePersonServiceRequest) returns (PersonEntity){
        //
        option (google.api.http) = {
            patch: "/api/persons/{prs}"
            body: "data"
        };
    }
}
   
message CreatePersonServiceRequest { 
    
    Person data =  1;  
}

   
message DeletePersonServiceRequest { 
    
    string prs = 1;
    Empty data =  2;  
}

   
message GetPersonServiceRequest { 
    
    string prs = 1; 
}

   
message ListPersonServiceRequest { 
    
    //Partielle Repräsentation fields=id,name // 10
    string fields = 1;
    //Sortierung nach feldern
    //**?filter=-completed** um completed absteigend zu bekommen
    //**?filter=completed** um completed aufsteigend zu bekommen
    string sort = 2;
    //Filter
    string filter = 3;
    //Gewünschte Seite. Tipp: Folge dem HATEOAS next, prev,...
    int32 page = 4;
    //Anzahl Elemente pro Seite, maximal sind 99 erlaubt
    int32 limit = 5;
    //Meta für die Anzahl der Elemente der Resource, bei true ist in der Antwort Meta der count aufgeführt
    bool count = 6;
    //not implemented
    string sum = 7;
    //not implemented (ehemals context)
    string view = 8;       
       
    //Query term to search a person
    string q = 11;
}

   
message UpdatePersonServiceRequest { 
    
    string prs = 1;
    Person data =  2;  
}




// service specs for the tree api
service TreeService {                       
   
    // Creates a new Tree
    rpc CreateTreeService (CreateTreeServiceRequest) returns (TreeEntity){
        //
        option (google.api.http) = {
            post: "/api/trees"
            body: "data"
        };
    }   
    // Delete a Tree
    rpc DeleteTreeService (DeleteTreeServiceRequest) returns (Empty){
        //
        option (google.api.http) = {
            delete: "/api/trees/{tre}"
            
        };
    }   
    // The Get method takes zero or more parameters, and returns a TreeEntity which contains a Tree
    rpc GetTreeService (GetTreeServiceRequest) returns (TreeEntity){
        //
        option (google.api.http) = {
            get: "/api/trees/{tre}"
        };
    }   
    // The List method takes zero or more parameters as input, and returns a TreeCollection of TreeEntity that match the input parameters.
    rpc ListTreeService (ListTreeServiceRequest) returns (TreeCollection){
        //Describe_the_query_params_if_you_have
        option (google.api.http) = {
            get: "/api/trees"
        };
    }   
    // Updates a Tree, partial updates are supported
    rpc UpdateTreeService (UpdateTreeServiceRequest) returns (TreeEntity){
        //
        option (google.api.http) = {
            patch: "/api/trees/{tre}"
            body: "data"
        };
    }
}
   
message CreateTreeServiceRequest { 
    
    Tree data =  1;  
}

   
message DeleteTreeServiceRequest { 
    
    string tre = 1;
    Empty data =  2;  
}

   
message GetTreeServiceRequest { 
    
    string tre = 1; 
}

   
message ListTreeServiceRequest { 
    
    //Partielle Repräsentation fields=id,name // 10
    string fields = 1;
    //Sortierung nach feldern
    //**?filter=-completed** um completed absteigend zu bekommen
    //**?filter=completed** um completed aufsteigend zu bekommen
    string sort = 2;
    //Filter
    string filter = 3;
    //Gewünschte Seite. Tipp: Folge dem HATEOAS next, prev,...
    int32 page = 4;
    //Anzahl Elemente pro Seite, maximal sind 99 erlaubt
    int32 limit = 5;
    //Meta für die Anzahl der Elemente der Resource, bei true ist in der Antwort Meta der count aufgeführt
    bool count = 6;
    //not implemented
    string sum = 7;
    //not implemented (ehemals context)
    string view = 8;       
       
    //Query term to search a tree
    string q = 11;
}

   
message UpdateTreeServiceRequest { 
    
    string tre = 1;
    Tree data =  2;  
}




// The members of a project
service ProjectMembersService {           
   
    // Get a collection with PersonEntities
    rpc ListProjectMembersService (ListProjectMembersServiceRequest) returns (PersonCollection){
        //
        option (google.api.http) = {
            get: "/api/members"
        };
    }   
    // Custom method to unsubscribe a member, complete PersonEntity is expected
    rpc UnsubscribeProjectMembersService (UnsubscribeProjectMembersServiceRequest) returns (PersonCollection){
        //{prs} stands for person
        option (google.api.http) = {
            post: "/api/members/{prs}:unsubscribe"
            body: "data"
        };
    }
}
   
message ListProjectMembersServiceRequest { 
    
    //Partielle Repräsentation fields=id,name // 10
    string fields = 1;
    //Sortierung nach feldern
    //**?filter=-completed** um completed absteigend zu bekommen
    //**?filter=completed** um completed aufsteigend zu bekommen
    string sort = 2;
    //Filter
    string filter = 3;
    //Gewünschte Seite. Tipp: Folge dem HATEOAS next, prev,...
    int32 page = 4;
    //Anzahl Elemente pro Seite, maximal sind 99 erlaubt
    int32 limit = 5;
    //Meta für die Anzahl der Elemente der Resource, bei true ist in der Antwort Meta der count aufgeführt
    bool count = 6;
    //not implemented
    string sum = 7;
    //not implemented (ehemals context)
    string view = 8;       
       
    //Query term to search a member
    string q = 11;
}

   
message UnsubscribeProjectMembersServiceRequest { 
    
    string prs = 1;
    PersonEntity data =  2;  
}




// service specs for the task api
service TaskService {                       
   
    // Creates a new Task
    rpc CreateTaskService (CreateTaskServiceRequest) returns (TaskEntity){
        //
        option (google.api.http) = {
            post: "/api/tasks"
            body: "data"
        };
    }   
    // Delete a Task
    rpc DeleteTaskService (DeleteTaskServiceRequest) returns (Empty){
        //
        option (google.api.http) = {
            delete: "/api/tasks/{tsk}"
            
        };
    }   
    // The Get method takes zero or more parameters, and returns a TaskEntity which contains a Task
    rpc GetTaskService (GetTaskServiceRequest) returns (TaskEntity){
        //
        option (google.api.http) = {
            get: "/api/tasks/{tsk}"
        };
    }   
    // The List method takes zero or more parameters as input, and returns a TaskCollection of TaskEntity that match the input parameters.
    rpc ListTaskService (ListTaskServiceRequest) returns (TaskCollection){
        //Describe_the_query_params_if_you_have
        option (google.api.http) = {
            get: "/api/tasks"
        };
    }   
    // Updates a Task, partial updates are supported
    rpc UpdateTaskService (UpdateTaskServiceRequest) returns (TaskEntity){
        //
        option (google.api.http) = {
            patch: "/api/tasks/{tsk}"
            body: "data"
        };
    }
}
   
message CreateTaskServiceRequest { 
    
    Task data =  1;  
}

   
message DeleteTaskServiceRequest { 
    
    string tsk = 1;
    Empty data =  2;  
}

   
message GetTaskServiceRequest { 
    
    string tsk = 1; 
}

   
message ListTaskServiceRequest { 
    
    //Partielle Repräsentation fields=id,name // 10
    string fields = 1;
    //Sortierung nach feldern
    //**?filter=-completed** um completed absteigend zu bekommen
    //**?filter=completed** um completed aufsteigend zu bekommen
    string sort = 2;
    //Filter
    string filter = 3;
    //Gewünschte Seite. Tipp: Folge dem HATEOAS next, prev,...
    int32 page = 4;
    //Anzahl Elemente pro Seite, maximal sind 99 erlaubt
    int32 limit = 5;
    //Meta für die Anzahl der Elemente der Resource, bei true ist in der Antwort Meta der count aufgeführt
    bool count = 6;
    //not implemented
    string sum = 7;
    //not implemented (ehemals context)
    string view = 8;       
       
    //Query term to search a task
    string q = 11;
}

   
message UpdateTaskServiceRequest { 
    
    string tsk = 1;
    Task data =  2;  
}



message Empty {

}