// Code generated by furo-proto-gen. DO NOT EDIT.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.21.0-devel
// 	protoc        v3.11.4
// source: treeservice/service.proto

package treeservice

import (
	tree "../tree"
	context "context"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type CreateTreeServiceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *tree.Tree `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *CreateTreeServiceRequest) Reset() {
	*x = CreateTreeServiceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_treeservice_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTreeServiceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTreeServiceRequest) ProtoMessage() {}

func (x *CreateTreeServiceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_treeservice_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTreeServiceRequest.ProtoReflect.Descriptor instead.
func (*CreateTreeServiceRequest) Descriptor() ([]byte, []int) {
	return file_treeservice_service_proto_rawDescGZIP(), []int{0}
}

func (x *CreateTreeServiceRequest) GetData() *tree.Tree {
	if x != nil {
		return x.Data
	}
	return nil
}

type DeleteTreeServiceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tre  string       `protobuf:"bytes,1,opt,name=tre,proto3" json:"tre,omitempty"`
	Data *empty.Empty `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *DeleteTreeServiceRequest) Reset() {
	*x = DeleteTreeServiceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_treeservice_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteTreeServiceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteTreeServiceRequest) ProtoMessage() {}

func (x *DeleteTreeServiceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_treeservice_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteTreeServiceRequest.ProtoReflect.Descriptor instead.
func (*DeleteTreeServiceRequest) Descriptor() ([]byte, []int) {
	return file_treeservice_service_proto_rawDescGZIP(), []int{1}
}

func (x *DeleteTreeServiceRequest) GetTre() string {
	if x != nil {
		return x.Tre
	}
	return ""
}

func (x *DeleteTreeServiceRequest) GetData() *empty.Empty {
	if x != nil {
		return x.Data
	}
	return nil
}

type GetTreeServiceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tre string `protobuf:"bytes,1,opt,name=tre,proto3" json:"tre,omitempty"`
}

func (x *GetTreeServiceRequest) Reset() {
	*x = GetTreeServiceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_treeservice_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTreeServiceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTreeServiceRequest) ProtoMessage() {}

func (x *GetTreeServiceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_treeservice_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTreeServiceRequest.ProtoReflect.Descriptor instead.
func (*GetTreeServiceRequest) Descriptor() ([]byte, []int) {
	return file_treeservice_service_proto_rawDescGZIP(), []int{2}
}

func (x *GetTreeServiceRequest) GetTre() string {
	if x != nil {
		return x.Tre
	}
	return ""
}

type ListTreeServiceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//Query term to search a tree
	Q string `protobuf:"bytes,1,opt,name=q,proto3" json:"q,omitempty"`
}

func (x *ListTreeServiceRequest) Reset() {
	*x = ListTreeServiceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_treeservice_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListTreeServiceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTreeServiceRequest) ProtoMessage() {}

func (x *ListTreeServiceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_treeservice_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTreeServiceRequest.ProtoReflect.Descriptor instead.
func (*ListTreeServiceRequest) Descriptor() ([]byte, []int) {
	return file_treeservice_service_proto_rawDescGZIP(), []int{3}
}

func (x *ListTreeServiceRequest) GetQ() string {
	if x != nil {
		return x.Q
	}
	return ""
}

type UpdateTreeServiceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tre  string     `protobuf:"bytes,1,opt,name=tre,proto3" json:"tre,omitempty"`
	Data *tree.Tree `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *UpdateTreeServiceRequest) Reset() {
	*x = UpdateTreeServiceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_treeservice_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateTreeServiceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateTreeServiceRequest) ProtoMessage() {}

func (x *UpdateTreeServiceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_treeservice_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateTreeServiceRequest.ProtoReflect.Descriptor instead.
func (*UpdateTreeServiceRequest) Descriptor() ([]byte, []int) {
	return file_treeservice_service_proto_rawDescGZIP(), []int{4}
}

func (x *UpdateTreeServiceRequest) GetTre() string {
	if x != nil {
		return x.Tre
	}
	return ""
}

func (x *UpdateTreeServiceRequest) GetData() *tree.Tree {
	if x != nil {
		return x.Data
	}
	return nil
}

var File_treeservice_service_proto protoreflect.FileDescriptor

var file_treeservice_service_proto_rawDesc = []byte{
	0x0a, 0x19, 0x74, 0x72, 0x65, 0x65, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0b, 0x74, 0x72, 0x65,
	0x65, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0f, 0x74, 0x72, 0x65, 0x65, 0x2f, 0x74, 0x72, 0x65,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0x3a, 0x0a, 0x18, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x72,
	0x65, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1e, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a,
	0x2e, 0x74, 0x72, 0x65, 0x65, 0x2e, 0x54, 0x72, 0x65, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x22, 0x58, 0x0a, 0x18, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x72, 0x65, 0x65, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03,
	0x74, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x74, 0x72, 0x65, 0x12, 0x2a,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x29, 0x0a, 0x15, 0x47, 0x65,
	0x74, 0x54, 0x72, 0x65, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x74, 0x72, 0x65, 0x22, 0x26, 0x0a, 0x16, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x72, 0x65,
	0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x0c, 0x0a, 0x01, 0x71, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x01, 0x71, 0x22, 0x4c, 0x0a,
	0x18, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x72, 0x65, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x72, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x74, 0x72, 0x65, 0x12, 0x1e, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x74, 0x72, 0x65, 0x65,
	0x2e, 0x54, 0x72, 0x65, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x32, 0x95, 0x04, 0x0a, 0x0b,
	0x54, 0x72, 0x65, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x64, 0x0a, 0x0a, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x72, 0x65, 0x65, 0x12, 0x25, 0x2e, 0x74, 0x72, 0x65, 0x65,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x72,
	0x65, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x10, 0x2e, 0x74, 0x72, 0x65, 0x65, 0x2e, 0x54, 0x72, 0x65, 0x65, 0x45, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x22, 0x1d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x17, 0x22, 0x0f, 0x2f, 0x6d, 0x6f, 0x63,
	0x6b, 0x64, 0x61, 0x74, 0x61, 0x2f, 0x74, 0x72, 0x65, 0x65, 0x73, 0x3a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x12, 0x6a, 0x0a, 0x0a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x72, 0x65, 0x65, 0x12,
	0x25, 0x2e, 0x74, 0x72, 0x65, 0x65, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x54, 0x72, 0x65, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x1d,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x17, 0x2a, 0x15, 0x2f, 0x6d, 0x6f, 0x63, 0x6b, 0x64, 0x61, 0x74,
	0x61, 0x2f, 0x74, 0x72, 0x65, 0x65, 0x73, 0x2f, 0x7b, 0x74, 0x72, 0x65, 0x7d, 0x12, 0x67, 0x0a,
	0x07, 0x47, 0x65, 0x74, 0x54, 0x72, 0x65, 0x65, 0x12, 0x22, 0x2e, 0x74, 0x72, 0x65, 0x65, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x72, 0x65, 0x65, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x10, 0x2e, 0x74,
	0x72, 0x65, 0x65, 0x2e, 0x54, 0x72, 0x65, 0x65, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x22, 0x26,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x20, 0x12, 0x1e, 0x2f, 0x6d, 0x6f, 0x63, 0x6b, 0x64, 0x61, 0x74,
	0x61, 0x2f, 0x74, 0x72, 0x65, 0x65, 0x73, 0x2f, 0x7b, 0x74, 0x72, 0x65, 0x7d, 0x2f, 0x67, 0x65,
	0x74, 0x2e, 0x6a, 0x73, 0x6f, 0x6e, 0x12, 0x5f, 0x0a, 0x09, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x72,
	0x65, 0x65, 0x73, 0x12, 0x23, 0x2e, 0x74, 0x72, 0x65, 0x65, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x72, 0x65, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x74, 0x72, 0x65, 0x65, 0x2e,
	0x54, 0x72, 0x65, 0x65, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x17,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x11, 0x12, 0x0f, 0x2f, 0x6d, 0x6f, 0x63, 0x6b, 0x64, 0x61, 0x74,
	0x61, 0x2f, 0x74, 0x72, 0x65, 0x65, 0x73, 0x12, 0x6a, 0x0a, 0x0a, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x54, 0x72, 0x65, 0x65, 0x12, 0x25, 0x2e, 0x74, 0x72, 0x65, 0x65, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x72, 0x65, 0x65, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x10, 0x2e, 0x74,
	0x72, 0x65, 0x65, 0x2e, 0x54, 0x72, 0x65, 0x65, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x22, 0x23,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1d, 0x32, 0x15, 0x2f, 0x6d, 0x6f, 0x63, 0x6b, 0x64, 0x61, 0x74,
	0x61, 0x2f, 0x74, 0x72, 0x65, 0x65, 0x73, 0x2f, 0x7b, 0x74, 0x72, 0x65, 0x7d, 0x3a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x42, 0x0e, 0x5a, 0x0c, 0x2f, 0x74, 0x72, 0x65, 0x65, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_treeservice_service_proto_rawDescOnce sync.Once
	file_treeservice_service_proto_rawDescData = file_treeservice_service_proto_rawDesc
)

func file_treeservice_service_proto_rawDescGZIP() []byte {
	file_treeservice_service_proto_rawDescOnce.Do(func() {
		file_treeservice_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_treeservice_service_proto_rawDescData)
	})
	return file_treeservice_service_proto_rawDescData
}

var file_treeservice_service_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_treeservice_service_proto_goTypes = []interface{}{
	(*CreateTreeServiceRequest)(nil), // 0: treeservice.CreateTreeServiceRequest
	(*DeleteTreeServiceRequest)(nil), // 1: treeservice.DeleteTreeServiceRequest
	(*GetTreeServiceRequest)(nil),    // 2: treeservice.GetTreeServiceRequest
	(*ListTreeServiceRequest)(nil),   // 3: treeservice.ListTreeServiceRequest
	(*UpdateTreeServiceRequest)(nil), // 4: treeservice.UpdateTreeServiceRequest
	(*tree.Tree)(nil),                // 5: tree.Tree
	(*empty.Empty)(nil),              // 6: google.protobuf.Empty
	(*tree.TreeEntity)(nil),          // 7: tree.TreeEntity
	(*tree.TreeCollection)(nil),      // 8: tree.TreeCollection
}
var file_treeservice_service_proto_depIdxs = []int32{
	5, // 0: treeservice.CreateTreeServiceRequest.data:type_name -> tree.Tree
	6, // 1: treeservice.DeleteTreeServiceRequest.data:type_name -> google.protobuf.Empty
	5, // 2: treeservice.UpdateTreeServiceRequest.data:type_name -> tree.Tree
	0, // 3: treeservice.TreeService.CreateTree:input_type -> treeservice.CreateTreeServiceRequest
	1, // 4: treeservice.TreeService.DeleteTree:input_type -> treeservice.DeleteTreeServiceRequest
	2, // 5: treeservice.TreeService.GetTree:input_type -> treeservice.GetTreeServiceRequest
	3, // 6: treeservice.TreeService.ListTrees:input_type -> treeservice.ListTreeServiceRequest
	4, // 7: treeservice.TreeService.UpdateTree:input_type -> treeservice.UpdateTreeServiceRequest
	7, // 8: treeservice.TreeService.CreateTree:output_type -> tree.TreeEntity
	6, // 9: treeservice.TreeService.DeleteTree:output_type -> google.protobuf.Empty
	7, // 10: treeservice.TreeService.GetTree:output_type -> tree.TreeEntity
	8, // 11: treeservice.TreeService.ListTrees:output_type -> tree.TreeCollection
	7, // 12: treeservice.TreeService.UpdateTree:output_type -> tree.TreeEntity
	8, // [8:13] is the sub-list for method output_type
	3, // [3:8] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_treeservice_service_proto_init() }
func file_treeservice_service_proto_init() {
	if File_treeservice_service_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_treeservice_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTreeServiceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_treeservice_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteTreeServiceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_treeservice_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTreeServiceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_treeservice_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListTreeServiceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_treeservice_service_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateTreeServiceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_treeservice_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_treeservice_service_proto_goTypes,
		DependencyIndexes: file_treeservice_service_proto_depIdxs,
		MessageInfos:      file_treeservice_service_proto_msgTypes,
	}.Build()
	File_treeservice_service_proto = out.File
	file_treeservice_service_proto_rawDesc = nil
	file_treeservice_service_proto_goTypes = nil
	file_treeservice_service_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// TreeServiceClient is the client API for TreeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TreeServiceClient interface {
	// Creates a new Tree
	CreateTree(ctx context.Context, in *CreateTreeServiceRequest, opts ...grpc.CallOption) (*tree.TreeEntity, error)
	// Delete a Tree
	DeleteTree(ctx context.Context, in *DeleteTreeServiceRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// The Get method takes zero or more parameters, and returns a TreeEntity which contains a Tree
	GetTree(ctx context.Context, in *GetTreeServiceRequest, opts ...grpc.CallOption) (*tree.TreeEntity, error)
	// The List method takes zero or more parameters as input, and returns a TreeCollection of TreeEntity that match the input parameters.
	ListTrees(ctx context.Context, in *ListTreeServiceRequest, opts ...grpc.CallOption) (*tree.TreeCollection, error)
	// Updates a Tree, partial updates are supported
	UpdateTree(ctx context.Context, in *UpdateTreeServiceRequest, opts ...grpc.CallOption) (*tree.TreeEntity, error)
}

type treeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTreeServiceClient(cc grpc.ClientConnInterface) TreeServiceClient {
	return &treeServiceClient{cc}
}

func (c *treeServiceClient) CreateTree(ctx context.Context, in *CreateTreeServiceRequest, opts ...grpc.CallOption) (*tree.TreeEntity, error) {
	out := new(tree.TreeEntity)
	err := c.cc.Invoke(ctx, "/treeservice.TreeService/CreateTree", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *treeServiceClient) DeleteTree(ctx context.Context, in *DeleteTreeServiceRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/treeservice.TreeService/DeleteTree", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *treeServiceClient) GetTree(ctx context.Context, in *GetTreeServiceRequest, opts ...grpc.CallOption) (*tree.TreeEntity, error) {
	out := new(tree.TreeEntity)
	err := c.cc.Invoke(ctx, "/treeservice.TreeService/GetTree", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *treeServiceClient) ListTrees(ctx context.Context, in *ListTreeServiceRequest, opts ...grpc.CallOption) (*tree.TreeCollection, error) {
	out := new(tree.TreeCollection)
	err := c.cc.Invoke(ctx, "/treeservice.TreeService/ListTrees", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *treeServiceClient) UpdateTree(ctx context.Context, in *UpdateTreeServiceRequest, opts ...grpc.CallOption) (*tree.TreeEntity, error) {
	out := new(tree.TreeEntity)
	err := c.cc.Invoke(ctx, "/treeservice.TreeService/UpdateTree", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TreeServiceServer is the server API for TreeService service.
type TreeServiceServer interface {
	// Creates a new Tree
	CreateTree(context.Context, *CreateTreeServiceRequest) (*tree.TreeEntity, error)
	// Delete a Tree
	DeleteTree(context.Context, *DeleteTreeServiceRequest) (*empty.Empty, error)
	// The Get method takes zero or more parameters, and returns a TreeEntity which contains a Tree
	GetTree(context.Context, *GetTreeServiceRequest) (*tree.TreeEntity, error)
	// The List method takes zero or more parameters as input, and returns a TreeCollection of TreeEntity that match the input parameters.
	ListTrees(context.Context, *ListTreeServiceRequest) (*tree.TreeCollection, error)
	// Updates a Tree, partial updates are supported
	UpdateTree(context.Context, *UpdateTreeServiceRequest) (*tree.TreeEntity, error)
}

// UnimplementedTreeServiceServer can be embedded to have forward compatible implementations.
type UnimplementedTreeServiceServer struct {
}

func (*UnimplementedTreeServiceServer) CreateTree(context.Context, *CreateTreeServiceRequest) (*tree.TreeEntity, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTree not implemented")
}
func (*UnimplementedTreeServiceServer) DeleteTree(context.Context, *DeleteTreeServiceRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTree not implemented")
}
func (*UnimplementedTreeServiceServer) GetTree(context.Context, *GetTreeServiceRequest) (*tree.TreeEntity, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTree not implemented")
}
func (*UnimplementedTreeServiceServer) ListTrees(context.Context, *ListTreeServiceRequest) (*tree.TreeCollection, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTrees not implemented")
}
func (*UnimplementedTreeServiceServer) UpdateTree(context.Context, *UpdateTreeServiceRequest) (*tree.TreeEntity, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTree not implemented")
}

func RegisterTreeServiceServer(s *grpc.Server, srv TreeServiceServer) {
	s.RegisterService(&_TreeService_serviceDesc, srv)
}

func _TreeService_CreateTree_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTreeServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TreeServiceServer).CreateTree(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/treeservice.TreeService/CreateTree",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TreeServiceServer).CreateTree(ctx, req.(*CreateTreeServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TreeService_DeleteTree_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTreeServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TreeServiceServer).DeleteTree(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/treeservice.TreeService/DeleteTree",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TreeServiceServer).DeleteTree(ctx, req.(*DeleteTreeServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TreeService_GetTree_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTreeServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TreeServiceServer).GetTree(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/treeservice.TreeService/GetTree",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TreeServiceServer).GetTree(ctx, req.(*GetTreeServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TreeService_ListTrees_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTreeServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TreeServiceServer).ListTrees(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/treeservice.TreeService/ListTrees",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TreeServiceServer).ListTrees(ctx, req.(*ListTreeServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TreeService_UpdateTree_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTreeServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TreeServiceServer).UpdateTree(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/treeservice.TreeService/UpdateTree",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TreeServiceServer).UpdateTree(ctx, req.(*UpdateTreeServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _TreeService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "treeservice.TreeService",
	HandlerType: (*TreeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTree",
			Handler:    _TreeService_CreateTree_Handler,
		},
		{
			MethodName: "DeleteTree",
			Handler:    _TreeService_DeleteTree_Handler,
		},
		{
			MethodName: "GetTree",
			Handler:    _TreeService_GetTree_Handler,
		},
		{
			MethodName: "ListTrees",
			Handler:    _TreeService_ListTrees_Handler,
		},
		{
			MethodName: "UpdateTree",
			Handler:    _TreeService_UpdateTree_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "treeservice/service.proto",
}
