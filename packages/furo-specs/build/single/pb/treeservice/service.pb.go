// Code generated by protoc-gen-go. DO NOT EDIT.
// source: treeservice/service.proto

package treeservice

import (
	tree "../tree"
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type CreateTreeServiceRequest struct {
	Data                 *tree.Tree `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *CreateTreeServiceRequest) Reset()         { *m = CreateTreeServiceRequest{} }
func (m *CreateTreeServiceRequest) String() string { return proto.CompactTextString(m) }
func (*CreateTreeServiceRequest) ProtoMessage()    {}
func (*CreateTreeServiceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9dd10294fe0b6ab0, []int{0}
}

func (m *CreateTreeServiceRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateTreeServiceRequest.Unmarshal(m, b)
}
func (m *CreateTreeServiceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateTreeServiceRequest.Marshal(b, m, deterministic)
}
func (m *CreateTreeServiceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateTreeServiceRequest.Merge(m, src)
}
func (m *CreateTreeServiceRequest) XXX_Size() int {
	return xxx_messageInfo_CreateTreeServiceRequest.Size(m)
}
func (m *CreateTreeServiceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateTreeServiceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateTreeServiceRequest proto.InternalMessageInfo

func (m *CreateTreeServiceRequest) GetData() *tree.Tree {
	if m != nil {
		return m.Data
	}
	return nil
}

type DeleteTreeServiceRequest struct {
	Tre                  string       `protobuf:"bytes,1,opt,name=tre,proto3" json:"tre,omitempty"`
	Data                 *empty.Empty `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *DeleteTreeServiceRequest) Reset()         { *m = DeleteTreeServiceRequest{} }
func (m *DeleteTreeServiceRequest) String() string { return proto.CompactTextString(m) }
func (*DeleteTreeServiceRequest) ProtoMessage()    {}
func (*DeleteTreeServiceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9dd10294fe0b6ab0, []int{1}
}

func (m *DeleteTreeServiceRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeleteTreeServiceRequest.Unmarshal(m, b)
}
func (m *DeleteTreeServiceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeleteTreeServiceRequest.Marshal(b, m, deterministic)
}
func (m *DeleteTreeServiceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteTreeServiceRequest.Merge(m, src)
}
func (m *DeleteTreeServiceRequest) XXX_Size() int {
	return xxx_messageInfo_DeleteTreeServiceRequest.Size(m)
}
func (m *DeleteTreeServiceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteTreeServiceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteTreeServiceRequest proto.InternalMessageInfo

func (m *DeleteTreeServiceRequest) GetTre() string {
	if m != nil {
		return m.Tre
	}
	return ""
}

func (m *DeleteTreeServiceRequest) GetData() *empty.Empty {
	if m != nil {
		return m.Data
	}
	return nil
}

type GetTreeServiceRequest struct {
	Tre                  string   `protobuf:"bytes,1,opt,name=tre,proto3" json:"tre,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetTreeServiceRequest) Reset()         { *m = GetTreeServiceRequest{} }
func (m *GetTreeServiceRequest) String() string { return proto.CompactTextString(m) }
func (*GetTreeServiceRequest) ProtoMessage()    {}
func (*GetTreeServiceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9dd10294fe0b6ab0, []int{2}
}

func (m *GetTreeServiceRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetTreeServiceRequest.Unmarshal(m, b)
}
func (m *GetTreeServiceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetTreeServiceRequest.Marshal(b, m, deterministic)
}
func (m *GetTreeServiceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetTreeServiceRequest.Merge(m, src)
}
func (m *GetTreeServiceRequest) XXX_Size() int {
	return xxx_messageInfo_GetTreeServiceRequest.Size(m)
}
func (m *GetTreeServiceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetTreeServiceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetTreeServiceRequest proto.InternalMessageInfo

func (m *GetTreeServiceRequest) GetTre() string {
	if m != nil {
		return m.Tre
	}
	return ""
}

type ListTreeServiceRequest struct {
	//Query term to search a tree
	Q                    string   `protobuf:"bytes,1,opt,name=q,proto3" json:"q,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListTreeServiceRequest) Reset()         { *m = ListTreeServiceRequest{} }
func (m *ListTreeServiceRequest) String() string { return proto.CompactTextString(m) }
func (*ListTreeServiceRequest) ProtoMessage()    {}
func (*ListTreeServiceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9dd10294fe0b6ab0, []int{3}
}

func (m *ListTreeServiceRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListTreeServiceRequest.Unmarshal(m, b)
}
func (m *ListTreeServiceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListTreeServiceRequest.Marshal(b, m, deterministic)
}
func (m *ListTreeServiceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListTreeServiceRequest.Merge(m, src)
}
func (m *ListTreeServiceRequest) XXX_Size() int {
	return xxx_messageInfo_ListTreeServiceRequest.Size(m)
}
func (m *ListTreeServiceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListTreeServiceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListTreeServiceRequest proto.InternalMessageInfo

func (m *ListTreeServiceRequest) GetQ() string {
	if m != nil {
		return m.Q
	}
	return ""
}

type UpdateTreeServiceRequest struct {
	Tre                  string     `protobuf:"bytes,1,opt,name=tre,proto3" json:"tre,omitempty"`
	Data                 *tree.Tree `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *UpdateTreeServiceRequest) Reset()         { *m = UpdateTreeServiceRequest{} }
func (m *UpdateTreeServiceRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateTreeServiceRequest) ProtoMessage()    {}
func (*UpdateTreeServiceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9dd10294fe0b6ab0, []int{4}
}

func (m *UpdateTreeServiceRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdateTreeServiceRequest.Unmarshal(m, b)
}
func (m *UpdateTreeServiceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdateTreeServiceRequest.Marshal(b, m, deterministic)
}
func (m *UpdateTreeServiceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateTreeServiceRequest.Merge(m, src)
}
func (m *UpdateTreeServiceRequest) XXX_Size() int {
	return xxx_messageInfo_UpdateTreeServiceRequest.Size(m)
}
func (m *UpdateTreeServiceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateTreeServiceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateTreeServiceRequest proto.InternalMessageInfo

func (m *UpdateTreeServiceRequest) GetTre() string {
	if m != nil {
		return m.Tre
	}
	return ""
}

func (m *UpdateTreeServiceRequest) GetData() *tree.Tree {
	if m != nil {
		return m.Data
	}
	return nil
}

func init() {
	proto.RegisterType((*CreateTreeServiceRequest)(nil), "treeservice.CreateTreeServiceRequest")
	proto.RegisterType((*DeleteTreeServiceRequest)(nil), "treeservice.DeleteTreeServiceRequest")
	proto.RegisterType((*GetTreeServiceRequest)(nil), "treeservice.GetTreeServiceRequest")
	proto.RegisterType((*ListTreeServiceRequest)(nil), "treeservice.ListTreeServiceRequest")
	proto.RegisterType((*UpdateTreeServiceRequest)(nil), "treeservice.UpdateTreeServiceRequest")
}

func init() { proto.RegisterFile("treeservice/service.proto", fileDescriptor_9dd10294fe0b6ab0) }

var fileDescriptor_9dd10294fe0b6ab0 = []byte{
	// 401 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x52, 0xcd, 0x8e, 0xda, 0x30,
	0x18, 0x54, 0x28, 0x6a, 0xc5, 0x47, 0x25, 0xa8, 0x55, 0x20, 0x4d, 0x0b, 0x42, 0x46, 0x45, 0x2d,
	0x07, 0x5b, 0xa2, 0x37, 0xae, 0x14, 0xf5, 0xc2, 0x89, 0xb6, 0x52, 0x6f, 0x55, 0x80, 0x6f, 0xa3,
	0xb0, 0x21, 0x0e, 0x89, 0x59, 0x09, 0xad, 0xf6, 0xb2, 0xaf, 0xb0, 0xda, 0x27, 0xdb, 0x57, 0xd8,
	0x07, 0x59, 0xd9, 0x09, 0x0a, 0x64, 0x1d, 0x89, 0x4b, 0x7e, 0xec, 0xf1, 0xcc, 0x7c, 0x33, 0x86,
	0x4f, 0x32, 0x46, 0x4c, 0x30, 0xbe, 0xf1, 0x57, 0xc8, 0xb3, 0x37, 0x8b, 0x62, 0x21, 0x05, 0xa9,
	0x9f, 0x6c, 0x39, 0x5f, 0x3c, 0x21, 0xbc, 0x00, 0xb9, 0x1b, 0xf9, 0xdc, 0x0d, 0x43, 0x21, 0x5d,
	0xe9, 0x8b, 0x30, 0x49, 0xa1, 0x4e, 0x43, 0x41, 0xb9, 0x7a, 0x64, 0x0b, 0x9f, 0x33, 0xb8, 0xfe,
	0x5b, 0xee, 0xaf, 0x38, 0x6e, 0x23, 0x79, 0x48, 0x37, 0xe9, 0x04, 0xec, 0x69, 0x8c, 0xae, 0xc4,
	0x3f, 0x31, 0xe2, 0xef, 0x54, 0x60, 0x81, 0xbb, 0x3d, 0x26, 0x92, 0xf4, 0xa0, 0xba, 0x76, 0xa5,
	0x6b, 0x5b, 0x7d, 0xeb, 0x5b, 0x7d, 0x0c, 0x4c, 0x73, 0x2a, 0xdc, 0x42, 0xaf, 0xd3, 0x7f, 0x60,
	0xff, 0xc4, 0x00, 0x8d, 0x67, 0x9b, 0xf0, 0x46, 0xc6, 0xa8, 0x8f, 0xd6, 0x16, 0xea, 0x93, 0x8c,
	0x32, 0xb6, 0x8a, 0x66, 0x6b, 0xb3, 0xd4, 0x15, 0x3b, 0xba, 0x62, 0x33, 0xe5, 0x2a, 0x63, 0xfe,
	0x0e, 0xad, 0x5f, 0x28, 0x2f, 0xa1, 0xa5, 0x43, 0x68, 0xcf, 0xfd, 0xc4, 0x84, 0x7d, 0x0f, 0xd6,
	0x2e, 0x43, 0x5a, 0x3b, 0x3a, 0x07, 0xfb, 0x6f, 0xb4, 0x76, 0x2f, 0x34, 0xdb, 0x3b, 0x33, 0xfb,
	0x6a, 0xf4, 0xf1, 0x63, 0x15, 0xea, 0x27, 0x44, 0x64, 0x0d, 0x90, 0xc7, 0x48, 0xbe, 0xb2, 0x93,
	0xba, 0x58, 0x59, 0xbe, 0x4e, 0x33, 0xa7, 0x9d, 0x85, 0xd2, 0x97, 0x07, 0xda, 0xbd, 0x7f, 0x7a,
	0x7e, 0xa8, 0x74, 0x68, 0x83, 0x6f, 0xc5, 0xea, 0x5a, 0x29, 0xe9, 0x22, 0x93, 0x89, 0x56, 0x25,
	0x1b, 0x80, 0x3c, 0xf0, 0x82, 0x4a, 0x59, 0x13, 0x4e, 0x49, 0xd2, 0x47, 0xad, 0x51, 0xab, 0xa0,
	0xc5, 0x6f, 0x65, 0x8c, 0x77, 0xc4, 0x83, 0x77, 0x59, 0x05, 0x84, 0x9e, 0x09, 0x19, 0x8b, 0x31,
	0xcc, 0x32, 0xd4, 0xfc, 0x7d, 0xd2, 0x33, 0xf2, 0x73, 0x0f, 0x25, 0xdb, 0x24, 0x22, 0x24, 0xff,
	0xa1, 0x76, 0x2c, 0x30, 0x21, 0x83, 0x33, 0x29, 0x73, 0xb1, 0xce, 0xc7, 0x5c, 0x6b, 0x2a, 0x82,
	0x00, 0x57, 0xea, 0xfa, 0xd3, 0x8e, 0xd6, 0xfb, 0x40, 0x8a, 0xd9, 0xa9, 0xd4, 0xf2, 0xe6, 0x0b,
	0xa9, 0x95, 0x5d, 0x09, 0xc3, 0x3c, 0x03, 0xcd, 0xdf, 0x1d, 0x9b, 0xf3, 0x4a, 0x1b, 0x5a, 0xbe,
	0xd5, 0x21, 0xff, 0x78, 0x09, 0x00, 0x00, 0xff, 0xff, 0x23, 0x1c, 0xd7, 0xe5, 0xcb, 0x03, 0x00,
	0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// TreeServiceClient is the client API for TreeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TreeServiceClient interface {
	// Creates a new Tree
	CreateTree(ctx context.Context, in *CreateTreeServiceRequest, opts ...grpc.CallOption) (*tree.TreeEntity, error)
	// Delete a Tree
	DeleteTree(ctx context.Context, in *DeleteTreeServiceRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// The Get method takes zero or more parameters, and returns a TreeEntity which contains a Tree
	GetTree(ctx context.Context, in *GetTreeServiceRequest, opts ...grpc.CallOption) (*tree.TreeEntity, error)
	// The List method takes zero or more parameters as input, and returns a TreeCollection of TreeEntity that match the input parameters.
	ListTrees(ctx context.Context, in *ListTreeServiceRequest, opts ...grpc.CallOption) (*tree.TreeCollection, error)
	// Updates a Tree, partial updates are supported
	UpdateTree(ctx context.Context, in *UpdateTreeServiceRequest, opts ...grpc.CallOption) (*tree.TreeEntity, error)
}

type treeServiceClient struct {
	cc *grpc.ClientConn
}

func NewTreeServiceClient(cc *grpc.ClientConn) TreeServiceClient {
	return &treeServiceClient{cc}
}

func (c *treeServiceClient) CreateTree(ctx context.Context, in *CreateTreeServiceRequest, opts ...grpc.CallOption) (*tree.TreeEntity, error) {
	out := new(tree.TreeEntity)
	err := c.cc.Invoke(ctx, "/treeservice.TreeService/CreateTree", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *treeServiceClient) DeleteTree(ctx context.Context, in *DeleteTreeServiceRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/treeservice.TreeService/DeleteTree", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *treeServiceClient) GetTree(ctx context.Context, in *GetTreeServiceRequest, opts ...grpc.CallOption) (*tree.TreeEntity, error) {
	out := new(tree.TreeEntity)
	err := c.cc.Invoke(ctx, "/treeservice.TreeService/GetTree", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *treeServiceClient) ListTrees(ctx context.Context, in *ListTreeServiceRequest, opts ...grpc.CallOption) (*tree.TreeCollection, error) {
	out := new(tree.TreeCollection)
	err := c.cc.Invoke(ctx, "/treeservice.TreeService/ListTrees", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *treeServiceClient) UpdateTree(ctx context.Context, in *UpdateTreeServiceRequest, opts ...grpc.CallOption) (*tree.TreeEntity, error) {
	out := new(tree.TreeEntity)
	err := c.cc.Invoke(ctx, "/treeservice.TreeService/UpdateTree", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TreeServiceServer is the server API for TreeService service.
type TreeServiceServer interface {
	// Creates a new Tree
	CreateTree(context.Context, *CreateTreeServiceRequest) (*tree.TreeEntity, error)
	// Delete a Tree
	DeleteTree(context.Context, *DeleteTreeServiceRequest) (*empty.Empty, error)
	// The Get method takes zero or more parameters, and returns a TreeEntity which contains a Tree
	GetTree(context.Context, *GetTreeServiceRequest) (*tree.TreeEntity, error)
	// The List method takes zero or more parameters as input, and returns a TreeCollection of TreeEntity that match the input parameters.
	ListTrees(context.Context, *ListTreeServiceRequest) (*tree.TreeCollection, error)
	// Updates a Tree, partial updates are supported
	UpdateTree(context.Context, *UpdateTreeServiceRequest) (*tree.TreeEntity, error)
}

// UnimplementedTreeServiceServer can be embedded to have forward compatible implementations.
type UnimplementedTreeServiceServer struct {
}

func (*UnimplementedTreeServiceServer) CreateTree(ctx context.Context, req *CreateTreeServiceRequest) (*tree.TreeEntity, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTree not implemented")
}
func (*UnimplementedTreeServiceServer) DeleteTree(ctx context.Context, req *DeleteTreeServiceRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTree not implemented")
}
func (*UnimplementedTreeServiceServer) GetTree(ctx context.Context, req *GetTreeServiceRequest) (*tree.TreeEntity, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTree not implemented")
}
func (*UnimplementedTreeServiceServer) ListTrees(ctx context.Context, req *ListTreeServiceRequest) (*tree.TreeCollection, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTrees not implemented")
}
func (*UnimplementedTreeServiceServer) UpdateTree(ctx context.Context, req *UpdateTreeServiceRequest) (*tree.TreeEntity, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTree not implemented")
}

func RegisterTreeServiceServer(s *grpc.Server, srv TreeServiceServer) {
	s.RegisterService(&_TreeService_serviceDesc, srv)
}

func _TreeService_CreateTree_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTreeServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TreeServiceServer).CreateTree(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/treeservice.TreeService/CreateTree",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TreeServiceServer).CreateTree(ctx, req.(*CreateTreeServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TreeService_DeleteTree_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTreeServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TreeServiceServer).DeleteTree(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/treeservice.TreeService/DeleteTree",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TreeServiceServer).DeleteTree(ctx, req.(*DeleteTreeServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TreeService_GetTree_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTreeServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TreeServiceServer).GetTree(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/treeservice.TreeService/GetTree",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TreeServiceServer).GetTree(ctx, req.(*GetTreeServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TreeService_ListTrees_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTreeServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TreeServiceServer).ListTrees(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/treeservice.TreeService/ListTrees",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TreeServiceServer).ListTrees(ctx, req.(*ListTreeServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TreeService_UpdateTree_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTreeServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TreeServiceServer).UpdateTree(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/treeservice.TreeService/UpdateTree",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TreeServiceServer).UpdateTree(ctx, req.(*UpdateTreeServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _TreeService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "treeservice.TreeService",
	HandlerType: (*TreeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTree",
			Handler:    _TreeService_CreateTree_Handler,
		},
		{
			MethodName: "DeleteTree",
			Handler:    _TreeService_DeleteTree_Handler,
		},
		{
			MethodName: "GetTree",
			Handler:    _TreeService_GetTree_Handler,
		},
		{
			MethodName: "ListTrees",
			Handler:    _TreeService_ListTrees_Handler,
		},
		{
			MethodName: "UpdateTree",
			Handler:    _TreeService_UpdateTree_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "treeservice/service.proto",
}
