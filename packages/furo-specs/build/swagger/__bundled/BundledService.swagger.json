{
  "swagger": "2.0",
  "info": {
    "title": "__bundled/BundledService.proto",
    "version": "version not set"
  },
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/api/auth": {
      "delete": {
        "summary": "Logout ala delete a auth session",
        "operationId": "BundledService_Logout",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "tags": [
          "BundledService"
        ]
      }
    },
    "/api/auths": {
      "get": {
        "summary": "The List method takes zero or more parameters as input, and returns a AuthCollection of AuthEntity that match the input parameters.",
        "operationId": "BundledService_ListAuths",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/authAuthCollection"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "q",
            "description": "Query term to search a auth.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "BundledService"
        ]
      },
      "post": {
        "summary": "Creates a new Auth",
        "operationId": "BundledService_CreateAuth",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/authAuthEntity"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/authAuth"
            }
          }
        ],
        "tags": [
          "BundledService"
        ]
      }
    },
    "/api/auths/{uid}": {
      "get": {
        "summary": "The Get method takes zero or more parameters, and returns a AuthEntity which contains a Auth",
        "operationId": "BundledService_GetAuth",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/authAuthEntity"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "uid",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "BundledService"
        ]
      },
      "patch": {
        "summary": "Updates a Auth, partial updates are supported",
        "operationId": "BundledService_UpdateAuth",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/authAuthEntity"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "uid",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/authAuth"
            }
          }
        ],
        "tags": [
          "BundledService"
        ]
      }
    },
    "/api/members": {
      "get": {
        "summary": "Get a collection with PersonEntities",
        "operationId": "BundledService_ListMembers",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/personPersonCollection"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "q",
            "description": "Query term to search a member.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "BundledService"
        ]
      }
    },
    "/api/projects/{prj}/members/{prs}:unsubscribe": {
      "post": {
        "summary": "Custom method to unsubscribe a member, complete PersonEntity is expected",
        "operationId": "BundledService_UnsubscribeProjectMembersService",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/personPersonCollection"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "prj",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "prs",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/personPersonEntity"
            }
          }
        ],
        "tags": [
          "BundledService"
        ]
      }
    },
    "/mockdata/experiments": {
      "get": {
        "summary": "The List method takes zero or more parameters as input, and returns a ExperimentCollection of ExperimentEntity that match the input parameters.",
        "operationId": "BundledService_ListExperiments",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/experimentExperimentCollection"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "q",
            "description": "Query term to search a experiment.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "BundledService"
        ]
      },
      "post": {
        "summary": "Creates a new Experiment",
        "operationId": "BundledService_CreateExperiment",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/experimentExperimentEntity"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/experimentExperiment"
            }
          }
        ],
        "tags": [
          "BundledService"
        ]
      }
    },
    "/mockdata/experiments/1:release": {
      "post": {
        "summary": "Releases experiment",
        "operationId": "BundledService_ReleaseExperiment",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/experimentExperimentEntity"
            }
          }
        ],
        "tags": [
          "BundledService"
        ]
      }
    },
    "/mockdata/experiments/{exp}": {
      "delete": {
        "summary": "Delete a Experiment",
        "operationId": "BundledService_DeleteExperiment",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "exp",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "BundledService"
        ]
      },
      "patch": {
        "summary": "Updates a Experiment, partial updates are supported",
        "operationId": "BundledService_UpdateExperiment",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/experimentExperimentEntity"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "exp",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/experimentExperiment"
            }
          }
        ],
        "tags": [
          "BundledService"
        ]
      }
    },
    "/mockdata/experiments/{exp}/get.json": {
      "get": {
        "summary": "The Get method takes zero or more parameters, and returns a ExperimentEntity which contains a Experiment",
        "operationId": "BundledService_GetExperiment",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/experimentExperimentEntity"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "exp",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "BundledService"
        ]
      }
    },
    "/mockdata/persons/create.json": {
      "get": {
        "summary": "Creates a new Person",
        "operationId": "BundledService_CreatePerson",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/personPersonEntity"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "data.display_name",
            "description": "Localized String representation of a person.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "data.first_name",
            "description": "First name of a person.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "data.id",
            "description": "Identity of a person.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "data.name",
            "description": "Name of a person.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "data.phone_nr",
            "description": "Internal phone number.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "data.skills",
            "description": "List of main skills of a person.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "data.update_mask.paths",
            "description": "The implementation of any API method which has a FieldMask type field in the request should verify the included field paths, and return an `INVALID_ARGUMENT` error if any path is duplicated or unmappable.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "BundledService"
        ]
      }
    },
    "/mockdata/persons/list.json": {
      "get": {
        "summary": "The List method takes zero or more parameters as input, and returns a PersonCollection of PersonEntity that match the input parameters.",
        "operationId": "BundledService_ListPersons",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/personPersonCollection"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "q",
            "description": "Query term to search a person.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "BundledService"
        ]
      }
    },
    "/mockdata/persons/{prs}/delete.json": {
      "get": {
        "summary": "Delete a Person",
        "operationId": "BundledService_DeletePerson",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "prs",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "BundledService"
        ]
      }
    },
    "/mockdata/persons/{prs}/get.json": {
      "get": {
        "summary": "The Get method takes zero or more parameters, and returns a PersonEntity which contains a Person",
        "operationId": "BundledService_GetPerson",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/personPersonEntity"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "prs",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "BundledService"
        ]
      }
    },
    "/mockdata/persons/{prs}/update.json": {
      "patch": {
        "summary": "Updates a Person, partial updates are supported",
        "operationId": "BundledService_UpdatePerson",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/personPersonEntity"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "prs",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/personPerson"
            }
          }
        ],
        "tags": [
          "BundledService"
        ]
      }
    },
    "/mockdata/projects/create.json": {
      "get": {
        "summary": "Creates a new Project",
        "operationId": "BundledService_CreateProject",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/projectProjectEntity"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "data.cost_limit.currency_code",
            "description": "The 3-letter currency code defined in ISO 4217.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "data.cost_limit.display_name",
            "description": "String representation of money entity.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "data.cost_limit.nanos",
            "description": "Number of nano (10^-9) units of the amount. For example $-1.75 is represented as `units`=-1 and `nanos`=-750,000,000.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "data.cost_limit.units",
            "description": "The whole units of the amount.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "data.description",
            "description": "Short project description.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "data.display_name",
            "description": "Localized String representation of a project.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "data.end.day",
            "description": "Day of month. Must be from 1 to 31 and valid for the year and month, or 0. if specifying a year by itself or a year and month where the day is not significant.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "data.end.display_name",
            "description": "Localized String representation of date.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "data.end.month",
            "description": "Month of year. Must be from 1 to 12, or 0 if specifying a year without a month and day.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "data.end.year",
            "description": "Year of date. Must be from 1 to 9999, or 0 if specifying a date without a year.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "data.id",
            "description": "Identity of a project.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "data.start.day",
            "description": "Day of month. Must be from 1 to 31 and valid for the year and month, or 0. if specifying a year by itself or a year and month where the day is not significant.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "data.start.display_name",
            "description": "Localized String representation of date.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "data.start.month",
            "description": "Month of year. Must be from 1 to 12, or 0 if specifying a year without a month and day.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "data.start.year",
            "description": "Year of date. Must be from 1 to 9999, or 0 if specifying a date without a year.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "data.update_mask.paths",
            "description": "The implementation of any API method which has a FieldMask type field in the request should verify the included field paths, and return an `INVALID_ARGUMENT` error if any path is duplicated or unmappable.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "BundledService"
        ]
      }
    },
    "/mockdata/projects/filter/get.json": {
      "get": {
        "summary": "The Get method takes zero or more parameters, and returns a ProjectfilterEntity which contains a Projectfilter",
        "operationId": "BundledService_GetProjectfilter",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/projectfilterProjectfilterEntity"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "tags": [
          "BundledService"
        ]
      }
    },
    "/mockdata/projects/list.json": {
      "get": {
        "summary": "The List method takes zero or more parameters as input, and returns a ProjectCollection of ProjectEntity that match the input parameters.",
        "operationId": "BundledService_ListProjects",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/projectProjectCollection"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "q",
            "description": "Query term to search a project.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "BundledService"
        ]
      }
    },
    "/mockdata/projects/{prj}/delete.json": {
      "get": {
        "summary": "Delete a Project",
        "operationId": "BundledService_DeleteProject",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "prj",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "BundledService"
        ]
      }
    },
    "/mockdata/projects/{prj}/get.json": {
      "get": {
        "summary": "The Get method takes zero or more parameters, and returns a ProjectEntity which contains a Project",
        "operationId": "BundledService_GetProject",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/projectProjectEntity"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "prj",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "BundledService"
        ]
      }
    },
    "/mockdata/projects/{prj}/update.json": {
      "get": {
        "summary": "Updates a Project, partial updates are supported",
        "operationId": "BundledService_UpdateProject",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/projectProjectEntity"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "prj",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "data.cost_limit.currency_code",
            "description": "The 3-letter currency code defined in ISO 4217.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "data.cost_limit.display_name",
            "description": "String representation of money entity.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "data.cost_limit.nanos",
            "description": "Number of nano (10^-9) units of the amount. For example $-1.75 is represented as `units`=-1 and `nanos`=-750,000,000.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "data.cost_limit.units",
            "description": "The whole units of the amount.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "data.description",
            "description": "Short project description.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "data.display_name",
            "description": "Localized String representation of a project.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "data.end.day",
            "description": "Day of month. Must be from 1 to 31 and valid for the year and month, or 0. if specifying a year by itself or a year and month where the day is not significant.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "data.end.display_name",
            "description": "Localized String representation of date.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "data.end.month",
            "description": "Month of year. Must be from 1 to 12, or 0 if specifying a year without a month and day.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "data.end.year",
            "description": "Year of date. Must be from 1 to 9999, or 0 if specifying a date without a year.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "data.id",
            "description": "Identity of a project.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "data.start.day",
            "description": "Day of month. Must be from 1 to 31 and valid for the year and month, or 0. if specifying a year by itself or a year and month where the day is not significant.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "data.start.display_name",
            "description": "Localized String representation of date.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "data.start.month",
            "description": "Month of year. Must be from 1 to 12, or 0 if specifying a year without a month and day.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "data.start.year",
            "description": "Year of date. Must be from 1 to 9999, or 0 if specifying a date without a year.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "data.update_mask.paths",
            "description": "The implementation of any API method which has a FieldMask type field in the request should verify the included field paths, and return an `INVALID_ARGUMENT` error if any path is duplicated or unmappable.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "BundledService"
        ]
      }
    },
    "/mockdata/tasks/create.json": {
      "get": {
        "summary": "Creates a new Task",
        "operationId": "BundledService_CreateTask",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/taskTaskEntity"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "data.description",
            "description": "Short task description.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "data.display_name",
            "description": "Localized String representation of a task.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "data.estimated_time",
            "description": "Estimated time in days.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "data.id",
            "description": "Identity of a task.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "data.owner.display_name",
            "description": "String representation of the reference.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "data.owner.id",
            "description": "Id of the reference.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "data.owner.link.href",
            "description": "link.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "data.owner.link.method",
            "description": "method of curl.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "data.owner.link.rel",
            "description": "the relationship.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "data.owner.link.service",
            "description": "name of the service which can handle this link.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "data.owner.link.type",
            "description": "mime type.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "BundledService"
        ]
      }
    },
    "/mockdata/tasks/list.json": {
      "get": {
        "summary": "The List method takes zero or more parameters as input, and returns a TaskCollection of TaskEntity that match the input parameters.",
        "operationId": "BundledService_ListTasks",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/taskTaskCollection"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "fields",
            "description": "Partial representation (comma separated list of field names), ?fields=.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter",
            "description": "The response message will be filtered by the fields before being sent back to the client, filter=[[\u0026#39;id\u0026#39;,\u0026#39;eq\u0026#39;,\u0026#39;1\u0026#39;]].",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "order_by",
            "description": "Specifies the result ordering for List requests. The default sorting order is ascending, ?order_by=foo desc,bar.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "page_size",
            "description": "Use this field to specify the maximum number of results to be returned by the server. \n   //The server may further constrain the maximum number of results returned in a single page. \n   //If the page_size is 0, the server will decide the number of results to be returned. page_size=15.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "q",
            "description": "Query term to search a {{.name}}.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "view",
            "description": "allows the client to specify which view of the resource it wants to receive in the response. view=BASIC.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "BundledService"
        ]
      }
    },
    "/mockdata/tasks/{tsk}/delete.json": {
      "get": {
        "summary": "Delete a Task",
        "operationId": "BundledService_DeleteTask",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "tsk",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "BundledService"
        ]
      }
    },
    "/mockdata/tasks/{tsk}/get.json": {
      "get": {
        "summary": "The Get method takes zero or more parameters, and returns a TaskEntity which contains a Task",
        "operationId": "BundledService_GetTask",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/taskTaskEntity"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "tsk",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "BundledService"
        ]
      }
    },
    "/mockdata/tasks/{tsk}/update.json": {
      "get": {
        "summary": "Updates a Task, partial updates are not supported",
        "operationId": "BundledService_UpdateTask",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/taskTaskEntity"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "tsk",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "data.description",
            "description": "Short task description.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "data.display_name",
            "description": "Localized String representation of a task.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "data.estimated_time",
            "description": "Estimated time in days.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "data.id",
            "description": "Identity of a task.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "data.owner.display_name",
            "description": "String representation of the reference.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "data.owner.id",
            "description": "Id of the reference.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "data.owner.link.href",
            "description": "link.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "data.owner.link.method",
            "description": "method of curl.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "data.owner.link.rel",
            "description": "the relationship.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "data.owner.link.service",
            "description": "name of the service which can handle this link.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "data.owner.link.type",
            "description": "mime type.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "BundledService"
        ]
      }
    },
    "/mockdata/trees": {
      "get": {
        "summary": "The List method takes zero or more parameters as input, and returns a TreeCollection of TreeEntity that match the input parameters.",
        "operationId": "BundledService_ListTrees",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/treeTreeCollection"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "q",
            "description": "Query term to search a tree.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "BundledService"
        ]
      },
      "post": {
        "summary": "Creates a new Tree",
        "operationId": "BundledService_CreateTree",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/treeTreeEntity"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/treeTree"
            }
          }
        ],
        "tags": [
          "BundledService"
        ]
      }
    },
    "/mockdata/trees/{tre}": {
      "delete": {
        "summary": "Delete a Tree",
        "operationId": "BundledService_DeleteTree",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "tre",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "BundledService"
        ]
      },
      "patch": {
        "summary": "Updates a Tree, partial updates are supported",
        "operationId": "BundledService_UpdateTree",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/treeTreeEntity"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "tre",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/treeTree"
            }
          }
        ],
        "tags": [
          "BundledService"
        ]
      }
    },
    "/mockdata/trees/{tre}/get.json": {
      "get": {
        "summary": "The Get method takes zero or more parameters, and returns a TreeEntity which contains a Tree",
        "operationId": "BundledService_GetTree",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/treeTreeEntity"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "tre",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "BundledService"
        ]
      }
    }
  },
  "definitions": {
    "authAuth": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "Identity of Auth"
        },
        "password": {
          "type": "string",
          "title": "Das _neue_ Kennwort des Benutzers"
        },
        "role": {
          "type": "string"
        },
        "username": {
          "type": "string",
          "title": "The unique username, ussualy an email address"
        }
      },
      "title": "autogenerated"
    },
    "authAuthCollection": {
      "type": "object",
      "properties": {
        "entities": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/authAuthEntity"
          },
          "title": "Contains a auth.AuthEntity repeated"
        },
        "links": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/furoLink"
          },
          "title": "Hateoas links"
        },
        "meta": {
          "$ref": "#/definitions/furoMeta",
          "title": "Meta for the response"
        }
      },
      "title": "AuthCollection with repeated AuthEntity"
    },
    "authAuthEntity": {
      "type": "object",
      "properties": {
        "data": {
          "$ref": "#/definitions/authAuth",
          "title": "contains a auth.Auth"
        },
        "links": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/furoLink"
          },
          "title": "Hateoas links"
        },
        "meta": {
          "$ref": "#/definitions/furoMeta",
          "title": "Meta for the response"
        }
      },
      "title": "AuthEntity with Auth"
    },
    "experimentExperiment": {
      "type": "object",
      "properties": {
        "description": {
          "type": "string",
          "title": "Short experiment description"
        },
        "display_name": {
          "type": "string",
          "title": "Localized String representation of a experiment"
        },
        "furo_data_bool_icon": {
          "type": "boolean",
          "format": "boolean",
          "title": "field for furo-data-bool-icon for testing"
        },
        "furo_data_checkbox_input": {
          "type": "boolean",
          "format": "boolean",
          "title": "field for furo_data_checkbox_input for testing"
        },
        "furo_data_color_input": {
          "type": "string",
          "title": "field for furo-data-color-input for testing"
        },
        "furo_data_date_input": {
          "type": "string",
          "title": "field for furo-data-date-input for testing"
        },
        "furo_data_date_input_google": {
          "$ref": "#/definitions/typeDate",
          "title": "field for furo-data-date-input for testing"
        },
        "furo_data_file_input": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "field for testing file type"
        },
        "furo_data_money_input": {
          "$ref": "#/definitions/typeMoney",
          "title": "field for testing money type"
        },
        "furo_data_number_input": {
          "type": "number",
          "format": "float",
          "title": "field for furo-data-number-input for testing"
        },
        "furo_data_password_input": {
          "type": "string",
          "title": "field for furo-data-password-input for testing"
        },
        "furo_data_range_input": {
          "type": "string",
          "title": "field for furo-data-range-input for testing"
        },
        "furo_data_search_input": {
          "type": "string",
          "title": "field for furo-search-input for testing"
        },
        "furo_data_text_input": {
          "type": "string",
          "title": "field for furo_data_text_input for testing"
        },
        "furo_data_textarea_input": {
          "type": "string",
          "title": "field for furo_data_textarea_input for testing"
        },
        "furo_data_time_input": {
          "type": "string",
          "title": "field for furo-data-time-input for testing"
        },
        "id": {
          "type": "string",
          "title": "Identity of a experiment"
        },
        "repstring": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "repeated string"
        },
        "single_type_property": {
          "$ref": "#/definitions/furoProperty",
          "title": "field for testing property"
        },
        "the_any_type": {
          "$ref": "#/definitions/protobufAny",
          "title": "field for testing any"
        },
        "type_property": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/furoProperty"
          },
          "title": "field for testing property"
        },
        "type_with_options": {
          "type": "string",
          "title": "field for testing static options"
        },
        "update_mask": {
          "$ref": "#/definitions/protobufFieldMask",
          "title": "Contains a field_mask which fields of the targeted resource are going to be updated"
        }
      },
      "title": "experiment spec for testing"
    },
    "experimentExperimentCollection": {
      "type": "object",
      "properties": {
        "entities": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/experimentExperimentEntity"
          },
          "title": "Contains a experiment.ExperimentEntity repeated"
        },
        "links": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/furoLink"
          },
          "title": "Hateoas links"
        },
        "meta": {
          "$ref": "#/definitions/furoMeta",
          "title": "Meta for the response"
        }
      },
      "title": "ExperimentCollection with repeated ExperimentEntity"
    },
    "experimentExperimentEntity": {
      "type": "object",
      "properties": {
        "data": {
          "$ref": "#/definitions/experimentExperiment",
          "title": "contains a experiment.Experiment"
        },
        "links": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/furoLink"
          },
          "title": "Hateoas links"
        },
        "meta": {
          "$ref": "#/definitions/furoMeta",
          "title": "Meta for the response"
        }
      },
      "title": "ExperimentEntity with Experiment"
    },
    "furoFieldConstraint": {
      "type": "object",
      "properties": {
        "is": {
          "type": "string",
          "title": "the constraint value as string, even it is a number"
        },
        "message": {
          "type": "string",
          "title": "The message to display on constraint violation"
        }
      },
      "title": "a single fieldconstraint"
    },
    "furoFieldMeta": {
      "type": "object",
      "properties": {
        "default": {
          "type": "string",
          "title": "The default value as JSON string"
        },
        "hint": {
          "type": "string",
          "title": "A hint"
        },
        "label": {
          "type": "string",
          "title": "The label"
        },
        "options": {
          "$ref": "#/definitions/furoFieldoption",
          "title": "Fieldoptions"
        },
        "readonly": {
          "type": "boolean",
          "format": "boolean",
          "title": "readonly"
        },
        "repeated": {
          "type": "boolean",
          "format": "boolean",
          "title": "repeated"
        },
        "typespecific": {
          "$ref": "#/definitions/protobufAny",
          "title": "Put in type specific metas for your fields here"
        }
      },
      "title": "Metas for a field"
    },
    "furoFieldoption": {
      "type": "object",
      "properties": {
        "flags": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Add flags for your field. This can be something like \u0026#34;searchable\u0026#34;. \n//The flags can be used by generators, ui components,..."
        },
        "list": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/protobufAny"
          },
          "title": "a list with options, use furo.optionitem or your own"
        }
      },
      "title": "Metas for a field"
    },
    "furoLink": {
      "type": "object",
      "properties": {
        "href": {
          "type": "string",
          "title": "link"
        },
        "method": {
          "type": "string",
          "title": "method of curl"
        },
        "rel": {
          "type": "string",
          "title": "the relationship"
        },
        "service": {
          "type": "string",
          "title": "name of the service which can handle this link"
        },
        "type": {
          "type": "string",
          "title": "mime type"
        }
      },
      "title": "link"
    },
    "furoMeta": {
      "type": "object",
      "properties": {
        "fields": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/furoMetaField"
          },
          "title": "fields of meta info"
        }
      },
      "title": "meta info"
    },
    "furoMetaField": {
      "type": "object",
      "properties": {
        "constraints": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/furoFieldConstraint"
          },
          "title": "constraints for a field"
        },
        "meta": {
          "$ref": "#/definitions/furoFieldMeta",
          "title": "meta information of a field"
        }
      },
      "title": "fields of meta info"
    },
    "furoProperty": {
      "type": "object",
      "properties": {
        "code": {
          "type": "string",
          "title": "property code for additional settings"
        },
        "data": {
          "$ref": "#/definitions/protobufAny",
          "title": "data part of the property"
        },
        "display_name": {
          "type": "string",
          "title": "String representation of the property"
        },
        "id": {
          "type": "string",
          "title": "Id of the property"
        },
        "meta": {
          "$ref": "#/definitions/furoMeta",
          "title": "Meta for the response"
        }
      },
      "title": "Type to define property values with type information"
    },
    "furoReference": {
      "type": "object",
      "properties": {
        "display_name": {
          "type": "string",
          "title": "String representation of the reference"
        },
        "id": {
          "type": "string",
          "title": "Id of the reference"
        },
        "link": {
          "$ref": "#/definitions/furoLink",
          "title": "Hateoas link"
        }
      },
      "title": "reference"
    },
    "personPerson": {
      "type": "object",
      "properties": {
        "display_name": {
          "type": "string",
          "title": "Localized String representation of a person"
        },
        "first_name": {
          "type": "string",
          "title": "First name of a person"
        },
        "id": {
          "type": "string",
          "title": "Identity of a person"
        },
        "name": {
          "type": "string",
          "title": "Name of a person"
        },
        "phone_nr": {
          "type": "string",
          "title": "Internal phone number"
        },
        "skills": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "List of main skills of a person"
        },
        "update_mask": {
          "$ref": "#/definitions/protobufFieldMask",
          "title": "Contains a field_mask which fields of the targeted resource are going to be updated"
        }
      },
      "title": "Person message type"
    },
    "personPersonCollection": {
      "type": "object",
      "properties": {
        "entities": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/personPersonEntity"
          },
          "title": "Contains a person.PersonEntity repeated"
        },
        "links": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/furoLink"
          },
          "title": "Hateoas links"
        },
        "meta": {
          "$ref": "#/definitions/furoMeta",
          "title": "Meta for the response"
        }
      },
      "title": "PersonCollection with repeated PersonEntity"
    },
    "personPersonEntity": {
      "type": "object",
      "properties": {
        "data": {
          "$ref": "#/definitions/personPerson",
          "title": "contains a person.Person"
        },
        "links": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/furoLink"
          },
          "title": "Hateoas links"
        },
        "meta": {
          "$ref": "#/definitions/furoMeta",
          "title": "Meta for the response"
        }
      },
      "title": "PersonEntity with Person"
    },
    "projectProject": {
      "type": "object",
      "properties": {
        "cost_limit": {
          "$ref": "#/definitions/typeMoney",
          "title": "Project cost limit"
        },
        "description": {
          "type": "string",
          "title": "Short project description"
        },
        "display_name": {
          "type": "string",
          "title": "Localized String representation of a project"
        },
        "end": {
          "$ref": "#/definitions/typeDate",
          "title": "Prospective end date of the project"
        },
        "id": {
          "type": "string",
          "title": "Identity of a project"
        },
        "members": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/personPerson"
          },
          "title": "List of project members"
        },
        "start": {
          "$ref": "#/definitions/typeDate",
          "title": "Start date of the project"
        },
        "update_mask": {
          "$ref": "#/definitions/protobufFieldMask",
          "title": "Contains a field_mask which fields of the targeted resource are going to be updated"
        }
      },
      "title": "Project description"
    },
    "projectProjectCollection": {
      "type": "object",
      "properties": {
        "entities": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/projectProjectEntity"
          },
          "title": "Contains a project.ProjectEntity repeated"
        },
        "links": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/furoLink"
          },
          "title": "Hateoas links"
        },
        "meta": {
          "$ref": "#/definitions/furoMeta",
          "title": "Meta for the response"
        }
      },
      "title": "ProjectCollection with repeated ProjectEntity"
    },
    "projectProjectEntity": {
      "type": "object",
      "properties": {
        "data": {
          "$ref": "#/definitions/projectProject",
          "title": "contains a project.Project"
        },
        "links": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/furoLink"
          },
          "title": "Hateoas links"
        },
        "meta": {
          "$ref": "#/definitions/furoMeta",
          "title": "Meta for the response"
        }
      },
      "title": "ProjectEntity with Project"
    },
    "projectfilterProjectfilter": {
      "type": "object",
      "properties": {
        "cost_limit": {
          "$ref": "#/definitions/typeMoney",
          "title": "Project cost limit"
        },
        "description": {
          "type": "string",
          "title": "Filter preset for field description from resource projects"
        },
        "end": {
          "$ref": "#/definitions/typeDate",
          "title": "Prospective end date of the project"
        },
        "members": {
          "$ref": "#/definitions/furoReference",
          "title": "List of possible project members"
        },
        "start": {
          "$ref": "#/definitions/typeDate",
          "title": "Start date of the project"
        }
      },
      "title": "Options for possible filter values"
    },
    "projectfilterProjectfilterEntity": {
      "type": "object",
      "properties": {
        "data": {
          "$ref": "#/definitions/projectfilterProjectfilter",
          "title": "contains a projectfilter.Projectfilter"
        },
        "links": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/furoLink"
          },
          "title": "Hateoas links"
        },
        "meta": {
          "$ref": "#/definitions/furoMeta",
          "title": "Meta for the response"
        }
      },
      "title": "ProjectfilterEntity with Projectfilter"
    },
    "protobufAny": {
      "type": "object",
      "properties": {
        "type_url": {
          "type": "string"
        },
        "value": {
          "type": "string",
          "format": "byte"
        }
      },
      "title": "Any contains an arbitrary serialized protocol buffer message along with a\n// URL that describes the type of the serialized message. client uses type `ArrayBuffer` for the value field .  https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/any.proto"
    },
    "protobufFieldMask": {
      "type": "object",
      "properties": {
        "paths": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The implementation of any API method which has a FieldMask type field in the request should verify the included field paths, and return an `INVALID_ARGUMENT` error if any path is duplicated or unmappable."
        }
      },
      "title": "A field mask in update operations specifies which fields of the targeted resource are going to be updated. https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto"
    },
    "runtimeError": {
      "type": "object",
      "properties": {
        "error": {
          "type": "string"
        },
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "details": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/protobufAny"
          }
        }
      }
    },
    "taskTask": {
      "type": "object",
      "properties": {
        "description": {
          "type": "string",
          "title": "Short task description"
        },
        "display_name": {
          "type": "string",
          "title": "Localized String representation of a task"
        },
        "estimated_time": {
          "type": "integer",
          "format": "int32",
          "title": "Estimated time in days"
        },
        "id": {
          "type": "string",
          "title": "Identity of a task"
        },
        "owner": {
          "$ref": "#/definitions/furoReference",
          "title": "Owner of a task"
        },
        "subtasks": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/taskTask"
          },
          "title": "List of subtasks"
        }
      },
      "title": "Task data description"
    },
    "taskTaskCollection": {
      "type": "object",
      "properties": {
        "entities": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/taskTaskEntity"
          },
          "title": "Contains a task.TaskEntity repeated"
        },
        "links": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/furoLink"
          },
          "title": "Hateoas links"
        },
        "meta": {
          "$ref": "#/definitions/furoMeta",
          "title": "Meta for the response"
        }
      },
      "title": "TaskCollection with repeated TaskEntity"
    },
    "taskTaskEntity": {
      "type": "object",
      "properties": {
        "data": {
          "$ref": "#/definitions/taskTask",
          "title": "contains a task.Task"
        },
        "links": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/furoLink"
          },
          "title": "Hateoas links"
        },
        "meta": {
          "$ref": "#/definitions/furoMeta",
          "title": "Meta for the response"
        }
      },
      "title": "TaskEntity with Task"
    },
    "treeNavigationnode": {
      "type": "object",
      "properties": {
        "children": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/treeNavigationnode"
          },
          "title": "Children of this node"
        },
        "description": {
          "type": "string",
          "title": "description of the node"
        },
        "display_name": {
          "type": "string",
          "title": "String representation of the node"
        },
        "has_error": {
          "type": "boolean",
          "format": "boolean",
          "title": "if node has error"
        },
        "icon": {
          "type": "string",
          "title": "icon of the node"
        },
        "id": {
          "type": "string",
          "title": "Id of the node"
        },
        "is_group_label": {
          "type": "boolean",
          "format": "boolean",
          "title": "This node is a group label"
        },
        "key_words": {
          "type": "string",
          "title": "key words of the node"
        },
        "link": {
          "$ref": "#/definitions/furoLink",
          "title": "Deeplink information of this node"
        },
        "open": {
          "type": "boolean",
          "format": "boolean",
          "title": "node is open or not"
        },
        "panel": {
          "type": "string",
          "title": "Which panel (i.e. view, edit, display) opens the node type (which is defined in property link)"
        },
        "secondary_text": {
          "type": "string",
          "title": "Secondary text of the node"
        }
      },
      "title": "Item of the navigationtree"
    },
    "treeTree": {
      "type": "object",
      "properties": {
        "description": {
          "type": "string",
          "title": "description of the tree"
        },
        "display_name": {
          "type": "string",
          "title": "String representation of the tree"
        },
        "id": {
          "type": "string",
          "title": "Id of the tree"
        },
        "root": {
          "$ref": "#/definitions/treeNavigationnode",
          "title": "Rootnode of the tree"
        },
        "secondary_text": {
          "type": "string",
          "title": "Secondary text of the node"
        }
      },
      "title": "Navigation tree type with recursive navigation nodes"
    },
    "treeTreeCollection": {
      "type": "object",
      "properties": {
        "entities": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/treeTreeEntity"
          },
          "title": "Contains a tree.TreeEntity repeated"
        },
        "links": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/furoLink"
          },
          "title": "Hateoas links"
        },
        "meta": {
          "$ref": "#/definitions/furoMeta",
          "title": "Meta for the response"
        }
      },
      "title": "TreeCollection with repeated TreeEntity"
    },
    "treeTreeEntity": {
      "type": "object",
      "properties": {
        "data": {
          "$ref": "#/definitions/treeTree",
          "title": "contains a tree.Tree"
        },
        "links": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/furoLink"
          },
          "title": "Hateoas links"
        },
        "meta": {
          "$ref": "#/definitions/furoMeta",
          "title": "Meta for the response"
        }
      },
      "title": "TreeEntity with Tree"
    },
    "typeDate": {
      "type": "object",
      "properties": {
        "day": {
          "type": "integer",
          "format": "int32",
          "description": "Day of month. Must be from 1 to 31 and valid for the year and month, or 0. if specifying a year by itself or a year and month where the day is not significant."
        },
        "display_name": {
          "type": "string",
          "title": "Localized String representation of date"
        },
        "month": {
          "type": "integer",
          "format": "int32",
          "description": "Month of year. Must be from 1 to 12, or 0 if specifying a year without a month and day."
        },
        "year": {
          "type": "integer",
          "format": "int32",
          "description": "Year of date. Must be from 1 to 9999, or 0 if specifying a date without a year."
        }
      },
      "title": "Date, https://github.com/googleapis/googleapis/blob/master/google/date.proto"
    },
    "typeMoney": {
      "type": "object",
      "properties": {
        "currency_code": {
          "type": "string",
          "description": "The 3-letter currency code defined in ISO 4217."
        },
        "display_name": {
          "type": "string",
          "title": "String representation of money entity"
        },
        "nanos": {
          "type": "string",
          "format": "int64",
          "description": "Number of nano (10^-9) units of the amount. For example $-1.75 is represented as `units`=-1 and `nanos`=-750,000,000."
        },
        "units": {
          "type": "string",
          "format": "int64",
          "description": "The whole units of the amount."
        }
      },
      "title": "Represents an amount of money with its currency type. https://github.com/googleapis/googleapis/blob/master/google/money.proto"
    }
  }
}
