{
  "swagger": "2.0",
  "info": {
    "title": "services.proto",
    "version": "version not set"
  },
  "schemes": [
    "http",
    "https"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/api/members": {
      "get": {
        "summary": "Get a collection with PersonEntities",
        "operationId": "ListProjectMembersService",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/bundledPersonCollection"
            }
          }
        },
        "parameters": [
          {
            "name": "fields",
            "description": "Partielle Repräsentation fields=id,name // 10.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "sort",
            "description": "Sortierung nach feldern\n**?filter=-completed** um completed absteigend zu bekommen\n**?filter=completed** um completed aufsteigend zu bekommen.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter",
            "description": "Filter.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "page",
            "description": "Gewünschte Seite. Tipp: Folge dem HATEOAS next, prev,...",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "limit",
            "description": "Anzahl Elemente pro Seite, maximal sind 99 erlaubt.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "count",
            "description": "Meta für die Anzahl der Elemente der Resource, bei true ist in der Antwort Meta der count aufgeführt.",
            "in": "query",
            "required": false,
            "type": "boolean",
            "format": "boolean"
          },
          {
            "name": "sum",
            "description": "not implemented.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "view",
            "description": "not implemented (ehemals context).",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "q",
            "description": "Query term to search a member.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "ProjectMembersService"
        ]
      }
    },
    "/api/members/{prs}:unsubscribe": {
      "post": {
        "summary": "Custom method to unsubscribe a member, complete PersonEntity is expected",
        "operationId": "UnsubscribeProjectMembersService",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/bundledPersonCollection"
            }
          }
        },
        "parameters": [
          {
            "name": "prs",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/bundledPersonEntity"
            }
          }
        ],
        "tags": [
          "ProjectMembersService"
        ]
      }
    },
    "/api/persons": {
      "get": {
        "summary": "The List method takes zero or more parameters as input, and returns a PersonCollection of PersonEntity that match the input parameters.",
        "operationId": "ListPersonService",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/bundledPersonCollection"
            }
          }
        },
        "parameters": [
          {
            "name": "fields",
            "description": "Partielle Repräsentation fields=id,name // 10.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "sort",
            "description": "Sortierung nach feldern\n**?filter=-completed** um completed absteigend zu bekommen\n**?filter=completed** um completed aufsteigend zu bekommen.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter",
            "description": "Filter.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "page",
            "description": "Gewünschte Seite. Tipp: Folge dem HATEOAS next, prev,...",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "limit",
            "description": "Anzahl Elemente pro Seite, maximal sind 99 erlaubt.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "count",
            "description": "Meta für die Anzahl der Elemente der Resource, bei true ist in der Antwort Meta der count aufgeführt.",
            "in": "query",
            "required": false,
            "type": "boolean",
            "format": "boolean"
          },
          {
            "name": "sum",
            "description": "not implemented.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "view",
            "description": "not implemented (ehemals context).",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "q",
            "description": "Query term to search a person.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "PersonService"
        ]
      },
      "post": {
        "summary": "Creates a new Person",
        "operationId": "CreatePersonService",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/bundledPersonEntity"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/bundledPerson"
            }
          }
        ],
        "tags": [
          "PersonService"
        ]
      }
    },
    "/api/persons/{prs}": {
      "get": {
        "summary": "The Get method takes zero or more parameters, and returns a PersonEntity which contains a Person",
        "operationId": "GetPersonService",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/bundledPersonEntity"
            }
          }
        },
        "parameters": [
          {
            "name": "prs",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "PersonService"
        ]
      },
      "delete": {
        "summary": "Delete a Person",
        "operationId": "DeletePersonService",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/bundledEmpty"
            }
          }
        },
        "parameters": [
          {
            "name": "prs",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "PersonService"
        ]
      },
      "patch": {
        "summary": "Updates a Person, partial updates are supported",
        "operationId": "UpdatePersonService",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/bundledPersonEntity"
            }
          }
        },
        "parameters": [
          {
            "name": "prs",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/bundledPerson"
            }
          }
        ],
        "tags": [
          "PersonService"
        ]
      }
    },
    "/api/projects": {
      "get": {
        "summary": "The List method takes zero or more parameters as input, and returns a ProjectCollection of ProjectEntity that match the input parameters.",
        "operationId": "ListProjectService",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/bundledProjectCollection"
            }
          }
        },
        "parameters": [
          {
            "name": "fields",
            "description": "Partielle Repräsentation fields=id,name // 10.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "sort",
            "description": "Sortierung nach feldern\n**?filter=-completed** um completed absteigend zu bekommen\n**?filter=completed** um completed aufsteigend zu bekommen.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter",
            "description": "Filter.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "page",
            "description": "Gewünschte Seite. Tipp: Folge dem HATEOAS next, prev,...",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "limit",
            "description": "Anzahl Elemente pro Seite, maximal sind 99 erlaubt.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "count",
            "description": "Meta für die Anzahl der Elemente der Resource, bei true ist in der Antwort Meta der count aufgeführt.",
            "in": "query",
            "required": false,
            "type": "boolean",
            "format": "boolean"
          },
          {
            "name": "sum",
            "description": "not implemented.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "view",
            "description": "not implemented (ehemals context).",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "q",
            "description": "Query term to search a project.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "ProjectService"
        ]
      },
      "post": {
        "summary": "Creates a new Project",
        "operationId": "CreateProjectService",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/bundledProjectEntity"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/bundledProject"
            }
          }
        ],
        "tags": [
          "ProjectService"
        ]
      }
    },
    "/api/projects/{var}": {
      "get": {
        "summary": "The Get method takes zero or more parameters, and returns a ProjectEntity which contains a Project",
        "operationId": "GetProjectService",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/bundledProjectEntity"
            }
          }
        },
        "parameters": [
          {
            "name": "var",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "ProjectService"
        ]
      },
      "delete": {
        "summary": "Delete a Project",
        "operationId": "DeleteProjectService",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/bundledEmpty"
            }
          }
        },
        "parameters": [
          {
            "name": "var",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "ProjectService"
        ]
      },
      "patch": {
        "summary": "Updates a Project, partial updates are supported",
        "operationId": "UpdateProjectService",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/bundledProjectEntity"
            }
          }
        },
        "parameters": [
          {
            "name": "var",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/bundledProject"
            }
          }
        ],
        "tags": [
          "ProjectService"
        ]
      }
    },
    "/api/tasks": {
      "get": {
        "summary": "The List method takes zero or more parameters as input, and returns a TaskCollection of TaskEntity that match the input parameters.",
        "operationId": "ListTaskService",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/bundledTaskCollection"
            }
          }
        },
        "parameters": [
          {
            "name": "fields",
            "description": "Partielle Repräsentation fields=id,name // 10.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "sort",
            "description": "Sortierung nach feldern\n**?filter=-completed** um completed absteigend zu bekommen\n**?filter=completed** um completed aufsteigend zu bekommen.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter",
            "description": "Filter.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "page",
            "description": "Gewünschte Seite. Tipp: Folge dem HATEOAS next, prev,...",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "limit",
            "description": "Anzahl Elemente pro Seite, maximal sind 99 erlaubt.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "count",
            "description": "Meta für die Anzahl der Elemente der Resource, bei true ist in der Antwort Meta der count aufgeführt.",
            "in": "query",
            "required": false,
            "type": "boolean",
            "format": "boolean"
          },
          {
            "name": "sum",
            "description": "not implemented.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "view",
            "description": "not implemented (ehemals context).",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "q",
            "description": "Query term to search a task.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "TaskService"
        ]
      },
      "post": {
        "summary": "Creates a new Task",
        "operationId": "CreateTaskService",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/bundledTaskEntity"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/bundledTask"
            }
          }
        ],
        "tags": [
          "TaskService"
        ]
      }
    },
    "/api/tasks/{tsk}": {
      "get": {
        "summary": "The Get method takes zero or more parameters, and returns a TaskEntity which contains a Task",
        "operationId": "GetTaskService",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/bundledTaskEntity"
            }
          }
        },
        "parameters": [
          {
            "name": "tsk",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "TaskService"
        ]
      },
      "delete": {
        "summary": "Delete a Task",
        "operationId": "DeleteTaskService",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/bundledEmpty"
            }
          }
        },
        "parameters": [
          {
            "name": "tsk",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "TaskService"
        ]
      },
      "patch": {
        "summary": "Updates a Task, partial updates are supported",
        "operationId": "UpdateTaskService",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/bundledTaskEntity"
            }
          }
        },
        "parameters": [
          {
            "name": "tsk",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/bundledTask"
            }
          }
        ],
        "tags": [
          "TaskService"
        ]
      }
    },
    "/api/trees": {
      "get": {
        "summary": "The List method takes zero or more parameters as input, and returns a TreeCollection of TreeEntity that match the input parameters.",
        "operationId": "ListTreeService",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/bundledTreeCollection"
            }
          }
        },
        "parameters": [
          {
            "name": "fields",
            "description": "Partielle Repräsentation fields=id,name // 10.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "sort",
            "description": "Sortierung nach feldern\n**?filter=-completed** um completed absteigend zu bekommen\n**?filter=completed** um completed aufsteigend zu bekommen.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter",
            "description": "Filter.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "page",
            "description": "Gewünschte Seite. Tipp: Folge dem HATEOAS next, prev,...",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "limit",
            "description": "Anzahl Elemente pro Seite, maximal sind 99 erlaubt.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "count",
            "description": "Meta für die Anzahl der Elemente der Resource, bei true ist in der Antwort Meta der count aufgeführt.",
            "in": "query",
            "required": false,
            "type": "boolean",
            "format": "boolean"
          },
          {
            "name": "sum",
            "description": "not implemented.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "view",
            "description": "not implemented (ehemals context).",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "q",
            "description": "Query term to search a tree.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "TreeService"
        ]
      },
      "post": {
        "summary": "Creates a new Tree",
        "operationId": "CreateTreeService",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/bundledTreeEntity"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/bundledTree"
            }
          }
        ],
        "tags": [
          "TreeService"
        ]
      }
    },
    "/api/trees/{tre}": {
      "get": {
        "summary": "The Get method takes zero or more parameters, and returns a TreeEntity which contains a Tree",
        "operationId": "GetTreeService",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/bundledTreeEntity"
            }
          }
        },
        "parameters": [
          {
            "name": "tre",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "TreeService"
        ]
      },
      "delete": {
        "summary": "Delete a Tree",
        "operationId": "DeleteTreeService",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/bundledEmpty"
            }
          }
        },
        "parameters": [
          {
            "name": "tre",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "TreeService"
        ]
      },
      "patch": {
        "summary": "Updates a Tree, partial updates are supported",
        "operationId": "UpdateTreeService",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/bundledTreeEntity"
            }
          }
        },
        "parameters": [
          {
            "name": "tre",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/bundledTree"
            }
          }
        ],
        "tags": [
          "TreeService"
        ]
      }
    }
  },
  "definitions": {
    "bundledEmpty": {
      "type": "object"
    },
    "bundledPerson": {
      "type": "object",
      "properties": {
        "display_name": {
          "type": "string",
          "title": "Localized String representation of a person"
        },
        "first_name": {
          "type": "string",
          "title": "First name of a person"
        },
        "name": {
          "type": "string",
          "title": "Name of a person"
        },
        "phone_nr": {
          "type": "string",
          "title": "Internal phone number"
        },
        "skills": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "List of main skills of a person"
        }
      },
      "title": "Person message type"
    },
    "bundledPersonCollection": {
      "type": "object",
      "properties": {
        "entities": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/bundledPersonEntity"
          },
          "title": "Contains a person.PersonEntity repeated"
        },
        "links": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/furoLink"
          },
          "title": "Hateoas links"
        },
        "meta": {
          "$ref": "#/definitions/furoMeta",
          "title": "Meta for the response"
        }
      },
      "title": "PersonCollection with repeated PersonEntity"
    },
    "bundledPersonEntity": {
      "type": "object",
      "properties": {
        "data": {
          "$ref": "#/definitions/bundledPerson",
          "title": "contains a person.Person"
        },
        "links": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/furoLink"
          },
          "title": "Hateoas links"
        },
        "meta": {
          "$ref": "#/definitions/furoMeta",
          "title": "Meta for the response"
        }
      },
      "title": "PersonEntity with Person"
    },
    "bundledProject": {
      "type": "object",
      "properties": {
        "cost_limit": {
          "$ref": "#/definitions/googleMoney",
          "title": "Project cost limit"
        },
        "description": {
          "type": "string",
          "title": "Short project description"
        },
        "display_name": {
          "type": "string",
          "title": "Localized String representation of a project"
        },
        "end": {
          "$ref": "#/definitions/googleDate",
          "title": "Prospective end date of the project"
        },
        "members": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/bundledPerson"
          },
          "title": "List of project members"
        },
        "start": {
          "$ref": "#/definitions/googleDate",
          "title": "Start date of the project"
        }
      },
      "title": "Project description"
    },
    "bundledProjectCollection": {
      "type": "object",
      "properties": {
        "entities": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/bundledProjectEntity"
          },
          "title": "Contains a project.ProjectEntity repeated"
        },
        "links": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/furoLink"
          },
          "title": "Hateoas links"
        },
        "meta": {
          "$ref": "#/definitions/furoMeta",
          "title": "Meta for the response"
        }
      },
      "title": "ProjectCollection with repeated ProjectEntity"
    },
    "bundledProjectEntity": {
      "type": "object",
      "properties": {
        "data": {
          "$ref": "#/definitions/bundledProject",
          "title": "contains a project.Project"
        },
        "links": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/furoLink"
          },
          "title": "Hateoas links"
        },
        "meta": {
          "$ref": "#/definitions/furoMeta",
          "title": "Meta for the response"
        }
      },
      "title": "ProjectEntity with Project"
    },
    "bundledTask": {
      "type": "object",
      "properties": {
        "description": {
          "type": "string",
          "title": "Short task description"
        },
        "display_name": {
          "$ref": "#/definitions/bundledProjectCollection",
          "title": "Localized String representation of a task"
        },
        "estimated_time": {
          "type": "integer",
          "format": "int32",
          "title": "Estimated time in days"
        },
        "owner": {
          "$ref": "#/definitions/bundledPerson",
          "title": "Owner of a task"
        },
        "subtasks": {
          "$ref": "#/definitions/bundledTask",
          "title": "List of subtasks"
        }
      },
      "title": "Task data description"
    },
    "bundledTaskCollection": {
      "type": "object",
      "properties": {
        "entities": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/bundledTaskEntity"
          },
          "title": "Contains a task.TaskEntity repeated"
        },
        "links": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/furoLink"
          },
          "title": "Hateoas links"
        },
        "meta": {
          "$ref": "#/definitions/furoMeta",
          "title": "Meta for the response"
        }
      },
      "title": "TaskCollection with repeated TaskEntity"
    },
    "bundledTaskEntity": {
      "type": "object",
      "properties": {
        "data": {
          "$ref": "#/definitions/bundledTask",
          "title": "contains a task.Task"
        },
        "links": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/furoLink"
          },
          "title": "Hateoas links"
        },
        "meta": {
          "$ref": "#/definitions/furoMeta",
          "title": "Meta for the response"
        }
      },
      "title": "TaskEntity with Task"
    },
    "bundledTree": {
      "type": "object",
      "properties": {
        "description": {
          "type": "string",
          "title": "description of the node"
        },
        "display_name": {
          "type": "string",
          "title": "String representation of the node"
        },
        "has_error": {
          "type": "boolean",
          "format": "boolean",
          "title": "if node has error"
        },
        "icon": {
          "type": "string",
          "title": "icon of the node"
        },
        "id": {
          "type": "string",
          "title": "Id of the node"
        },
        "key_words": {
          "type": "string",
          "title": "key words of the node"
        },
        "open": {
          "type": "boolean",
          "format": "boolean",
          "title": "node open or not"
        },
        "panel": {
          "type": "string",
          "title": "Indicator which panel type is loaded"
        },
        "root": {
          "$ref": "#/definitions/bundledTreeitem",
          "title": "Rootnode of the tree"
        },
        "subtitle": {
          "type": "string",
          "title": "subtitle of the node"
        }
      },
      "title": "Singletonresource of the navigationtree"
    },
    "bundledTreeCollection": {
      "type": "object",
      "properties": {
        "entities": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/bundledTreeEntity"
          },
          "title": "Contains a tree.TreeEntity repeated"
        },
        "links": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/furoLink"
          },
          "title": "Hateoas links"
        },
        "meta": {
          "$ref": "#/definitions/furoMeta",
          "title": "Meta for the response"
        }
      },
      "title": "TreeCollection with repeated TreeEntity"
    },
    "bundledTreeEntity": {
      "type": "object",
      "properties": {
        "data": {
          "$ref": "#/definitions/bundledTree",
          "title": "contains a tree.Tree"
        },
        "links": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/furoLink"
          },
          "title": "Hateoas links"
        },
        "meta": {
          "$ref": "#/definitions/furoMeta",
          "title": "Meta for the response"
        }
      },
      "title": "TreeEntity with Tree"
    },
    "bundledTreeitem": {
      "type": "object",
      "properties": {
        "children": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/bundledTreeitem"
          },
          "title": "Children of this node"
        },
        "description": {
          "type": "string",
          "title": "description of the node"
        },
        "display_name": {
          "type": "string",
          "title": "String representation of the node"
        },
        "has_error": {
          "type": "boolean",
          "format": "boolean",
          "title": "if node has error"
        },
        "icon": {
          "type": "string",
          "title": "icon of the node"
        },
        "id": {
          "type": "string",
          "title": "Id of the node"
        },
        "key_words": {
          "type": "string",
          "title": "key words of the node"
        },
        "link": {
          "$ref": "#/definitions/furoLink",
          "title": "Deeplink information of this node"
        },
        "open": {
          "type": "boolean",
          "format": "boolean",
          "title": "node open or not"
        },
        "subtitle": {
          "type": "string",
          "title": "subtitle of the node"
        }
      },
      "title": "Item of the navigationtree"
    },
    "furoFieldconstraint": {
      "type": "object",
      "properties": {
        "constraint": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "title": "constrain of a field"
        }
      },
      "title": "constrains of fields"
    },
    "furoFieldmeta": {
      "type": "object",
      "properties": {
        "label": {
          "type": "string",
          "title": "meta information of a field"
        }
      },
      "title": "meta"
    },
    "furoLink": {
      "type": "object",
      "properties": {
        "href": {
          "type": "string",
          "title": "link"
        },
        "method": {
          "type": "string",
          "title": "method of curl"
        },
        "rel": {
          "type": "string",
          "title": "the relationship"
        },
        "type": {
          "type": "string",
          "title": "mime type"
        }
      },
      "title": "link"
    },
    "furoMeta": {
      "type": "object",
      "properties": {
        "meta": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/furoMetafield"
          },
          "title": "fields of meta info"
        }
      },
      "title": "meta info"
    },
    "furoMetafield": {
      "type": "object",
      "properties": {
        "constraints": {
          "$ref": "#/definitions/furoFieldconstraint",
          "title": "constraints of a field"
        },
        "meta": {
          "$ref": "#/definitions/furoFieldmeta",
          "title": "meta information of a field"
        }
      },
      "title": "fields of meta info"
    },
    "googleDate": {
      "type": "object",
      "properties": {
        "day": {
          "type": "integer",
          "format": "int32",
          "description": "Day of month. Must be from 1 to 31 and valid for the year and month, or 0. if specifying a year by itself or a year and month where the day is not significant."
        },
        "display_name": {
          "type": "string",
          "title": "Localized String representation of date"
        },
        "month": {
          "type": "integer",
          "format": "int32",
          "description": "Month of year. Must be from 1 to 12, or 0 if specifying a year without a month and day."
        },
        "year": {
          "type": "integer",
          "format": "int32",
          "description": "Year of date. Must be from 1 to 9999, or 0 if specifying a date without a year."
        }
      },
      "title": "Date, https://github.com/googleapis/googleapis/blob/master/google/date.proto"
    },
    "googleMoney": {
      "type": "object",
      "properties": {
        "currency_code": {
          "type": "string",
          "description": "The 3-letter currency code defined in ISO 4217."
        },
        "display_name": {
          "type": "string",
          "title": "String representation of money entity"
        },
        "nanos": {
          "type": "string",
          "format": "int64",
          "description": "Number of nano (10^-9) units of the amount. For example $-1.75 is represented as `units`=-1 and `nanos`=-750,000,000."
        },
        "units": {
          "type": "string",
          "format": "int64",
          "description": "The whole units of the amount."
        }
      },
      "title": "Represents an amount of money with its currency type. https://github.com/googleapis/googleapis/blob/master/google/money.proto"
    }
  }
}
