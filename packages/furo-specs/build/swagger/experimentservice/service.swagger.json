{
  "swagger": "2.0",
  "info": {
    "title": "experimentservice/service.proto",
    "version": "version not set"
  },
  "schemes": [
    "http",
    "https"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/mockdata/experiments": {
      "get": {
        "summary": "The List method takes zero or more parameters as input, and returns a ExperimentCollection of ExperimentEntity that match the input parameters.",
        "operationId": "ListExperiments",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/experimentExperimentCollection"
            }
          }
        },
        "parameters": [
          {
            "name": "fields",
            "description": "Partielle Repr채sentation fields=id,name // 10.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "sort",
            "description": "Sortierung nach feldern\n**?filter=-completed** um completed absteigend zu bekommen\n**?filter=completed** um completed aufsteigend zu bekommen.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter",
            "description": "Filter.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "page",
            "description": "Gew체nschte Seite. Tipp: Folge dem HATEOAS next, prev,...",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "limit",
            "description": "Anzahl Elemente pro Seite, maximal sind 99 erlaubt.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "count",
            "description": "Meta f체r die Anzahl der Elemente der Resource, bei true ist in der Antwort Meta der count aufgef체hrt.",
            "in": "query",
            "required": false,
            "type": "boolean",
            "format": "boolean"
          },
          {
            "name": "sum",
            "description": "not implemented.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "view",
            "description": "not implemented (ehemals context).",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "q",
            "description": "Query term to search a experiment.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "ExperimentService"
        ]
      },
      "post": {
        "summary": "Creates a new Experiment",
        "operationId": "CreateExperiment",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/experimentExperimentEntity"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/experimentExperiment"
            }
          }
        ],
        "tags": [
          "ExperimentService"
        ]
      }
    },
    "/mockdata/experiments/{exp}": {
      "delete": {
        "summary": "Delete a Experiment",
        "operationId": "DeleteExperiment",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          }
        },
        "parameters": [
          {
            "name": "exp",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "ExperimentService"
        ]
      },
      "patch": {
        "summary": "Updates a Experiment, partial updates are supported",
        "operationId": "UpdateExperiment",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/experimentExperimentEntity"
            }
          }
        },
        "parameters": [
          {
            "name": "exp",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/experimentExperiment"
            }
          }
        ],
        "tags": [
          "ExperimentService"
        ]
      }
    },
    "/mockdata/experiments/{exp}/get.json": {
      "get": {
        "summary": "The Get method takes zero or more parameters, and returns a ExperimentEntity which contains a Experiment",
        "operationId": "GetExperiment",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/experimentExperimentEntity"
            }
          }
        },
        "parameters": [
          {
            "name": "exp",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "ExperimentService"
        ]
      }
    }
  },
  "definitions": {
    "experimentExperiment": {
      "type": "object",
      "properties": {
        "description": {
          "type": "string",
          "title": "Short experiment description"
        },
        "display_name": {
          "type": "string",
          "title": "Localized String representation of a experiment"
        },
        "furo_data_bool_icon": {
          "type": "boolean",
          "format": "boolean",
          "title": "field for furo-data-bool-icon for testing"
        },
        "furo_data_checkbox_input": {
          "type": "boolean",
          "format": "boolean",
          "title": "field for furo_data_checkbox_input for testing"
        },
        "furo_data_color_input": {
          "type": "string",
          "title": "field for furo-data-color-input for testing"
        },
        "furo_data_date_input": {
          "type": "string",
          "title": "field for furo-data-date-input for testing"
        },
        "furo_data_number_input": {
          "type": "number",
          "format": "float",
          "title": "field for furo-data-number-input for testing"
        },
        "furo_data_password_input": {
          "type": "string",
          "title": "field for furo-data-password-input for testing"
        },
        "furo_data_range_input": {
          "type": "string",
          "title": "field for furo-data-range-input for testing"
        },
        "furo_data_search_input": {
          "type": "string",
          "title": "field for furo-search-input for testing"
        },
        "furo_data_text_input": {
          "type": "string",
          "title": "field for furo_data_text_input for testing"
        },
        "furo_data_textarea_input": {
          "type": "string",
          "title": "field for furo_data_textarea_input for testing"
        },
        "furo_data_time_input": {
          "type": "string",
          "title": "field for furo-data-time-input for testing"
        },
        "id": {
          "type": "string",
          "title": "Identity of a experiment"
        },
        "the_any_type": {
          "$ref": "#/definitions/protobufAny",
          "title": "field for testing any"
        }
      },
      "title": "experiment spec for testing"
    },
    "experimentExperimentCollection": {
      "type": "object",
      "properties": {
        "entities": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/experimentExperimentEntity"
          },
          "title": "Contains a experiment.ExperimentEntity repeated"
        },
        "links": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/furoLink"
          },
          "title": "Hateoas links"
        },
        "meta": {
          "$ref": "#/definitions/furoMeta",
          "title": "Meta for the response"
        }
      },
      "title": "ExperimentCollection with repeated ExperimentEntity"
    },
    "experimentExperimentEntity": {
      "type": "object",
      "properties": {
        "data": {
          "$ref": "#/definitions/experimentExperiment",
          "title": "contains a experiment.Experiment"
        },
        "links": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/furoLink"
          },
          "title": "Hateoas links"
        },
        "meta": {
          "$ref": "#/definitions/furoMeta",
          "title": "Meta for the response"
        }
      },
      "title": "ExperimentEntity with Experiment"
    },
    "furoFieldconstraint": {
      "type": "object",
      "properties": {
        "constraint": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "title": "constrain of a field"
        }
      },
      "title": "constrains of fields"
    },
    "furoFieldmeta": {
      "type": "object",
      "properties": {
        "label": {
          "type": "string",
          "title": "meta information of a field"
        }
      },
      "title": "meta"
    },
    "furoLink": {
      "type": "object",
      "properties": {
        "href": {
          "type": "string",
          "title": "link"
        },
        "method": {
          "type": "string",
          "title": "method of curl"
        },
        "rel": {
          "type": "string",
          "title": "the relationship"
        },
        "type": {
          "type": "string",
          "title": "mime type"
        }
      },
      "title": "link"
    },
    "furoMeta": {
      "type": "object",
      "properties": {
        "meta": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/furoMetafield"
          },
          "title": "fields of meta info"
        }
      },
      "title": "meta info"
    },
    "furoMetafield": {
      "type": "object",
      "properties": {
        "constraints": {
          "$ref": "#/definitions/furoFieldconstraint",
          "title": "constraints of a field"
        },
        "meta": {
          "$ref": "#/definitions/furoFieldmeta",
          "title": "meta information of a field"
        }
      },
      "title": "fields of meta info"
    },
    "protobufAny": {
      "type": "object",
      "properties": {
        "type_url": {
          "type": "string"
        },
        "value": {
          "type": "string",
          "format": "byte"
        }
      },
      "title": "Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message. https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/any.proto"
    }
  }
}
