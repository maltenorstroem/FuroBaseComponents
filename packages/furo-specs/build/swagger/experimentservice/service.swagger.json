{
  "swagger": "2.0",
  "info": {
    "title": "experimentservice/service.proto",
    "version": "version not set"
  },
  "schemes": [
    "http",
    "https"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/mockdata/experiments": {
      "get": {
        "summary": "The List method takes zero or more parameters as input, and returns a ExperimentCollection of ExperimentEntity that match the input parameters.",
        "operationId": "ListExperiments",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/experimentExperimentCollection"
            }
          }
        },
        "parameters": [
          {
            "name": "fields",
            "description": "Partial representation, fields=id,name.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "order_by",
            "description": "*\nSort fields, comma separated list for the ordering\nuse **?filter=-display_name** with a dash to sort descending\nuse **?filter=display_name** to sort ascending.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter",
            "description": "Filter.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "page",
            "description": "Page number for paginated content. Tipp: follow the HATEOAS next, prev,...",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "limit",
            "description": "Number of elements to return per page.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "view",
            "description": "https://cloud.google.com/apis/design/design_patterns#resource_view.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "q",
            "description": "Query term to search a experiment.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "ExperimentService"
        ]
      },
      "post": {
        "summary": "Creates a new Experiment",
        "operationId": "CreateExperiment",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/experimentExperimentEntity"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/experimentExperiment"
            }
          }
        ],
        "tags": [
          "ExperimentService"
        ]
      }
    },
    "/mockdata/experiments/1:release": {
      "post": {
        "summary": "Releases experiment",
        "operationId": "ReleaseExperiment",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/experimentExperimentEntity"
            }
          }
        ],
        "tags": [
          "ExperimentService"
        ]
      }
    },
    "/mockdata/experiments/{exp}": {
      "delete": {
        "summary": "Delete a Experiment",
        "operationId": "DeleteExperiment",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          }
        },
        "parameters": [
          {
            "name": "exp",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "ExperimentService"
        ]
      },
      "patch": {
        "summary": "Updates a Experiment, partial updates are supported",
        "operationId": "UpdateExperiment",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/experimentExperimentEntity"
            }
          }
        },
        "parameters": [
          {
            "name": "exp",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/experimentExperiment"
            }
          }
        ],
        "tags": [
          "ExperimentService"
        ]
      }
    },
    "/mockdata/experiments/{exp}/get.json": {
      "get": {
        "summary": "The Get method takes zero or more parameters, and returns a ExperimentEntity which contains a Experiment",
        "operationId": "GetExperiment",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/experimentExperimentEntity"
            }
          }
        },
        "parameters": [
          {
            "name": "exp",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "ExperimentService"
        ]
      }
    }
  },
  "definitions": {
    "experimentExperiment": {
      "type": "object",
      "properties": {
        "description": {
          "type": "string",
          "title": "Short experiment description"
        },
        "display_name": {
          "type": "string",
          "title": "Localized String representation of a experiment"
        },
        "furo_data_bool_icon": {
          "type": "boolean",
          "format": "boolean",
          "title": "field for furo-data-bool-icon for testing"
        },
        "furo_data_checkbox_input": {
          "type": "boolean",
          "format": "boolean",
          "title": "field for furo_data_checkbox_input for testing"
        },
        "furo_data_color_input": {
          "type": "string",
          "title": "field for furo-data-color-input for testing"
        },
        "furo_data_date_input": {
          "type": "string",
          "title": "field for furo-data-date-input for testing"
        },
        "furo_data_date_input_google": {
          "$ref": "#/definitions/typeDate",
          "title": "field for furo-data-date-input for testing"
        },
        "furo_data_file_input": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "field for testing file type"
        },
        "furo_data_money_input": {
          "$ref": "#/definitions/typeMoney",
          "title": "field for testing money type"
        },
        "furo_data_number_input": {
          "type": "number",
          "format": "float",
          "title": "field for furo-data-number-input for testing"
        },
        "furo_data_password_input": {
          "type": "string",
          "title": "field for furo-data-password-input for testing"
        },
        "furo_data_range_input": {
          "type": "string",
          "title": "field for furo-data-range-input for testing"
        },
        "furo_data_search_input": {
          "type": "string",
          "title": "field for furo-search-input for testing"
        },
        "furo_data_text_input": {
          "type": "string",
          "title": "field for furo_data_text_input for testing"
        },
        "furo_data_textarea_input": {
          "type": "string",
          "title": "field for furo_data_textarea_input for testing"
        },
        "furo_data_time_input": {
          "type": "string",
          "title": "field for furo-data-time-input for testing"
        },
        "id": {
          "type": "string",
          "title": "Identity of a experiment"
        },
        "repstring": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "repeated string"
        },
        "single_type_property": {
          "$ref": "#/definitions/furoProperty",
          "title": "field for testing property"
        },
        "the_any_type": {
          "$ref": "#/definitions/protobufAny",
          "title": "field for testing any"
        },
        "type_property": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/furoProperty"
          },
          "title": "field for testing property"
        },
        "type_with_options": {
          "type": "string",
          "title": "field for testing static options"
        },
        "update_mask": {
          "$ref": "#/definitions/protobufFieldMask",
          "title": "Contains a field_mask which fields of the targeted resource are going to be updated"
        }
      },
      "title": "experiment spec for testing"
    },
    "experimentExperimentCollection": {
      "type": "object",
      "properties": {
        "entities": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/experimentExperimentEntity"
          },
          "title": "Contains a experiment.ExperimentEntity repeated"
        },
        "links": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/furoLink"
          },
          "title": "Hateoas links"
        },
        "meta": {
          "$ref": "#/definitions/furoMeta",
          "title": "Meta for the response"
        }
      },
      "title": "ExperimentCollection with repeated ExperimentEntity"
    },
    "experimentExperimentEntity": {
      "type": "object",
      "properties": {
        "data": {
          "$ref": "#/definitions/experimentExperiment",
          "title": "contains a experiment.Experiment"
        },
        "links": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/furoLink"
          },
          "title": "Hateoas links"
        },
        "meta": {
          "$ref": "#/definitions/furoMeta",
          "title": "Meta for the response"
        }
      },
      "title": "ExperimentEntity with Experiment"
    },
    "furoFieldConstraint": {
      "type": "object",
      "properties": {
        "is": {
          "type": "string",
          "title": "the constraint value as string, even it is a number"
        },
        "message": {
          "type": "string",
          "title": "The message to display on constraint violation"
        }
      },
      "title": "a single fieldconstraint"
    },
    "furoFieldMeta": {
      "type": "object",
      "properties": {
        "default": {
          "type": "string",
          "title": "The default value as JSON string"
        },
        "hint": {
          "type": "string",
          "title": "A hint"
        },
        "label": {
          "type": "string",
          "title": "The label"
        },
        "options": {
          "$ref": "#/definitions/furoFieldoption",
          "title": "Fieldoptions"
        },
        "readonly": {
          "type": "boolean",
          "format": "boolean",
          "title": "readonly"
        },
        "repeated": {
          "type": "boolean",
          "format": "boolean",
          "title": "repeated"
        },
        "typespecific": {
          "$ref": "#/definitions/protobufAny",
          "title": "Put in type specific metas for your fields here"
        }
      },
      "title": "Metas for a field"
    },
    "furoFieldoption": {
      "type": "object",
      "properties": {
        "list": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/protobufAny"
          },
          "title": "a list with options, use furo.optionitem or your own"
        }
      },
      "title": "Metas for a field"
    },
    "furoLink": {
      "type": "object",
      "properties": {
        "href": {
          "type": "string",
          "title": "link"
        },
        "method": {
          "type": "string",
          "title": "method of curl"
        },
        "rel": {
          "type": "string",
          "title": "the relationship"
        },
        "service": {
          "type": "string",
          "title": "name of the service which can handle this link"
        },
        "type": {
          "type": "string",
          "title": "mime type"
        }
      },
      "title": "link"
    },
    "furoMeta": {
      "type": "object",
      "properties": {
        "fields": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/furoMetaField"
          },
          "title": "fields of meta info"
        }
      },
      "title": "meta info"
    },
    "furoMetaField": {
      "type": "object",
      "properties": {
        "constraints": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/furoFieldConstraint"
          },
          "title": "constraints for a field"
        },
        "meta": {
          "$ref": "#/definitions/furoFieldMeta",
          "title": "meta information of a field"
        }
      },
      "title": "fields of meta info"
    },
    "furoProperty": {
      "type": "object",
      "properties": {
        "code": {
          "type": "string",
          "title": "property code for additional settings"
        },
        "data": {
          "$ref": "#/definitions/protobufAny",
          "title": "data part of the property"
        },
        "display_name": {
          "type": "string",
          "title": "String representation of the property"
        },
        "id": {
          "type": "string",
          "title": "Id of the property"
        },
        "meta": {
          "$ref": "#/definitions/furoMeta",
          "title": "Meta for the response"
        }
      },
      "title": "Type to define property values with type information"
    },
    "protobufAny": {
      "type": "object",
      "properties": {
        "type_url": {
          "type": "string"
        },
        "value": {
          "type": "string",
          "format": "byte"
        }
      },
      "title": "Any contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message. client uses type `ArrayBuffer` for the value field .  https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/any.proto"
    },
    "protobufFieldMask": {
      "type": "object",
      "properties": {
        "paths": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The implementation of any API method which has a FieldMask type field in the request should verify the included field paths, and return an `INVALID_ARGUMENT` error if any path is duplicated or unmappable."
        }
      },
      "title": "A field mask in update operations specifies which fields of the targeted resource are going to be updated. https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto"
    },
    "typeDate": {
      "type": "object",
      "properties": {
        "day": {
          "type": "integer",
          "format": "int32",
          "description": "Day of month. Must be from 1 to 31 and valid for the year and month, or 0. if specifying a year by itself or a year and month where the day is not significant."
        },
        "display_name": {
          "type": "string",
          "title": "Localized String representation of date"
        },
        "month": {
          "type": "integer",
          "format": "int32",
          "description": "Month of year. Must be from 1 to 12, or 0 if specifying a year without a month and day."
        },
        "year": {
          "type": "integer",
          "format": "int32",
          "description": "Year of date. Must be from 1 to 9999, or 0 if specifying a date without a year."
        }
      },
      "title": "Date, https://github.com/googleapis/googleapis/blob/master/google/date.proto"
    },
    "typeMoney": {
      "type": "object",
      "properties": {
        "currency_code": {
          "type": "string",
          "description": "The 3-letter currency code defined in ISO 4217."
        },
        "display_name": {
          "type": "string",
          "title": "String representation of money entity"
        },
        "nanos": {
          "type": "string",
          "format": "int64",
          "description": "Number of nano (10^-9) units of the amount. For example $-1.75 is represented as `units`=-1 and `nanos`=-750,000,000."
        },
        "units": {
          "type": "string",
          "format": "int64",
          "description": "The whole units of the amount."
        }
      },
      "title": "Represents an amount of money with its currency type. https://github.com/googleapis/googleapis/blob/master/google/money.proto"
    }
  }
}
