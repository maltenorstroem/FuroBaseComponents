{
  "schema_version": "1.0.0",
  "elements": [
    {
      "description": "`furo-fetch-json`\n Fetches and parses json data from a source.\n\n ```html\n <furo-fetch-json src=\"/example.json\" ƒ-fetch=\"--FBPready\" @-data=\"--contentReceived\"></furo-fetch-json>\n ```",
      "summary": "fetch json data",
      "path": "src/furo-fetch-json.js",
      "properties": [
        {
          "name": "src",
          "type": "string | null | undefined",
          "description": "the url you want to fetch",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 25,
              "column": 6
            },
            "end": {
              "line": 25,
              "column": 27
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          }
        }
      ],
      "methods": [
        {
          "name": "fetch",
          "description": "eslint-disable-next-line consistent-return",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 37,
              "column": 2
            },
            "end": {
              "line": 64,
              "column": 3
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "fetchSrc",
          "description": "fetch json data from source",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 72,
              "column": 2
            },
            "end": {
              "line": 75,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "source"
            }
          ],
          "return": {
            "type": "Promise.<any>"
          }
        }
      ],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 15,
          "column": 0
        },
        "end": {
          "line": 76,
          "column": 1
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "name": "FuroFetchJson",
      "attributes": [
        {
          "name": "src",
          "description": "the url you want to fetch",
          "sourceRange": {
            "start": {
              "line": 25,
              "column": 6
            },
            "end": {
              "line": 25,
              "column": 27
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        }
      ],
      "events": [
        {
          "type": "CustomEvent",
          "name": "data",
          "description": "data\nFired when data received and json parsed\ndetail payload: {Object} json data",
          "metadata": {}
        },
        {
          "type": "CustomEvent",
          "name": "parse-error",
          "description": "parse-error\nFired when json is not parseable\ndetail payload: error",
          "metadata": {}
        }
      ],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "furo-fetch-json",
      "mixins": [
        "FBP"
      ]
    },
    {
      "description": "`furo-get-clipboard`\n get the clipboard content from the OS.\n\n```html\n\n<furo-get-clipboard ƒ-trigger=\"--clipboardContentRequested\" @-content=\"--contentReceived\">\n</furo-get-clipboard>\n\n```",
      "summary": "get clipboard content",
      "path": "src/furo-get-clipboard.js",
      "properties": [
        {
          "name": "json",
          "type": "boolean | null | undefined",
          "description": "Convert clipboard content to json",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 46,
              "column": 6
            },
            "end": {
              "line": 46,
              "column": 29
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          }
        }
      ],
      "methods": [
        {
          "name": "trigger",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 19,
              "column": 2
            },
            "end": {
              "line": 35,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        }
      ],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 18,
          "column": 0
        },
        "end": {
          "line": 49,
          "column": 1
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "name": "FuroGetClipboard",
      "attributes": [
        {
          "name": "json",
          "description": "Convert clipboard content to json",
          "sourceRange": {
            "start": {
              "line": 46,
              "column": 6
            },
            "end": {
              "line": 46,
              "column": 29
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        }
      ],
      "events": [
        {
          "type": "CustomEvent",
          "name": "content",
          "description": "content\nFired when clipboard content is received\ndetail payload: {*} content of the clipboard",
          "metadata": {}
        }
      ],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "furo-get-clipboard",
      "mixins": [
        "FBP"
      ]
    },
    {
      "description": "`furo-head-tail`\n Splits an iterable (i.e. Array) in its head and tail part.\n\n```\n <furo-head-tail ƒ-split=\"--arrayData\" @-head=\"--firstElement\" @-tail=\"--restOfArray\"></furo-head-tail>\n```",
      "summary": "split an array",
      "path": "src/furo-head-tail.js",
      "properties": [],
      "methods": [
        {
          "name": "split",
          "description": "Splits an iterable to its head (first item) and its tail (the rest) parts.\n\n```\n[\"a\", \"b\", \"c\", \"d\"]\n |_|  |___________|\n  ^      ^\n  |      |\n  |     TAIL   => [\"b\", \"c\", \"d\"]\n HEAD          => \"a\"\n```",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 27,
              "column": 2
            },
            "end": {
              "line": 53,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "iterable"
            }
          ],
          "return": {
            "type": "void"
          }
        }
      ],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 12,
          "column": 0
        },
        "end": {
          "line": 54,
          "column": 1
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "name": "FuroHeadTail",
      "attributes": [],
      "events": [
        {
          "type": "CustomEvent",
          "name": "head",
          "description": "head\nFired when Array was splitted\ndetail payload: {Any} first element of array",
          "metadata": {}
        },
        {
          "type": "CustomEvent",
          "name": "tail",
          "description": "tail\nFired when Array was splitted\ndetail payload: {Array || Any} the tail from the injected array (e1 - 1n)",
          "metadata": {}
        }
      ],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "furo-head-tail"
    },
    {
      "description": "`furo-key-filter`\nAllows only defined keyboard events to pass through\n\n```\n<!-- note the asterisk on other-component keydown. Because filter needs the keyboard event. -->\n<other-component @-keydown=\"--keydown(*)\"></other-component>\n<furo-key-filter ƒ-filter=\"--keydown\" @-matched=\"--escapePressed\" keys=\"Escape\"></furo-key-filter>\n```",
      "summary": "keyboard event filter",
      "path": "src/furo-key-filter.js",
      "properties": [
        {
          "name": "keys",
          "type": "string | null | undefined",
          "description": "Coma separated list with allowed keys to pass. i.e \"Enter, ArrowUp\"",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 62,
              "column": 6
            },
            "end": {
              "line": 62,
              "column": 28
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          }
        },
        {
          "name": "shift",
          "type": "boolean | null | undefined",
          "description": "Modifier key **shift** must be pressed too to match",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 66,
              "column": 6
            },
            "end": {
              "line": 66,
              "column": 30
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          }
        },
        {
          "name": "alt",
          "type": "boolean | null | undefined",
          "description": "Modifier key **alt** must be pressed too to match",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 70,
              "column": 6
            },
            "end": {
              "line": 70,
              "column": 28
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          }
        },
        {
          "name": "command",
          "type": "boolean | null | undefined",
          "description": "Alias for meta.\n\nModifier key **meta** must be pressed too to match.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 76,
              "column": 6
            },
            "end": {
              "line": 76,
              "column": 32
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          }
        },
        {
          "name": "meta",
          "type": "boolean | null | undefined",
          "description": "Modifier key **meta** must be pressed too to match",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 80,
              "column": 6
            },
            "end": {
              "line": 80,
              "column": 29
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          }
        },
        {
          "name": "control",
          "type": "boolean | null | undefined",
          "description": "Modifier key **control** must be pressed too to match",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 84,
              "column": 6
            },
            "end": {
              "line": 84,
              "column": 32
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          }
        }
      ],
      "methods": [
        {
          "name": "filter",
          "description": "Check the event and dispatch matched when the conditions are fulfilled.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 24,
              "column": 2
            },
            "end": {
              "line": 51,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "keyboardEvent"
            }
          ],
          "return": {
            "type": "void"
          }
        }
      ],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 18,
          "column": 0
        },
        "end": {
          "line": 88,
          "column": 1
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "name": "FuroKeyFilter",
      "attributes": [
        {
          "name": "keys",
          "description": "Coma separated list with allowed keys to pass. i.e \"Enter, ArrowUp\"",
          "sourceRange": {
            "start": {
              "line": 62,
              "column": 6
            },
            "end": {
              "line": 62,
              "column": 28
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        },
        {
          "name": "shift",
          "description": "Modifier key **shift** must be pressed too to match",
          "sourceRange": {
            "start": {
              "line": 66,
              "column": 6
            },
            "end": {
              "line": 66,
              "column": 30
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        },
        {
          "name": "alt",
          "description": "Modifier key **alt** must be pressed too to match",
          "sourceRange": {
            "start": {
              "line": 70,
              "column": 6
            },
            "end": {
              "line": 70,
              "column": 28
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        },
        {
          "name": "command",
          "description": "Alias for meta.\n\nModifier key **meta** must be pressed too to match.",
          "sourceRange": {
            "start": {
              "line": 76,
              "column": 6
            },
            "end": {
              "line": 76,
              "column": 32
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        },
        {
          "name": "meta",
          "description": "Modifier key **meta** must be pressed too to match",
          "sourceRange": {
            "start": {
              "line": 80,
              "column": 6
            },
            "end": {
              "line": 80,
              "column": 29
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        },
        {
          "name": "control",
          "description": "Modifier key **control** must be pressed too to match",
          "sourceRange": {
            "start": {
              "line": 84,
              "column": 6
            },
            "end": {
              "line": 84,
              "column": 32
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        }
      ],
      "events": [
        {
          "type": "CustomEvent",
          "name": "matched",
          "description": "matched\nFired when key matches the options\ndetail payload: keyboardEvent",
          "metadata": {}
        }
      ],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "furo-key-filter",
      "mixins": [
        "FBP"
      ]
    },
    {
      "description": "`furo-key-press`\n Listen to keypress events on parent element\n\n [more about keydown](https://developer.mozilla.org/en-US/docs/Web/API/Document/keydown_event)",
      "summary": "keyboard event listener",
      "path": "src/furo-keydown.js",
      "properties": [
        {
          "name": "key",
          "type": "string | null | undefined",
          "description": "Key to listen on. Like Enter, Backspace, ArrowLeft, A,B,C, a,b,c",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 23,
              "column": 6
            },
            "end": {
              "line": 23,
              "column": 27
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          }
        },
        {
          "name": "global",
          "type": "boolean | null | undefined",
          "description": "Set this attribute to listen to the keydown event global (window).",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 27,
              "column": 6
            },
            "end": {
              "line": 27,
              "column": 31
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          }
        },
        {
          "name": "alt",
          "type": "boolean | null | undefined",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 28,
              "column": 6
            },
            "end": {
              "line": 28,
              "column": 28
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          }
        },
        {
          "name": "ctrl",
          "type": "boolean | null | undefined",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 29,
              "column": 6
            },
            "end": {
              "line": 29,
              "column": 29
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          }
        },
        {
          "name": "meta",
          "type": "boolean | null | undefined",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 30,
              "column": 6
            },
            "end": {
              "line": 30,
              "column": 29
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          }
        },
        {
          "name": "shift",
          "type": "boolean | null | undefined",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 31,
              "column": 6
            },
            "end": {
              "line": 31,
              "column": 30
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          }
        },
        {
          "name": "preventDefault",
          "type": "boolean | null | undefined",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 32,
              "column": 6
            },
            "end": {
              "line": 32,
              "column": 69
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          }
        },
        {
          "name": "stopPropagation",
          "type": "boolean | null | undefined",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 33,
              "column": 6
            },
            "end": {
              "line": 33,
              "column": 71
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          }
        }
      ],
      "methods": [
        {
          "name": "_FBPReady",
          "description": "flow is ready lifecycle method",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 40,
              "column": 2
            },
            "end": {
              "line": 80,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        }
      ],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 13,
          "column": 0
        },
        "end": {
          "line": 81,
          "column": 1
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "name": "FuroKeydown",
      "attributes": [
        {
          "name": "key",
          "description": "Key to listen on. Like Enter, Backspace, ArrowLeft, A,B,C, a,b,c",
          "sourceRange": {
            "start": {
              "line": 23,
              "column": 6
            },
            "end": {
              "line": 23,
              "column": 27
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        },
        {
          "name": "global",
          "description": "Set this attribute to listen to the keydown event global (window).",
          "sourceRange": {
            "start": {
              "line": 27,
              "column": 6
            },
            "end": {
              "line": 27,
              "column": 31
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        },
        {
          "name": "alt",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 28,
              "column": 6
            },
            "end": {
              "line": 28,
              "column": 28
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        },
        {
          "name": "ctrl",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 29,
              "column": 6
            },
            "end": {
              "line": 29,
              "column": 29
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        },
        {
          "name": "meta",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 30,
              "column": 6
            },
            "end": {
              "line": 30,
              "column": 29
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        },
        {
          "name": "shift",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 31,
              "column": 6
            },
            "end": {
              "line": 31,
              "column": 30
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        },
        {
          "name": "prevent-default",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 32,
              "column": 6
            },
            "end": {
              "line": 32,
              "column": 69
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        },
        {
          "name": "stop-propagation",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 33,
              "column": 6
            },
            "end": {
              "line": 33,
              "column": 71
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        }
      ],
      "events": [
        {
          "type": "CustomEvent",
          "name": "key",
          "description": "key\nFired when key was catched on target\ndetail payload: keyevent",
          "metadata": {}
        }
      ],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "furo-keydown",
      "mixins": [
        "FBP"
      ]
    },
    {
      "description": "`furo-markdown`\n Renders given md data with parseMarkdown or loads a md file with `mdsrc=\"source.md\"`",
      "summary": "renders markdown data",
      "path": "src/furo-markdown.js",
      "properties": [
        {
          "name": "mdsrc",
          "type": "string | null | undefined",
          "description": "source of the md",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 46,
              "column": 2
            },
            "end": {
              "line": 48,
              "column": 3
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "markdown",
          "type": "string | null | undefined",
          "description": "markdown string",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 50,
              "column": 2
            },
            "end": {
              "line": 53,
              "column": 3
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "unsafe",
          "type": "boolean | null | undefined",
          "description": "allow unsafe md. (writing html, components,...)",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 34,
              "column": 6
            },
            "end": {
              "line": 34,
              "column": 31
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          }
        }
      ],
      "methods": [
        {
          "name": "fetchMd",
          "description": "fetch markdown from a url or path",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 60,
              "column": 2
            },
            "end": {
              "line": 66,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "src"
            }
          ],
          "return": {
            "type": "Promise.<(string | never)>"
          }
        },
        {
          "name": "parseMarkdown",
          "description": "Parse markdown string to html content",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 72,
              "column": 2
            },
            "end": {
              "line": 76,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "markdown"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_parseMarkdown",
          "description": "parse markdown string to html content",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 83,
              "column": 2
            },
            "end": {
              "line": 93,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "markdown"
            }
          ],
          "return": {
            "type": "(TemplateResult | TemplateResult)"
          }
        },
        {
          "name": "updated",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 95,
              "column": 2
            },
            "end": {
              "line": 99,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "render",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 295,
              "column": 2
            },
            "end": {
              "line": 299,
              "column": 3
            }
          },
          "metadata": {},
          "params": []
        }
      ],
      "staticMethods": [],
      "demos": [
        {
          "url": "demo-furo-markdown",
          "description": "safe mode (default)"
        },
        {
          "url": "demo-furo-markdown-unsafe",
          "description": "unsafe enabled"
        }
      ],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 18,
          "column": 0
        },
        "end": {
          "line": 300,
          "column": 1
        }
      },
      "privacy": "public",
      "superclass": "LitElement",
      "name": "FuroMarkdown",
      "attributes": [
        {
          "name": "mdsrc",
          "description": "source of the md",
          "sourceRange": {
            "start": {
              "line": 46,
              "column": 2
            },
            "end": {
              "line": 48,
              "column": 3
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        },
        {
          "name": "markdown",
          "description": "markdown string",
          "sourceRange": {
            "start": {
              "line": 50,
              "column": 2
            },
            "end": {
              "line": 53,
              "column": 3
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        },
        {
          "name": "unsafe",
          "description": "allow unsafe md. (writing html, components,...)",
          "sourceRange": {
            "start": {
              "line": 34,
              "column": 6
            },
            "end": {
              "line": 34,
              "column": 31
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        }
      ],
      "events": [],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "furo-markdown",
      "mixins": [
        "FBP"
      ]
    },
    {
      "description": "`furo-pretty-json`\nPretty json with highlighting",
      "summary": "pretty prints json data",
      "path": "src/furo-pretty-json.js",
      "properties": [],
      "methods": [
        {
          "name": "injectData",
          "description": "Inject JSON data",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 61,
              "column": 2
            },
            "end": {
              "line": 70,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "json"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "render",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 102,
              "column": 2
            },
            "end": {
              "line": 107,
              "column": 3
            }
          },
          "metadata": {},
          "params": []
        }
      ],
      "staticMethods": [
        {
          "name": "_syntaxHighlight",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 72,
              "column": 2
            },
            "end": {
              "line": 100,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "json"
            }
          ]
        }
      ],
      "demos": [
        {
          "url": "demo-furo-pretty-json",
          "description": "Simple data display"
        }
      ],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 12,
          "column": 0
        },
        "end": {
          "line": 108,
          "column": 1
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "name": "FuroPrettyJson",
      "attributes": [],
      "events": [],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "furo-pretty-json"
    },
    {
      "description": "`furo-put-clipboard`\n put content to the clipboard of the OS.\n\n```html\n\n<furo-put-clipboard json ƒ-trigger=\"--putDataToClipboard\" @-content-putted=\"--contentInClipboard\">\n</furo-put-clipboard>\n\n```",
      "summary": "write content to clipboard",
      "path": "src/furo-put-clipboard.js",
      "properties": [
        {
          "name": "json",
          "type": "boolean | null | undefined",
          "description": "Stringify JSON content. Set this to true to auto stringify your JSON object with a 2 indention.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 54,
              "column": 6
            },
            "end": {
              "line": 54,
              "column": 29
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          }
        }
      ],
      "methods": [
        {
          "name": "setData",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 17,
              "column": 2
            },
            "end": {
              "line": 19,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "data"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "trigger",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 21,
              "column": 2
            },
            "end": {
              "line": 43,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "data"
            }
          ],
          "return": {
            "type": "void"
          }
        }
      ],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 16,
          "column": 0
        },
        "end": {
          "line": 57,
          "column": 1
        }
      },
      "privacy": "public",
      "superclass": "LitElement",
      "name": "FuroPutClipboard",
      "attributes": [
        {
          "name": "json",
          "description": "Stringify JSON content. Set this to true to auto stringify your JSON object with a 2 indention.",
          "sourceRange": {
            "start": {
              "line": 54,
              "column": 6
            },
            "end": {
              "line": 54,
              "column": 29
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        }
      ],
      "events": [
        {
          "type": "CustomEvent",
          "name": "content",
          "description": "content\nFired when clipboard content is received\ndetail payload: {*} content of the clipboard",
          "metadata": {}
        }
      ],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "furo-put-clipboard"
    },
    {
      "description": "`furo-navigation-pad` listens to different keyboard navigation events like the arrow keys. It will attach the listeners\n to the parent node and cancel the default and stop the propagation of the events.\n\n The events are available as standalone events or as combined event in the `navigated` event.\n\n ```html\n <!-- forward all navigation events except the Escape  -->\n <furo-navigation-pad ignored-keys=\"Escape\" @-navigated=\"--navpad\"></furo-navigation-pad>\n\n ```",
      "summary": "keyboard navigation helper",
      "path": "src/furo-navigation-pad.js",
      "properties": [
        {
          "name": "ignoredKeys",
          "type": "string | null | undefined",
          "description": "Enter the keys you want to ignore as comma seperated values.\n\ni.e. \"Escape, ArrowLeft\"",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 35,
              "column": 6
            },
            "end": {
              "line": 35,
              "column": 62
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          }
        }
      ],
      "methods": [
        {
          "name": "_FBPReady",
          "description": "flow is ready lifecycle method",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 42,
              "column": 2
            },
            "end": {
              "line": 232,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        }
      ],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 23,
          "column": 0
        },
        "end": {
          "line": 250,
          "column": 1
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "name": "FuroNavigationPad",
      "attributes": [
        {
          "name": "ignored-keys",
          "description": "Enter the keys you want to ignore as comma seperated values.\n\ni.e. \"Escape, ArrowLeft\"",
          "sourceRange": {
            "start": {
              "line": 35,
              "column": 6
            },
            "end": {
              "line": 35,
              "column": 62
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        }
      ],
      "events": [
        {
          "type": "CustomEvent",
          "name": "arrow-down-pressed",
          "description": "arrow-down-pressed\nFired when ArrowDown key was pressed\ndetail payload: keyboard event",
          "metadata": {}
        },
        {
          "type": "CustomEvent",
          "name": "arrow-left-pressed",
          "description": "arrow-left-pressed\nFired when ArrowLeft key was pressed\ndetail payload: keyboard event",
          "metadata": {}
        },
        {
          "type": "CustomEvent",
          "name": "arrow-right-pressed",
          "description": "arrow-right-pressed\nFired when ArrowRight key was pressed\ndetail payload: keyboard event",
          "metadata": {}
        },
        {
          "type": "CustomEvent",
          "name": "arrow-up-pressed",
          "description": "arrow-up-pressed\nFired when ArrowUp key was pressed\ndetail payload: keyboard event",
          "metadata": {}
        },
        {
          "type": "CustomEvent",
          "name": "end-pressed",
          "description": "end-pressed\nFired when End key was pressed\ndetail payload: keyboard event",
          "metadata": {}
        },
        {
          "type": "CustomEvent",
          "name": "enter-pressed",
          "description": "enter-pressed\nFired when Enter key was pressed\ndetail payload: keyboard event",
          "metadata": {}
        },
        {
          "type": "CustomEvent",
          "name": "escape-pressed",
          "description": "escape-pressed\nFired when Escape key was pressed\ndetail payload: keyboard event",
          "metadata": {}
        },
        {
          "type": "CustomEvent",
          "name": "home-pressed",
          "description": "home-pressed\nFired when Home key was pressed\ndetail payload: keyboard event",
          "metadata": {}
        },
        {
          "type": "CustomEvent",
          "name": "navigated",
          "description": "navigated\nFired when one of the keys was pressed\ndetail payload: key",
          "metadata": {}
        },
        {
          "type": "CustomEvent",
          "name": "page-down-pressed",
          "description": "page-down-pressed\nFired when PageDown key was pressed\ndetail payload: keyboard event",
          "metadata": {}
        },
        {
          "type": "CustomEvent",
          "name": "page-up-pressed",
          "description": "page-up-pressed\nFired when PageUp key was pressed\ndetail payload: keyboard event",
          "metadata": {}
        }
      ],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "furo-navigation-pad",
      "mixins": [
        "FBP"
      ]
    }
  ]
}
